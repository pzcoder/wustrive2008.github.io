<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[wustrive's blog]]></title>
  <subtitle><![CDATA[好记性不如写博客]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="https://wustrive2008.github.io/"/>
  <updated>2015-08-28T14:14:48.725Z</updated>
  <id>https://wustrive2008.github.io/</id>
  
  <author>
    <name><![CDATA[wustrive]]></name>
    <email><![CDATA[wustrive_2008@126.com]]></email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[面向对象设计的基本原则]]></title>
    <link href="https://wustrive2008.github.io/2015/08/28/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%AE%BE%E8%AE%A1%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%8E%9F%E5%88%99/"/>
    <id>https://wustrive2008.github.io/2015/08/28/设计模式/面向对象设计的基本原则/</id>
    <published>2015-08-28T12:51:44.000Z</published>
    <updated>2015-08-28T14:14:48.725Z</updated>
    <content type="html"><![CDATA[<p>对于面向对象软件系统的设计而言，在支持可维护性的同时，提高系统的可复用性是一个至关重要的问题，如何同时提高一个软件系统的可维护性和可复用性是面向对象设计需要解决的核心问题之一。在面向对象设计中，可维护性的复用是以设计原则为基础的。每一个原则都蕴含一些面向对象设计的思想，可以从不同的角度提升一个软件结构的设计水平。<br><a id="more"></a></p>
<h3 id="单一职责原则">单一职责原则</h3><h4 id="定义">定义</h4><p>一个类只负责一个功能领域中的相应职责，或者可以定义为：就一个类而言，应该只有一个引起它变化的原因。</p>
<h4 id="理解">理解</h4><p>单一职责原则是实现高内聚、低耦合的指导方针，它是最简单但又最难运用的原则。<br>每一个职责都是变化的一个轴线，如果一个类有一个以上的职责，这些职责就耦合在了一起。这会导致脆弱的设计。当一个职责发生变化时，可能会影响其它的职责。另外，多个职责耦合在一起，会影响复用性。</p>
<h3 id="开闭原则">开闭原则</h3><h4 id="定义-1">定义</h4><p>一个软件实体应当对扩展开放，对修改关闭。即软件实体应尽量在不修改原有代码的情况下进行扩展。</p>
<h4 id="理解-1">理解</h4><p>在互联网高速发展的今天，软件开发更需要适应随时变化的需求。当软件系统需要面对新的需求时，我们应该尽量保证系统的设计框架是稳定的。如果一个软件设计符合开闭原则，那么可以非常方便地对系统进行扩展，而且在扩展时无须修改现有代码，使得软件系统在拥有适应性和灵活性的同时具备较好的稳定性和延续性。</p>
<p>为了满足开闭原则，需要对系统进行抽象化设计，抽象化是开闭原则的关键。在Java、C#等编程语言中，可以为系统定义一个相对稳定的抽象层，而将不同的实现行为移至具体的实现层中完成。在很多面向对象编程语言中都提供了接口、抽象类等机制，可以通过它们定义系统的抽象层，再通过具体类来进行扩展。如果需要修改系统的行为，无须对抽象层进行任何改动，只需要增加新的具体类来实现新的业务功能即可，实现在不修改已有代码的基础上扩展系统的功能，达到开闭原则的要求。</p>
<h3 id="里氏代换原则">里氏代换原则</h3><h4 id="定义-2">定义</h4><p>所有引用基类（父类）的地方必须能透明地使用其子类的对象。</p>
<h4 id="理解-2">理解</h4><p>在软件中将一个基类对象替换成它的子类对象，程序将不会产生任何错误和异常，反过来则不成立，如果一个软件实体使用的是一个子类对象的话，那么它不一定能够使用基类对象。<br>在程序中尽量使用基类类型来对对象进行定义，而在运行时再确定其子类类型，用子类对象来替换父类对象。<br>在使用里氏代换原则时需要注意如下几个问题：</p>
<ol>
<li>子类的所有方法必须在父类中声明，或子类必须实现父类中声明的所有方法。根据里氏代换原则，为了保证系统的扩展性，在程序中通常使用父类来进行定义，如果一个方法只存在子类中，在父类中不提供相应的声明，则无法在以父类定义的对象中使用该方法。</li>
<li>我们在运用里氏代换原则时，尽量把父类设计为抽象类或者接口，让子类继承父类或实现父接口，并实现在父类中声明的方法，运行时，子类实例替换父类实例，我们可以很方便地扩展系统的功能，同时无须修改原有子类的代码，增加新的功能可以通过增加一个新的子类来实现。里氏代换原则是开闭原则的具体实现手段之一。</li>
<li>Java语言中，在编译阶段，Java编译器会检查一个程序是否符合里氏代换原则，这是一个与实现无关的、纯语法意义上的检查，但Java编译器的检查是有局限的。</li>
</ol>
<h3 id="接口隔离原则">接口隔离原则</h3><h4 id="定义-3">定义</h4><p>使用多个专门的接口，而不使用单一的总接口，即客户端不应该依赖那些它不需要的接口。</p>
<h4 id="理解-3">理解</h4><p>根据接口隔离原则，当一个接口太大时，我们需要将它分割成一些更细小的接口，使用该接口的客户端仅需知道与之相关的方法即可。每一个接口应该承担一种相对独立的角色，不干不该干的事，该干的事都要干。<br>这里的“接口”往往有两种不同的含义：一种是指一个类型所具有的方法特征的集合，仅仅是一种逻辑上的抽象；另外一种是指某种语言具体的“接口”定义，有严格的定义和结构，比如Java语言中的interface。对于这两种不同的含义，ISP的表达方式以及含义都有所不同：</p>
<ol>
<li><p>当把“接口”理解成一个类型所提供的所有方法特征的集合的时候，这就是一种逻辑上的概念，接口的划分将直接带来类型的划分。可以把接口理解成角色，一个接口只能代表一个角色，每个角色都有它特定的一个接口，此时，这个原则可以叫做“角色隔离原则”。</p>
</li>
<li><p>如果把“接口”理解成狭义的特定语言的接口，那么ISP表达的意思是指接口仅仅提供客户端需要的行为，客户端不需要的行为则隐藏起来，应当为客户端提供尽可能小的单独的接口，而不要提供大的总接口。在面向对象编程语言中，实现一个接口就需要实现该接口中定义的所有方法，因此大的总接口使用起来不一定很方便，为了使接口的职责单一，需要将大接口中的方法根据其职责不同分别放在不同的小接口中，以确保每个接口使用起来都较为方便，并都承担某一单一角色。接口应该尽量细化，同时接口中的方法应该尽量少，每个接口中只包含一个客户端（如子模块或业务逻辑类）所需的方法即可，这种机制也称为“定制服务”，即为不同的客户端提供宽窄不同的接口。</p>
</li>
</ol>
<h3 id="合成复用原则">合成复用原则</h3><h4 id="定义-4">定义</h4><p>尽量使用对象组合，而不是继承来达到复用的目的。</p>
<h4 id="理解-4">理解</h4><p>合成复用原则就是在一个新的对象里通过关联关系（包括组合关系和聚合关系）来使用一些已有的对象，使之成为新对象的一部分；新对象通过委派调用已有对象的方法达到复用功能的目的。简言之：复用时要尽量使用组合/聚合关系（关联关系），少用继承。</p>
<p>在面向对象设计中，可以通过两种方法在不同的环境中复用已有的设计和实现，即通过组合/聚合关系或通过继承，但首先应该考虑使用组合/聚合，组合/聚合可以使系统更加灵活，降低类与类之间的耦合度，一个类的变化对其他类造成的影响相对较少；其次才考虑继承，在使用继承时，需要严格遵循里氏代换原则，有效使用继承会有助于对问题的理解，降低复杂度，而滥用继承反而会增加系统构建和维护的难度以及系统的复杂度，因此需要慎重使用继承复用。</p>
<p>通过继承来进行复用的主要问题在于继承复用会破坏系统的封装性，因为继承会将基类的实现细节暴露给子类，由于基类的内部细节通常对子类来说是可见的，所以这种复用又称“白箱”复用，如果基类发生改变，那么子类的实现也不得不发生改变；从基类继承而来的实现是静态的，不可能在运行时发生改变，没有足够的灵活性；而且继承只能在有限的环境中使用（如类没有声明为不能被继承）</p>
<p>由于组合或聚合关系可以将已有的对象（也可称为成员对象）纳入到新对象中，使之成为新对象的一部分，因此新对象可以调用已有对象的功能，这样做可以使得成员对象的内部实现细节对于新对象不可见，所以这种复用又称为“黑箱”复用，相对继承关系而言，其耦合度相对较低，成员对象的变化对新对象的影响不大，可以在新对象中根据实际需要有选择性地调用成员对象的操作；合成复用可以在运行时动态进行，新对象可以动态地引用与成员对象类型相同的其他对象。</p>
<p>一般而言，如果两个类之间是“Has-A”的关系应使用组合或聚合，如果是“Is-A”关系可使用继承。”Is-A”是严格的分类学意义上的定义，意思是一个类是另一个类的”一种”；而”Has-A”则不同，它表示某一个角色具有某一项责任。</p>
<h3 id="迪米特法则">迪米特法则</h3><h4 id="定义-5">定义</h4><p>一个软件实体应当尽可能少地与其他实体发生相互作用。</p>
<h4 id="理解-5">理解</h4><p>如果一个系统符合迪米特法则，那么当其中某一个模块发生修改时，就会尽量少地影响其他模块，扩展会相对容易，这是对软件实体之间通信的限制，迪米特法则要求限制软件实体之间通信的宽度和深度。迪米特法则可降低系统的耦合度，使类与类之间保持松散的耦合关系。<br>迪米特法则还有几种定义形式，包括：不要和“陌生人”说话、只与你的直接朋友通信等，在迪米特法则中，对于一个对象，其朋友包括以下几类：<br>(1) 当前对象本身(this)；<br>(2) 以参数形式传入到当前对象方法中的对象；<br>(3) 当前对象的成员对象；<br>(4) 如果当前对象的成员对象是一个集合，那么集合中的元素也都是朋友；<br>(5) 当前对象所创建的对象。<br>任何一个对象，如果满足上面的条件之一，就是当前对象的“朋友”，否则就是“陌生人”。在应用迪米特法则时，一个对象只能与直接朋友发生交互，不要与“陌生人”发生直接交互，这样做可以降低系统的耦合度，一个对象的改变不会给太多其他对象带来影响。</p>
<p>迪米特法则要求我们在设计系统时，应该尽量减少对象之间的交互，如果两个对象之间不必彼此直接通信，那么这两个对象就不应当发生任何直接的相互作用，如果其中的一个对象需要调用另一个对象的某一个方法的话，可以通过第三者转发这个调用。简言之，就是通过引入一个合理的第三者来降低现有对象之间的耦合度。</p>
<p>在将迪米特法则运用到系统设计中时，要注意下面的几点：在类的划分上，应当尽量创建松耦合的类，类之间的耦合度越低，就越有利于复用，一个处在松耦合中的类一旦被修改，不会对关联的类造成太大波及；在类的结构设计上，每一个类都应当尽量降低其成员变量和成员函数的访问权限；在类的设计上，只要有可能，一个类型应当设计成不变类；在对其他类的引用上，一个对象对其他对象的引用应当降到最低。</p>
<h3 id="参考">参考</h3><p><a href="http://blog.csdn.net/LoveLion/article/category/738450" target="_blank" rel="external">刘伟技术博客</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>对于面向对象软件系统的设计而言，在支持可维护性的同时，提高系统的可复用性是一个至关重要的问题，如何同时提高一个软件系统的可维护性和可复用性是面向对象设计需要解决的核心问题之一。在面向对象设计中，可维护性的复用是以设计原则为基础的。每一个原则都蕴含一些面向对象设计的思想，可以从不同的角度提升一个软件结构的设计水平。<br>]]>
    
    </summary>
    
      <category term="oop" scheme="https://wustrive2008.github.io/tags/oop/"/>
    
      <category term="设计模式" scheme="https://wustrive2008.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="软件设计" scheme="https://wustrive2008.github.io/tags/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1/"/>
    
      <category term="设计模式" scheme="https://wustrive2008.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[nginx平滑升级方案]]></title>
    <link href="https://wustrive2008.github.io/2015/08/28/nginx/nginx%E5%B9%B3%E6%BB%91%E5%8D%87%E7%BA%A7%E6%96%B9%E6%A1%88/"/>
    <id>https://wustrive2008.github.io/2015/08/28/nginx/nginx平滑升级方案/</id>
    <published>2015-08-28T11:50:31.000Z</published>
    <updated>2015-08-28T13:10:39.550Z</updated>
    <content type="html"><![CDATA[<h4 id="下载版本">下载版本</h4><p>下载新版本的nginx源码包<br><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="label">http:</span>//nginx<span class="preprocessor">.org</span>/en/download.html</span><br></pre></td></tr></table></figure></p>
<h4 id="备份配置">备份配置</h4><p>备份旧nginx二进制文件和配置文件<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cp <span class="regexp">/usr/</span>local<span class="regexp">/nginx/</span>sbin<span class="regexp">/nginx /u</span>sr<span class="regexp">/local/</span>nginx<span class="regexp">/sbin/</span>nginx_old</span><br><span class="line">cp <span class="regexp">/usr/</span>local<span class="regexp">/nginx/</span>conf<span class="regexp">/nginx.conf /u</span>sr<span class="regexp">/local/</span>nginx<span class="regexp">/conf/</span>nginx.conf.old</span><br></pre></td></tr></table></figure></p>
<h4 id="配置安装">配置安装</h4><p>解压下载的源码包， 执行configure选项配置<br><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">./configure --<span class="keyword">with</span>-http_ssl_module --<span class="keyword">with</span>-openssl=/path/<span class="keyword">to</span>/openssl_src</span><br><span class="line"></span><br><span class="line">make&amp;make install</span><br></pre></td></tr></table></figure></p>
<p>可以执行/usr/local/nginx/sbin/nginx -V命令查看以前的编译参数。</p>
<h4 id="新旧进程同时运行">新旧进程同时运行</h4><p>向旧的nginx主进程发送USR2信号，这会启动新的nginx主进程而保留旧的nginx主进程。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">kill</span> -USR2 `cat /usr/<span class="built_in">local</span>/nginx/logs/nginx.pid`</span><br></pre></td></tr></table></figure></p>
<h4 id="杀掉旧的子进程">杀掉旧的子进程</h4><p>发送WINCH信号到旧的nginx主进程以杀掉旧的nginx子进程。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">kill</span> -WINCH pid</span><br></pre></td></tr></table></figure></p>
<h4 id="检测访问正常，退出旧的进程">检测访问正常，退出旧的进程</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">kill</span> -QUIT pid</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<h4 id="下载版本">下载版本</h4><p>下载新版本的nginx源码包<br><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><]]>
    </summary>
    
      <category term="linux" scheme="https://wustrive2008.github.io/tags/linux/"/>
    
      <category term="nginx" scheme="https://wustrive2008.github.io/tags/nginx/"/>
    
      <category term="升级" scheme="https://wustrive2008.github.io/tags/%E5%8D%87%E7%BA%A7/"/>
    
      <category term="nginx" scheme="https://wustrive2008.github.io/categories/nginx/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[http协议基础之报文]]></title>
    <link href="https://wustrive2008.github.io/2015/08/26/http%E5%8D%8F%E8%AE%AE/http%E5%8D%8F%E8%AE%AE%E5%9F%BA%E7%A1%80%E4%B9%8B%E6%8A%A5%E6%96%87/"/>
    <id>https://wustrive2008.github.io/2015/08/26/http协议/http协议基础之报文/</id>
    <published>2015-08-26T14:02:25.000Z</published>
    <updated>2015-08-26T16:38:03.070Z</updated>
    <content type="html"><![CDATA[<h2 id="http协议之报文">http协议之报文</h2><h3 id="报文的语法">报文的语法</h3><p>请求报文：<br><figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">method</span>&gt; &lt;request-<span class="type">URL</span>&gt; &lt;version&gt;</span><br><span class="line">&lt;headers&gt;</span><br><span class="line"></span><br><span class="line">&lt;entity-body&gt;</span><br></pre></td></tr></table></figure></p>
<p>响应报文：<br><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;version&gt;</span> <span class="tag">&lt;status&gt;</span> <span class="tag">&lt;reason-phrase&gt;</span></span><br><span class="line"><span class="tag">&lt;headers&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;entity-body&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>说明：</p>
<ul>
<li>方法(method)<br>  客户端希望服务器对资源执行的动作，常见的有GET,POST等</li>
<li>请求URL<br>  请求资源的绝对路径或相对路径</li>
<li>版本<br>  格式：HTTP/<major>.<minor></minor></major></li>
<li>状态码<br>  表示服务器处理的结果，常见的有200,404,400,415,500,502等</li>
<li>原因短语<br>  对状态码的简单描述，如OK</li>
<li>首部(headers)<br>  可以有零个或多个首部，每个首部都包含一个名字，后面跟着一个冒号(:),然后是一个可选的空格，接着是一个值，最后是一个CRLF</li>
<li>实体的主体部分(entity-body)<br>  实体的主体部分包含一个由任意数据组成的数据块</li>
</ul>
<h3 id="首部">首部</h3><h4 id="通用首部">通用首部</h4><p>客户端和服务器端都可以使用的首部，如Date<br>Date: May, 4 Oct 2015 02:15:10 GMT</p>
<h4 id="请求首部">请求首部</h4><p>请求报文所特有的首部，为服务器提供一些额外的信息，如Accept首部用来告知服务器客户端会接受与其请求相符的任意媒体类型：<br>Accept: */*</p>
<h5 id="Accept首部">Accept首部</h5><p>Accept首部为客户端提供了一种将其喜好和能力告知服务器的方式，包含它们想要什么，可以使用什么，以及最重要的，它们不想要什么。这样，服务器就可以根据这些额外信息，对要发送的内容做出更明智的决定。<br>Accept首部包括：<br><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Accept                  告诉服务器能发送哪些媒体类型</span><br><span class="line">Accept-Charset          告诉服务器能发送哪些字符集</span><br><span class="line">Accept-Encoding         告诉服务器能发送哪些编码方式</span><br><span class="line">Accept-<span class="keyword">Language</span>         告诉服务器能发送哪些语言</span><br><span class="line">TE                      告诉服务器可以使用哪些扩展传输编码</span><br></pre></td></tr></table></figure></p>
<h5 id="条件请求首部">条件请求首部</h5><p>客户端有时希望为请求加上某些限制。比如，如果客户端已经有了一份文档副本，就希望只在服务器上的文档如客户端拥有的副本有所区别时，才请求服务器传输文档，这时就可以使用条件请求首部：<br><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Expect                  允许客户端列出某请求所要求的服务器行为</span><br><span class="line">If-Match                如果实体标记与文档当前的实体标记相匹配，就获取这份文档</span><br><span class="line">If-Modified-Since       除非在某个指定日期之后资源被修改过，否则就限制这个请求<span class="instruction"></span><br><span class="line">if-None-Match </span>          如果提供的实体标记与当前文档的实体标记不相符，获取文档</span><br><span class="line">If-Range                允许对文档的某个范围进行条件请求</span><br><span class="line">If-Unmodified-since     除非在某个指定日期之后资源被未修改过,否则就限制这个请求</span><br><span class="line">Range                   如果服务器支持范围请求,就请求资源的指定范围</span><br></pre></td></tr></table></figure></p>
<h5 id="安全请求首部">安全请求首部</h5><p>服务器可以对客户端进行简单的身份认证<br>常见的安全请求首部有：<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">Authorization</span>            包含了客户端提供给服务器，以便对其自身进行认证的数据</span><br><span class="line">Cookie                   客户端向服务器传送一个令牌</span><br></pre></td></tr></table></figure></p>
<h4 id="响应首部">响应首部</h4><p>服务器为客户端提供一些额外信息<br>如：<br><figure class="highlight vbscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Age                         响应持续时间</span><br><span class="line"><span class="keyword">Public</span>                      服务器为其资源支持的请求方法列表</span><br><span class="line">Retry-After                 如果资源不可用，在此日期或时间重试</span><br><span class="line"><span class="built_in">Server</span>                      服务器应用程序的软件名称和版本</span><br></pre></td></tr></table></figure></p>
<h4 id="实体首部">实体首部</h4><p>实体首部指的是用于应对实体主体部分的首部。比如，可以用实体首部来说明实体主体部分的数据类型。<br>Content-Type：text/html; charset=utf-8</p>
<h5 id="内容首部">内容首部</h5><p>提供与实体内容有关的特定信息，说明了其类型，尺寸以及处理它所需的其他有用信息<br>如下：<br><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Content</span>-<span class="tag">Base</span>                    解析相对URL时使用的基础URL</span><br><span class="line"><span class="attribute">Content</span>-Encoding                对主体执行的任意编码方式</span><br><span class="line"><span class="attribute">Content</span>-Language                理解主体时最适宜使用的自然语言</span><br><span class="line"><span class="attribute">Content</span>-Length                  主体的长度或尺寸</span><br><span class="line"><span class="attribute">Content</span>-Location                资源实际所处的位置</span><br><span class="line"><span class="attribute">Content</span>-MD5                     主体的MD5校验和</span><br><span class="line"><span class="attribute">Content</span>-Range                   在整个资源中此实体表示的字节范围</span><br><span class="line"><span class="attribute">Content</span>-Type                    这个主体的对象类型</span><br></pre></td></tr></table></figure></p>
<h4 id="扩展首部">扩展首部</h4><p>非标准的自定义首部</p>
<h3 id="方法">方法</h3><h4 id="Get方法_Head方法">Get方法 Head方法</h4><p>get方法用于请求服务器发送某个资源<br>Head方法与Get方法类似，但服务器在响应中只返回首部。不会返回实体的主体部分，这就允许客户端在未获取实际资源的情况下，对资源首部进行检查，可以：</p>
<ul>
<li>在获取资源的情况下了解资源的情况</li>
<li>通过查看响应中的状态码，看看某个对象是否存在</li>
<li>通过查看首部，测试资源是否被修改</li>
</ul>
<h4 id="PUT方法">PUT方法</h4><p>用于向服务器写入文档，在实际应用中很少用，多用POST实现PUT的功能</p>
<h4 id="POST方法">POST方法</h4><p>向服务器输入数据，如提交表单数据</p>
<h4 id="TRACE方法">TRACE方法</h4><p>发起一个”环回”诊断，行程最后一站的服务器会发送一个TRACE响应，并在响应主体中携带收到的原始报文</p>
<h4 id="OPTIONS方法">OPTIONS方法</h4><p>请求服务器告知其支持的各种功能，可以询问服务器支持哪些方法。<br>服务器的响应如：<br><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="status">HTTP/1.1 <span class="number">200</span> OK</span></span><br><span class="line"><span class="attribute">Allow</span>: <span class="string">GET, POST, PUT</span></span><br><span class="line"><span class="attribute">Content-Length</span>: <span class="string">0</span></span><br></pre></td></tr></table></figure></p>
<h3 id="状态码">状态码</h3><h4 id="100~199信息性状态码">100~199信息性状态码</h4><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">100</span>     <span class="keyword">Continue</span>        说明收到了请求的初始部分，请客户端继续。发送了这个状态码之后，服务器收到请求之后必须进行响应</span><br><span class="line"><span class="number">101</span>     Switching protocols     说明服务器正在根据客户端的指定，将协议切换成<span class="keyword">Update</span>首部所列的协议</span><br></pre></td></tr></table></figure>
<h5 id="客户端与100_Continue">客户端与100 Continue</h5><p>如果客户端向服务器发送一个实体，并且愿意在发送实体之前等待100 Continue响应，那么客户端就要发送一个携带了值为100 Continue的Expect请求首部。如果客户端没有发送实体，就不应该发送100 Continue Expect首部，这样会使服务器误以为客户端要发送一个实体。</p>
<p>客户端发送了100 Continue的Expect首部后不应该永远在那等待服务器的响应。超过一定时间后，应该直接发送实体。</p>
<h5 id="服务器与100_Continue">服务器与100 Continue</h5><p>如果服务器收到一个带有只为100 Continue的Expect首部请求，会用100 Continue响应或一条错误码来进行响应。服务器永远也不应该向没有发送100 Continue期望的客户端发送100 Continue 状态码</p>
<p>如果处于某种原因，服务器在有机会发送100 Continue之前就收到了部分或全部实体，说明客户端已经决定继续发送实体了，这时，服务器不需要发送这个状态码了。</p>
<h5 id="代理与100_Continue">代理与100 Continue</h5><p>如果代理从客户端收到了一条带有100 Continue期望的请求，如果下一跳服务器是HTTP/1.1兼容的，或者不知道下一跳服务器与哪个版本兼容，应该将Expect首部转发到下一跳服务器。如果知道下一跳服务器与HTTP/1.1之前的版本兼容，就应该以417 Expectation Failed错误进行响应。</p>
<h4 id="200~299_成功状态码">200~299 成功状态码</h4><p>200 OK<br>201 Create<br>202 Accepted</p>
<h4 id="300~399_重定向状态码">300~399 重定向状态码</h4><p>304 Not Modified</p>
<h4 id="400~499_客户端错误状态码">400~499 客户端错误状态码</h4><p>400 Bad Request     请求错误<br>401 Unauthorized    需要认证或认证错误<br>403 Forbidden       请求被拒绝，有可能是资源权限问题<br>404 Not Found       未找到资源<br>405 Method Not Allowed  不支持的方法<br>408 Request Timeout     请求超时</p>
<h4 id="500~599_服务器错误状态码">500~599 服务器错误状态码</h4><p>500 Internal Sever Error    服务器内部错误<br>501 Not Implemented     超出服务器能力范围<br>502 Bad Gateway         网关错误，一般是代理服务器找不到下一条链路<br>503 Sevice Unavailable  暂时无法为请求提供你服务<br>504 Gateway Timeout     响应超时<br>505 HTTP Version Not Supported  不支持的协议版本</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="http协议之报文">http协议之报文</h2><h3 id="报文的语法">报文的语法</h3><p>请求报文：<br><figure class="highlight nimrod"><table><tr><td class="gutter"><pre><s]]>
    </summary>
    
      <category term="http" scheme="https://wustrive2008.github.io/tags/http/"/>
    
      <category term="报文" scheme="https://wustrive2008.github.io/tags/%E6%8A%A5%E6%96%87/"/>
    
      <category term="方法" scheme="https://wustrive2008.github.io/tags/%E6%96%B9%E6%B3%95/"/>
    
      <category term="http协议" scheme="https://wustrive2008.github.io/categories/http%E5%8D%8F%E8%AE%AE/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[开放接口的安全验证方案(AES+RSA)]]></title>
    <link href="https://wustrive2008.github.io/2015/08/21/%E5%BC%80%E6%94%BE%E6%8E%A5%E5%8F%A3%E7%9A%84%E5%AE%89%E5%85%A8%E9%AA%8C%E8%AF%81%E6%96%B9%E6%A1%88(AES+RSA)/"/>
    <id>https://wustrive2008.github.io/2015/08/21/开放接口的安全验证方案(AES+RSA)/</id>
    <published>2015-08-21T14:39:13.000Z</published>
    <updated>2015-08-28T12:48:59.214Z</updated>
    <content type="html"><![CDATA[<p>随着密码分析技术的提高，新的数据加密标准AES取代了过时的DES。文章在阐述AES/RSA加密算法的基础上，分别给出了利用AES/RSA实现客户端/服务器端网络数据传输的加密流程。最后在比较AES算法和RSA算法基础上，将AES与RSA相结合提出一种新的数据加密方案。<br><a id="more"></a></p>
<h3 id="基本需求及概念">基本需求及概念</h3><p>随着Internet网的广泛应用，信息安全问题日益突出，以数据加密技术为核心的信息安全技术也得到了极大的发展。目前的数据加密技术根据加密密钥类型可分私钥加密（对称加密）系统和公钥加密（非对称加密）系统[1]。对称加密算法是较传统的加密体制，通信双方在加/解密过程中使用他们共享的单一密钥，鉴于其算法简单和加密速度快的优点，目前仍然是主流的密码体制之一。最常用的对称密码算法是数据加密标准（DES）算法，但是由于DES密钥长度较短，已经不适合当今分布式开放网络对数据加密安全性的要求。最后，一种新的基于Rijndael算法对称高级数据加密标准AES取代了数据加密标准DES。非对称加密由于加/解密钥不同（公钥加密，私钥解密），密钥管理简单，也得到广泛应用。RSA是非对称加密系统最著名的公钥密码算法。</p>
<h3 id="AES算法">AES算法</h3><h4 id="基本原理及算法流程">基本原理及算法流程</h4><p>美国国家标准和技术研究所（NIST）经过三轮候选算法筛选，从众多的分组密码中选中Rijndael算法作为高级加密标准（AES）。Rijndael密码是一个迭代型分组密码，分组长度和密码长度都是可变的，分组长度和密码长度可以独立的指定为128比特，192比特或者256比特。AES的加密算法的数据处理单位是字节，128位的比特信息被分成16个字节，按顺序复制到一个4*4的矩阵中，称为状态（state），AES的所有变换都是基于状态矩阵的变换。<br>用Nr表示对一个数据分组加密的轮数（加密轮数与密钥长度的关系如表1所示）。在轮函数的每一轮迭代中，包括四步变换，分别是字节代换运算(ByteSub())、行变换(ShiftRows())、列混合(MixColumns())以及轮密钥的添加变换AddRoundKey()[3]，其作用就是通过重复简单的非线形变换、混合函数变换，将字节代换运算产生的非线性扩散，达到充分的混合，在每轮迭代中引入不同的密钥，从而实现加密的有效性。<br>表1 是三种不同类型的AES加密密钥分组大小与相应的加密轮数的对照表。加密开始时，输入分组的各字节按表2 的方式装入矩阵state中。如输入ABCDEFGHIJKLMNOP，则输入块影射到如表2的状态矩阵中。<br>表1：<br><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">|AES类型| 密钥长度 | 分组长度 | 加密轮数|</span></span><br><span class="line"><span class="string">|AES-128|  4字     |   4字    |   10    |</span></span><br><span class="line"><span class="string">|AES-192|  6字     |   4字    |   12    |</span></span><br><span class="line"><span class="string">|AES-256|  8字     |   4字    |   14    |</span></span><br></pre></td></tr></table></figure></p>
<p>表2：<br><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">| A | <span class="keyword">E</span> | <span class="keyword">I</span> | M |</span><br><span class="line">| B | F | J | <span class="keyword">N</span> |</span><br><span class="line">| <span class="keyword">C</span> | G | <span class="keyword">K</span> | <span class="keyword">O</span> |</span><br><span class="line">| <span class="keyword">D</span> | H | L | P |</span><br></pre></td></tr></table></figure></p>
<ol>
<li>字节代换运算(ByteSub())<br> 字节代换运算是一个可逆的非线形字节代换操作，对分组中的每个字节进行，对字节的操作遵循一个代换表，即S盒。S盒由有限域 GF（28）上的乘法取逆和GF（2）上的仿射变换两步组成。</li>
<li>行变换ShiftRows()<br> 行变换是一种线性变换，其目的就是使密码信息达到充分的混乱，提高非线形度。行变换对状态的每行以字节为单位进行循环右移，移动字节数根据行数来确定，第0行不发生偏移，第一行循环右移一个字节，第二行移两个，依次类推。</li>
<li>列混合变换MixColumns()<br> 列变换就是从状态中取出一列，表示成多项式的形式后，用它乘以一个固定的多项式a(x)，然后将所得结果进行取模运算，模值为 x4+1。其中a(x)={03}x3+{02}x2+{01}x+{02},<br> 这个多项式与x4+1互质，因此是可逆的。列混合变换的算术表达式为：s’(x)= a(x) s(x)，其中， s(x)表示状态的列多项式。</li>
<li>轮密钥的添加变换AddRoundKey()<br> 在这个操作中，轮密钥被简单地异或到状态中，轮密钥根据密钥表获得，其长度等于数据块的长度Nb。</li>
</ol>
<h4 id="AES算法流程">AES算法流程</h4><p>对于发送方，它首先创建一个AES私钥，并用口令对这个私钥进行加密。然后把用口令加密后的AES密钥通过Internet发送到接收方。发送方解密这个私钥，并用此私钥加密明文得到密文，密文和加密后的AES密钥一起通过Internet发送到接收方。接收方收到后再用口令对加密密钥进行解密得到AES密钥，最后用解密后的密钥把收到的密文解密成明文。图1中是这个过程的实现流程。<br>图1：<br><img src="http://7xifb5.com1.z0.glb.clouddn.com/wustrive-hexoAES流程.png" alt=""></p>
<h3 id="RSA算法">RSA算法</h3><h4 id="基本原理及流程">基本原理及流程</h4><p>RSA是在1977年发明RSA密码系统的三个人的名字的首字母的缩写，他们是：Ron Rivest、Adi Shamir和Leonard Adleman。它是第一个公钥加密算法，在很多密码协议中都有应用，如SSL和S/MIME。RSA算法是基于大质数的因数分解的公匙体系。简单的讲，就是两个很大的质数，一个作为公钥，另一个作为私钥，如用其中一个加密，则用另一个解密。密钥长度从40到2048位可变，密钥越长，加密效果越好，但加密解密的开销也大。RSA算法可简单描述如下：<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">公开密钥：<span class="keyword">n</span>=pq，（p，q为两个不同的很大的质数，p和q必须保密）</span><br><span class="line">将(p-1)和(q-1)相乘得到φ(<span class="keyword">n</span>)</span><br><span class="line">选择一个整数<span class="keyword">e</span> (1&lt;<span class="keyword">e</span>&lt;φ(<span class="keyword">n</span>))与φ(<span class="keyword">n</span>)互质</span><br><span class="line">秘密密钥：<span class="keyword">d</span>=<span class="keyword">e</span>-1modφ(<span class="keyword">n</span>)，即计算一个数字<span class="keyword">d</span>，使得它满足公式 <span class="keyword">de</span>=1 modφ(<span class="keyword">n</span>)</span><br><span class="line">加密：c=mc(mod <span class="keyword">n</span>) </span><br><span class="line">解密：<span class="keyword">m</span>=<span class="keyword">cd</span>(mod <span class="keyword">n</span>)，<span class="keyword">m</span>为明文，c为密文。</span><br></pre></td></tr></table></figure></p>
<h4 id="RSA算法实现流程">RSA算法实现流程</h4><p> 首先，接收方创建RSA密匙对，即一个公钥和一个私钥，公钥被发送到发送方,私钥则被保存在接收方。发送方在接收到这个公钥后,用该公钥对明文进行加密得到密文，然后把密文通过网络传输给接收方。接收方在收到它们后，用RSA私钥对收到的密文进行解密，最后得到明文。图2是整个过程的实现流程。<br>图2：<br><img src="http://7xifb5.com1.z0.glb.clouddn.com/RSA流程.png" alt=""></p>
<h3 id="AES与RSA相结合数据加密方案">AES与RSA相结合数据加密方案</h3><p>RSA算法是公开密钥系统的代表，其安全性建立在具有大素数因子的合数，其因子分解困难这一法则之上的。Rijndael算法作为新一代的高级加密标准，运行时不需要计算机有非常高的处理能力和大的内存，操作可以很容易的抵御时间和空间的攻击，在不同的运行环境下始终能保持良好的性能。这使AES将安全，高效，性能，方便，灵活性集于一体，理应成为网络数据加密的首选。相比较，因为AES密钥的长度最长只有256比特，可以利用软件和硬件实现高速处理，而RSA算法需要进行大整数的乘幂和求模等多倍字长处理，处理速度明显慢于AES[5]；所以AES算法加解密处理效率明显高于RSA算法。在密钥管理方面，因为AES算法要求在通信前对密钥进行秘密分配，解密的私钥必须通过网络传送至加密数据接收方，而RSA采用公钥加密，私钥解密（或私钥加密，公钥解密），加解密过程中不必网络传输保密的密钥；所以RSA算法密钥管理要明显优于AES算法。<br>从上面比较得知，由于RSA加解密速度慢，不适合大量数据文件加密，因此在网络中完全用公开密码体制传输机密信息是没有必要，也是不太现实的。AES加密速度很快，但是在网络传输过程中如何安全管理AES密钥是保证AES加密安全的重要环节。这样在传送机密信息的双方，如果使用AES对称密码体制对传输数据加密，同时使用RSA不对称密码体制来传送AES的密钥，就可以综合发挥AES和RSA的优点同时避免它们缺点来实现一种新的数据加密方案。加解密实现流程如图(3)。<br>图3：<br><img src="http://7xifb5.com1.z0.glb.clouddn.com/wustrive-hexoAES+RSA流程.png" alt=""></p>
<p>具体过程是先由接收方创建RSA密钥对，接收方通过Internet发送RSA公钥到发送方，同时保存RSA私钥。而发送方创建AES密钥，并用该AES密钥加密待传送的明文数据，同时用接受的RSA公钥加密AES密钥，最后把用RSA公钥加密后的AES密钥同密文一起通过Internet传输发送到接收方。当接收方收到这个被加密的AES密钥和密文后，首先调用接收方保存的RSA私钥，并用该私钥解密加密的AES密钥，得到AES密钥。最后用该AES密钥解密密文得到明文。</p>
<h3 id="AES+RSA结合最佳实践">AES+RSA结合最佳实践</h3><h4 id="基本要求">基本要求</h4><ol>
<li>保证传输数据的安全性</li>
<li>保证数据的完整性</li>
<li>能够验证客户端的身份</li>
</ol>
<h4 id="基本流程">基本流程</h4><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">请求：</span><br><span class="line"><span class="number">1.</span> 服务器端(<span class="keyword">server</span>)和客户端(<span class="keyword">client</span>)分别生成自己的密钥对</span><br><span class="line"><span class="number">2.</span> <span class="keyword">server</span>和<span class="keyword">client</span>分别交换自己的公钥</span><br><span class="line"><span class="number">3.</span> <span class="keyword">client</span>生成AES密钥(aesKey)</span><br><span class="line"><span class="number">4.</span> <span class="keyword">client</span>使用自己的RSA私钥(privateKey)对请求明文数据(params)进行数字签名</span><br><span class="line"><span class="number">5.</span> 将签名加入到请求参数中，然后转换为json格式</span><br><span class="line"><span class="number">6.</span> <span class="keyword">client</span>使用aesKey对json数据进行加密得到密文(data)</span><br><span class="line"><span class="number">7.</span> <span class="keyword">client</span>使用sever的RSA公钥对aesKey进行加密(encryptkey)</span><br><span class="line"><span class="number">8.</span> 分别将data和encryptkey作为参数传输给服务器端</span><br><span class="line"></span><br><span class="line">服务器端进行请求响应时将上面流程反过来即可</span><br></pre></td></tr></table></figure>
<h4 id="java版示例">java版示例</h4><p><a href="https://github.com/wustrive2008/aes-rsa-java" target="_blank" rel="external">AES+RSA双重加密Java示例</a></p>
<p>参考：</p>
<ol>
<li>RSA密钥生成方法参考：<br><a href="https://cshall.alipay.com/support/help_detail.htm?help_id=397433&amp;keyword=%C3%DC%D4%BF%B6%D4&amp;sToken=s-39515fca081c4ba4bad6a8eceac4bf89&amp;from=search&amp;flag=0" target="_blank" rel="external">如何生成RSA密钥</a></li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<p>随着密码分析技术的提高，新的数据加密标准AES取代了过时的DES。文章在阐述AES/RSA加密算法的基础上，分别给出了利用AES/RSA实现客户端/服务器端网络数据传输的加密流程。最后在比较AES算法和RSA算法基础上，将AES与RSA相结合提出一种新的数据加密方案。<br>]]>
    
    </summary>
    
      <category term="aes" scheme="https://wustrive2008.github.io/tags/aes/"/>
    
      <category term="java" scheme="https://wustrive2008.github.io/tags/java/"/>
    
      <category term="rsa" scheme="https://wustrive2008.github.io/tags/rsa/"/>
    
      <category term="安全验证" scheme="https://wustrive2008.github.io/tags/%E5%AE%89%E5%85%A8%E9%AA%8C%E8%AF%81/"/>
    
      <category term="开发接口" scheme="https://wustrive2008.github.io/tags/%E5%BC%80%E5%8F%91%E6%8E%A5%E5%8F%A3/"/>
    
      <category term="网络安全" scheme="https://wustrive2008.github.io/tags/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
      <category term="网络安全" scheme="https://wustrive2008.github.io/categories/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[许三观卖血记]]></title>
    <link href="https://wustrive2008.github.io/2015/08/16/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E8%AE%B8%E4%B8%89%E8%A7%82%E5%8D%96%E8%A1%80%E8%AE%B0/"/>
    <id>https://wustrive2008.github.io/2015/08/16/读书笔记/读书笔记-许三观卖血记/</id>
    <published>2015-08-16T13:34:27.000Z</published>
    <updated>2015-08-16T14:35:28.570Z</updated>
    <content type="html"><![CDATA[<h3 id="书籍概要">书籍概要</h3><h5 id="书名">书名</h5><p>《许三观卖血记》</p>
<h5 id="作者">作者</h5><p>余华</p>
<h5 id="作者简介">作者简介</h5><p>余华，1960年4月3日生于浙江杭州，3岁时随父母迁至海盐，在海盐读完小学和中学。曾经从事过5年的牙医工作，1983年开始写作，已经完成长篇小说4部，中短篇小说集6部，随笔集3部，其作品被翻译成二十多种文字，在近三十个国家出版。曾获意大利格林扎纳•卡佛文学奖（1998年）、法国文学和艺术骑士勋章（2004年）、中华图书特殊贡献奖（2005年）、法国国际信使外国小说奖（2008年）等。</p>
<h5 id="阅读方式">阅读方式</h5><p>作家出版社</p>
<h5 id="阅读日期">阅读日期</h5><p>2014.3</p>
<h3 id="书籍简介">书籍简介</h3><p>《许三观卖血记》是余华1995年创作的一部长篇小说。《许三观卖血记》以博大的温情描绘了磨难中的人生，以激烈的故事形式表达了人在面对厄运时求生的欲望。小说讲述了许三观靠着卖血渡过了人生的一个个难关，战胜了命运强加给他的惊涛骇浪，而当他老了，知道自己的血再也没有人要时，精神却崩溃了。</p>
<h3 id="摘录笔记">摘录笔记</h3><ol>
<li>事情都是被逼出来的，人只有被逼上绝路了，才会有办法，没上绝路以前，不是没想到办法，就是想到了也不知道该不该去做</li>
<li>在时代和个人的种种不幸中，我却看到了生活的种种幸福。酸甜苦辣是食物的味道，喜怒哀乐是生活的味道。</li>
<li>爱不是我多有钱，有多么大的智慧和成就，而是我把一切给你。关键时刻，替你挡风遮雨。</li>
<li>生活中的各种事情带来的味道总是相伴而至，有时这个味道重点，有时那个味道重点，这样才真实。质朴之人，秉持真性情之人，不是一定什么都看得开，不是一定什么都做得对，不是一定什么问题都能解决，但是生活在他们眼里，就像他们的性情一样真，他们的生活中有所守护，有所坚持，有所为，有所不为，他们的生活即使无奈，但总是有一种可以用来面对无奈的幽默，生活的种种不幸中总会弥漫人性的暖意。</li>
<li>人活一辈子，谁会没病没灾。谁没个三长两短？遇到那些倒霉的事，有准备总被没准备好。聪明人做事都给自己留一条退路。</li>
<li>“也不能说力气比你多，我们比你们城里人舍得花力气，我们娶女人、盖屋子都是靠卖血挣的钱，这田地里挣的钱最多也就是不让我们饿死。”</li>
<li>我今天来是要对你们说，我今天才知道我前世还烧了香，让我今生嫁给了许三观，你们不知道许三观有多好，他的好几天几夜都说不完，别的我都不说了，我就说说许三观卖血的事，许三观为了我，为了一乐，为了这个家，今天都到医院卖血啦，你们想想，卖血是丢命的，就是不丢命，也会头晕，也会眼花，也会没力气。许三观为了我，为了一乐，为了我们这个家，是命都不要了……</li>
<li>一乐看到了胜利饭店明亮的灯光，他小心翼翼的问许三观：＂爹，你是不是要带我去吃面条？＂许三观不再骂一乐了，他突然温和地说道＂是的。＂</li>
<li>许三观说到这里休息了一会儿，然后又说：“我快活到五十岁了，做人是什么滋味，我也全知道了，我就是死了也可以说是赚了。我儿子才只有二十一岁，他还没有好好做人呢，他连个女人都没有娶，他还没有做过人，他要是死了，那就太吃亏了……”</li>
<li>伟大的父爱， 让我记忆深刻的就是他一路卖血到医院给儿子治病。 为了生活，做父母的可以付出这么多，让我们情何以堪</li>
</ol>
<h3 id="心得笔记">心得笔记</h3><p>[转] <a href="http://book.douban.com/review/1016574/" target="_blank" rel="external">冷冷地读余华</a></p>
<p>余华作为当代中国一位先锋作家，从1984年发表第一篇小说以来，其作品的风格、主题思想和叙述方式都有较明显的阶段性变化。《许三观卖血记》是他的第三部长篇小说，也是他认为自己首次完全让人物自己开口说话创作出来的小说，而且通过这部作品的创作，他对掌握人物对话有了更多的信心。<br>　　<br>　　本文将着重从写作手法去分析这部作品，包括作者对历史背景的处理、人物内心的刻画和体裁结构的选取这三个方面。<br>　　<br>　　一、对历史背景的处理<br>　　小说开篇就清楚的介绍了主角许三观的身份“城里丝厂的送茧工”，这几个字给出的信息包括：其一，许三观是南方某地的城里人；其二，他是一个艰苦的工薪阶层。关于空间的设定，从后文许三观一路往上海去的途中经过的地方可以知道，他生活的地方是江南的一个小城镇，不同于在乡村生活的他的祖辈们。<br>　　<br>　　空间基本确定了，时间呢？小说从许三观20岁左右开始一直写到他的儿子们差不多30岁亦即许三观本人50多岁快60岁为止，前后大概一共40年。经历的历史事件按照时间顺序有这样几件：<br>　　1。1958年的人民公社、大跃进和大炼钢铁。<br>　　2。接下来一两年的天灾人祸导致的全国性饥荒。<br>　　3。文化大革命。城市青年去农村上山下乡。<br>　　<br>　　如何处理这些在中国现代历史留下深深烙印的事件，差不多是每部涉及到这段时间的作品必然会遇到的共同难题。文革之后与经济上的开放相伴的是思想上的开放，从七八十年代开始相继出现的文学中“伤痕文学”、“反思文学”以及之后的“先锋文学”对那段重要的历史各有不同的处理方法。余华八十年代的作品多是不动声色冷眼旁观的揭发暴露疯狂年代的痛苦和丑恶，而在《许三观卖血记》中，我们可以看到与大多数作品不一样的处理方法。作者退出凌驾在作品之上的抽象叙述角度，让人物自己讲述他们亲身经历的具体事情和见闻，并且是用一种看似荒诞的逻辑将人物的经历与历史相关联，使得洪大的历史潮流微观化，真正变成人物生活的一部分。这样提炼出来的人物与历史的关系能够超越时间和空间的限制，从而使得文本能够让自身经历各不相同的读者产生本质上相通的共鸣。不仅《许三观卖血记》如此，之前的《活着》也用相近的方法处理了作为人物命运一个因素的历史，可以看到，这样的作品能够很好地被生活经历文化背景相差悬殊的读者群所接受，从《活着》的多个外文版出版和获得意大利格林扎纳•卡佛文学奖可见一斑。回到《许三观卖血记》，文中对历史的处理举例如下：<br>　　<br>　　1。第十八章整个章节用的都是“许三观对许玉兰说：‘……’”这样的句式，让许三观一股脑儿的把自己所见所闻所思考的有关人民公社、大跃进和大炼钢的内容都说出来。这样一连串的排比和铺陈，把曾经的伤痛用诙谐和荒诞一一化解正是余华特有的风格。<br>　　<br>　　2。许三观用嘴给全家人炒菜这一情节是大饥荒描述的高潮部分。一家人每日喝越来越稀的粥，饿得没力气就长时间躺在床上以减少体力消耗。许三观生日那天，他们喝到放了糖的玉米糊，孩子们却吃不出甜味，许三观说“这苦日子什么时候才能完？小崽子们苦得忘记什么是甜，吃了甜的都想不起来这就是糖。”这样一句感慨举重若轻的道出了极度饥饿年代的人们，物质生活匮乏到忘记了甜的滋味。<br>　　<br>　　3。对文化大革命的理解，作者又是让许三观自己说出来，“你知道吗？为什么工厂停工了、商店关门了、学校不上课、你也用不着去炸抽条了？为什么有人被吊在了树上、有人被关进了牛棚、有人被活活打死？你知道吗？为什么毛主席一说话，就有人把他的话编成了歌，就有人把他的话刷到了墙上、刷到了地上、刷到了汽车上和轮船上、床单上和枕巾上、杯子上和锅上，连厕所的墙上和痰盂上都有。毛主席的名字为什么会这么长予你听着：伟大的领袖伟大的导师伟大的统帅伟大的舵手毛主席万岁万岁万万岁。一共有三十个字，这些都要一口气念下来，中间不能换气。你知道这是为什么？因为文化大革命来了。”这样的一番阐释从许三观口中说出来，既符合人物的身份和层次，又启发读者自己的思考。许三观的逻辑和认识水平并不一定就是正确的，但那是真正身处其中的人物会说出的话，这样的话让读者信服的同时也给读者自己想象和思考的空间：文化大革命不只是发生在中国的那一场灾难，而是整个人类都会面临的一种变态与暴力的可能，因而许三观们面对的不仅仅是他个人的命运，而是有可能发生在每个人身上的命运。<br>　　<br>　　至于知识青年上山下乡，更是用极其简练又充满讽刺意味的排比来表达，“后来，毛主席说话了。毛主席每天都在说话，他说：‘要文斗，不要武斗。’于是人们放下了手里的刀，手里的棍子；毛主席接着说：‘要复课闹革命。’于是一乐、二乐、三乐背上去学校了，学校重新开始上课。又过去了一些日子，毛主席来到天安门城楼上，他举起右手向西一挥，对千百万的学生说：‘知识青年到农村去，接受贫下中农的再教育，很有必要。’”毛主席轻轻松松的一句话就能让许玉兰们免于皮肉之苦；毛主席的一个小指示，就能让孩子们回到校园；毛主席的再一个突发奇想，全国的城市青年就背井离乡去了农村。这样离奇荒诞的事情都真实地发生过了，历史怎么会、还会不会进入这种状态呢？余华给我们的问题藏在他的轻描淡写之中。<br>　　<br>　　二、对人物内心的刻画<br>　　余华认为经过八十年代多篇短篇小说的写作，他解决了一个非常困难的问题，就是心理描写。他意识到真正优秀的心理描写都是不写心理的，这个观点他找到一些例子来说明，比如海明威在短篇小说《白象似的群山》中用两个人的对话来写内心；比如陀思妥耶夫斯基的《罪与罚》用人物的动作和视线来写内心，都非常成功。那么余华的这个观点在《许三观卖血记》中是如何体现的呢？我撷取了几个片断来分析：<br>　　<br>　　1。用人物的视线来写内心<br>　　开头写许三观在四叔家屋顶上见到桂花母女俩，“然后两个女人一前一后地走了过去，两个女人的屁股都很大，许三观从上面看下去，觉得她们的屁股和大腿区分起来不清楚。”这里写出来的是许三观眼中所见女人的屁股很大，而没有写出来的是他的心理，妙的是我们通过许三观的所见就能自然而然地知道他在想什么，不外乎是“我是不是该有个老婆了”。<br>　　<br>　　再举一例，“许玉兰看着他们把自己的家一点一点地搬空了，当她给他们烧开了水，冲了七杯茶，桌子已经没有了，她不知道茶水该往什么地方放了，她看到许三观正帮着他们把吃饭和孩子做作业的桌子搬出去、搬到板车上。然后可能因为刚才过于用力，许三观站在那里呼呼地喘着粗气，伸手擦着脸上的汗。”许玉兰见到的这些细节无一不在写她心中备受煎熬、痛苦辛酸的感受。<br>　　<br>　　2。用人物的动作来写内心<br>　　写许三观为了给一乐治病在不同的地方卖血，卖血之前需要喝大量的水，在一个叫做林浦的地方，“他从包裹里拿出了一只碗，将河面上的水刮到一旁，舀起一碗下面的河水，他看到林浦的河东在碗里有些发绿，他喝了一口，冰冷刺骨的河水进入胃里时，使他浑身哆嗦。他用袖子抹了抹嘴巴后，仰起脖子一口将碗里的水全部喝了下去，然后他双手抱住自己猛烈地抖动了几下。过了一会儿，觉得胃里的温暖慢慢地回来了，他再舀起一碗河水，再次一口喝了下去，接着他再次抱住自己抖动起来。”这一连串的动作描写非常紧凑，让读者不由自主身临其境般地经历许三观的行动，继而是他的心理。虽未曾写一个字的心理描写，却无一不是心理揭示。<br>　　<br>　　3。用人物的语言来写内心<br>　　用对话来推动情节，用对话来表现人物，这应该是《许三观卖血记》最突出的特点了。透过一段一段近乎独白的人物语言，作为读者的我们像是透过显微镜在看人物的内心，其直接剖白和纤毫毕现带来的阅读感受是任何直接的心理描写所无法给与的。举例说明之：<br>　　<br>　　何小勇被车撞伤住院的时候，许三观见人就说““这叫恶有恶报，善有善报，做了坏事不肯承认，”以为别就不知道了，老天爷的眼睛可是看得清清楚楚。老天爷要想罚你了，别说是被车撞，就是好端端地走在屋檐下，瓦片都会飞下来砸你的脑袋；就是好端端地走在桥上，桥也会场到河里去。你们再来看看我，身强力壮，脸色红润，虽然日子过得穷过得苦，可我身体好，身体就是本钱，这可是老天爷奖我的，……”“说起来我做了十三年的乌龟，可你们看看一乐，对我有多亲，比二乐、三乐还亲，平日里有什么好吃的，总要间我：爹，你吃不吃。二乐和三乐这两个小崽子有好吃的，从来不问我。一乐对我好，为什么？也是老天爷奖我的……”“所以，做人要多行善事，不行恶事。做了恶事的话，若不马上改正过来，就要像何小勇一样，遭老天爷的罚，老天爷罚起人来可是一点都不留情面。都是把人往死里罚，那个何小勇躺在医院里面，还不知道死活呢。”这一连串的人物独白淋漓尽致地把许三观的心理层层剖析，其一，何小勇遭此横祸他非常高兴；其二，虽非亲生的一乐对他这个后爹非常好；其三，他这些年来因为何小勇与许玉兰的关系自己成了乌龟所受的屈辱和怨气终于得到释放；其四，老天爷惩恶扬善是世间公理。如此种种，一个实实在在的城市小民形象又一次得到加强，读者感觉到，与许三观的心理距离又近了一些。<br>　　<br>　　三、对体裁结构的选取<br>　　余华是从写短篇小说开始文学道路的，和大多数作家的经历差不多，都是通过多篇短篇小说的锻炼之后尝试中篇与长篇，然后再选择自己最能胜任和得心应手的体裁篇幅进行集中的创作。《许三观卖血记》虽然从篇幅上来说是长篇小说，却和传统的长篇小说有显著的差别。传统的长篇小说如《红楼梦》，涉及到的人物众多，之间关系极其复杂，由此而展开的情节更是错综复杂，阅读产生的感觉是立体的，既有横向的铺排，又有纵向的延伸。而《许三观卖血记》却多多少少有些反其道而行，涉及到的人物非常之少，有名字出过场的人物不超过20个，而重点人物可以说只有许三观一个人，整个的场景也集中在江南的一个小城，没有怎样实质性的转移，可以说，余华故意压缩了横向的铺排，而把所有的力量都集中起来进行纵向的挖掘，具体的表现手法就是——典型情节的不断重复。为什么选择这样做呢？我认为原因包括这几点：<br>　　<br>　　1。余华很清楚地知道自己长于细节描写，于是用不断重复的细节描写一次又一次的加强要表现的内容。小说一共写了许三观的十二次卖血，一次用在娶妻，七次为一乐，一次为二乐，一次为全家，一次为私情，最后一次未卖成的是为自己。虽然写了十二次的卖血，却几乎每一次都有不同的原因、不同的场景设置、不同的结果。在这样明里是重复，暗中却步步加强的推进中，小说的主题得到空前的强化，人物也越来越立体地出现在读者面前。<br>　　<br>　　还有一些重复的细节包括，得知自己身世的一乐再三拒绝帮助母亲做事，三番两次和李血头套近乎的举动。<br>　　<br>　　2。他认识到短篇小说暴风雨般的力量可以通过非简单重复得以运用到长篇的写作中，使长篇的纵深感更加强烈。何以见得作者在使用短篇小说的手法？看人物就知道了。在短篇小说中，作者无需顾及太多的人物，因此与主题不相关的人物就一笔带过，甚至略去他们的形貌和身份。《许三观卖血记》里面有大量这样的人物，每当作者需要主要人物知道什么消息的时候，总会重复使用“有人说”“他们说”“人们说”制造出推动情节发展的渠道。短篇小说的优势悉数运用到长篇小说中去，造成了正面的错位效果，这在其他长篇小说作品中并不常见。<br>　　<br>　　3。重复是喜剧的一个重要元素，在重复的过程中人的机械化得以彰显，从而引发一种近似于自嘲的含着泪的笑。余华在《许三观卖血记》中尝试用类喜剧的方式去解释痛苦、消解痛苦，于是选择用重复来制造这样一种效果，结果证明是很有效的。很经典的例子是许玉兰的哭叫。一种是她三次生产的时候对许三观的破口大骂，第一次骂很久才生出来，第二次骂了一半就产出，第三次已经顺利生产还不知道仍在叫骂。还有一种就是她坐在自家门坎上的嚎哭，“许玉兰摸了一把眼泪，像是甩鼻涕似的甩了出去，她摇着头说：‘我前世造了什么孽呵？我一没有守寡，二没有改嫁，三没有偷汉，可他们说我三个儿子有两个爹，我前世造了什么孽啊？我三个儿子明明只有一个爹，他们们说有两个爹……’许三观看到许玉兰坐到门槛上一哭，脑袋里就嗡嗡叫起来，他在许玉兰的背后喊：‘你回来，你别坐在门槛上，你哭什么？你喊什么？你这个女人没心没肺，这事你能哭吗？这事你能喊吗？你回来……’”，刚开始人们听了还跑过来看热闹，后来日子久了，“许玉兰这时候的哭诉已经没有了吸引力，她把同样的话说了几遍，她的声音由于用力过久，正在逐渐地失去水分，没有了清脆的弹性，变得沙哑和干涸。她的手臂在挥动手绢时开始迟缓了，她喘气的声音越来越重。她的邻居四散而去，像是戏院已经散场。她的丈夫也走开了，许三观对许玉兰的哭诉早就习以为常，因此他走开时仿佛许玉兰不是在哭，而是坐在门口织线衣。然后，二乐和三乐也走开了，这两个孩子倒不是对母亲越来越疲惫的哭诉失去了兴趣，而是看到别人都走开了，他们的父亲也走开了，所以他们也走开了。”这样的描写和鲁迅先生笔下的祥林嫂有惊人的相似之处，都在看似不经意的回环往复中勾起读者带着泪的笑。<br>　　<br>　　4。重复带来的一个结果就是事件的仪式化，一旦仪式化，再平常的事情都被提升到精神层面，从而进入人的心理层面，成为一个寄托，这样的心理经历相信大多数人都会有。文本中卖血之前的喝水，卖血时向血头的行贿，卖血之后吃炒猪肝喝黄酒，不断地在同中有异的场合下反复刻画，把喝水、吃猪肝和喝酒变成了与卖血这件关系到全家身家性命的大事联系在一起，以至于许三观最后一次去卖血，就是因为“想吃一盘炒猪肝，我想喝二两黄酒，我想卖了血以后就去吃炒猪肝，就去喝黄酒……。”至此，作者成功地对卖血这件事做到了仪式化的提炼。<br>　　<br>　　四、总结<br>　　《许三观卖血记》较为成功的讲述了又一个“活着”的故事，作者有意减轻历史感，用非直接手法刻画真实内心，并且运用深化重复的方法营造有别于一般长篇小说的作品。如作者所言，写作《许三观卖血记》的缘起是在街上看到一个走在人群中独自泪流满面的白发老者，他不知这老者为什么会有那么悲伤的哭泣，一直念念不忘。后来偶然机会忆起曾经听闻的一个血头的故事，余华想出了这样的结尾：老者因为卖血卖不出去，独自走在阳光灿烂的街上泪流满面。于是他动笔了。<br>　　<br>　　五、《许三观卖血记》及其他<br>　　这是一部承上启下的作品。说它承上，是相对于《活着》而言，与《活着》相比，《许三观卖血记》更加贴近在现实中能辨出模样的真实地人，他遭遇的灾难是现实中人们都会遭遇到的，读者在阅读过程中看到许三观的选择和做法，会不由自主地想，“换作是我该怎样做”，而大多数时候人们会因为无法做到许三观那样忍辱负重而心生崇敬之情。说它启下，是相对于新作《兄弟》而言，从《许三观卖血记》中，可以看到《兄弟》模糊不清的影子。比如许三观和一乐的父子之情，比如一乐、二乐、三乐之间的兄弟之情，都像是没有来得及展开叙述的《兄弟》中的情谊。再比如写作手法，在《许三观卖血记》中，余华非常自由的穿梭于不同的叙述角度，显得武断却让读者没有办法对他生气，《兄弟》中，这样的穿梭显得更加频繁与刻意，而读者似乎颇能接受这样的安排，伸长了脖子等着看下面的内容。我对于这样的穿梭其实并不非常喜欢，然而因为想不到比它更好的方法也只能很无奈地权且接受了。<br>　　<br>　　从一些粗浅的阅读可以发现，余华一直在摸索自己创作的道路。如他自己所言，八十年代的作品中他把人物当成符号来运用，认为人物与其他物品并无不同，于是他像个暴君一样把自己要说的话通过人物强行说出来，并且不断用暴力和血腥来揭发痛苦的存在。到九十年代，余华的三个长篇让人们以为他反叛了先锋文学，余华自己说，他在《呼喊与细雨》中感觉到人物会说自己的话，在写《活着》的时候无法再将自己的意志加诸于人物，并且让人物自己说话的叙述角度让他感到非常舒服，而在《许三观卖血记》中，人物完全是自己在说话了，并且余华认为他克服了对话的难题。可是我个人觉得《许三观卖血记》中，表面看来，人物的语言的确很符合人物身份，然而深究下去，这些语言却不像是我们所见的现实中的人说得出来的，而是游离于我们所见的现实、栖身于余华认为的“真正的现实”的非常纯真的人才说的出来的。换句话说，余华给我们描绘的并不是评论认为的现实，而是不会实现的“真正的现实”。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="书籍概要">书籍概要</h3><h5 id="书名">书名</h5><p>《许三观卖血记》</p>
<h5 id="作者">作者</h5><p>余华</p>
<h5 id="作者简介">作者简介</h5><p>余华，1960年4月3日生于浙江杭州，3岁时随父母迁至]]>
    </summary>
    
      <category term="余华" scheme="https://wustrive2008.github.io/tags/%E4%BD%99%E5%8D%8E/"/>
    
      <category term="小说" scheme="https://wustrive2008.github.io/tags/%E5%B0%8F%E8%AF%B4/"/>
    
      <category term="电影" scheme="https://wustrive2008.github.io/tags/%E7%94%B5%E5%BD%B1/"/>
    
      <category term="许三观卖血记" scheme="https://wustrive2008.github.io/tags/%E8%AE%B8%E4%B8%89%E8%A7%82%E5%8D%96%E8%A1%80%E8%AE%B0/"/>
    
      <category term="读书笔记" scheme="https://wustrive2008.github.io/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[穆斯林的葬礼]]></title>
    <link href="https://wustrive2008.github.io/2015/08/16/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E7%A9%86%E6%96%AF%E6%9E%97%E7%9A%84%E8%91%AC%E7%A4%BC/"/>
    <id>https://wustrive2008.github.io/2015/08/16/读书笔记/读书笔记-穆斯林的葬礼/</id>
    <published>2015-08-16T13:15:27.000Z</published>
    <updated>2015-08-16T14:35:36.645Z</updated>
    <content type="html"><![CDATA[<h3 id="书籍概要">书籍概要</h3><h5 id="书名">书名</h5><p>《穆斯林的葬礼》</p>
<h5 id="作者">作者</h5><p>霍达 </p>
<h5 id="作者简介">作者简介</h5><p>霍达，国家一级作家，全国政协委员，中央文史研究馆馆员。著有多种体裁的义学作品约500万字，其中长篇小说《穆斯林的葬礼》获第三届茅盾文学奖，作品《补天裂》获第七届全国五个一工程奖长篇小说和电视剧两个奖项，建国五十周年全国十部优秀长篇小说奖，作品《红尘》获第四届全国优秀中篇小说奖与第二届囡家舞台艺术精品工程优秀剧本奖，报告文学《万家忧乐》获第四届全国优秀报告文学奖，报告文学《国殇》获首届巾国潮报告文学奖，电视剧《鹊桥仙》获首届伞刚电视剧飞天奖，电影剧本《我不是猎人》获第二届全同优秀少年儿童读物奖，电影剧本《龙驹》获建罔四十周年个同优秀电影剧本奖。</p>
<h5 id="阅读方式">阅读方式</h5><p>北京十月文艺出版社</p>
<h5 id="阅读日期">阅读日期</h5><p>2013.8-2013.9</p>
<h3 id="书籍简介">书籍简介</h3><p>一个穆斯林家族，六十年间的兴衰，三代人命运的沉浮，两个发生在不同时代、有着不同的内容却又交错扭结的爱情悲剧。这部五十余万字的长篇，以独特的视角、真挚的情感、丰厚的容量、深刻的内涵、冷峻的文笔，宏观地回顾了中国穆斯林漫长而艰难的足迹，揭示了他们在华夏文化与伊斯兰文化的撞击和融合中的心路历程，以及在政治、宗教的氛围中对人生真谛的困惑和追求，着力塑造了梁亦清、韩子奇、梁君璧、梁冰玉、韩新月、楚雁潮等一系列文学画廊中前所未有的人物群像，血肉丰满，栩栩如生。</p>
<h3 id="摘录笔记">摘录笔记</h3><ol>
<li>真有血性的人，绝不曲意求得别人的重视，也不怕别人忽视。别人的误解偏见并不可怕，可怕的是失去了自信，如果你是自信的，就什么话都不用说了。真理从来都是最简单、最朴素的，除了它本身之外，并不需要额外地加以解释，正如一个真正美的人，任何的首饰都是多余的。</li>
<li>时时想到可能会被别人超越，才会用双倍的时间和精力去超越别人。</li>
<li>人可以失落一切，唯独不应该失落自己。</li>
<li>人生是一场梦吗？不，梦醒之后还可以忘却，人生可以忘却吗？ 人生是一部书吗？不，书成之后还可以删改，人生可以删改吗？ 人生从来没有蓝图，度过了人生，才完成了人生。 历史从来都是即兴之作。而当他成为历史，才被千秋万代喋喋不休地评论。而无论是怎样评论吧，都不能改变它的曾经存在，只有从偶然中寻找必然，使它顺理成章。 历史是人的足迹。但并不是所有留下足迹的人都敢于正视自己的历史。 历史是无法重写的。</li>
<li>诗人拜伦说过：“真有血性的人，决不去以求的别人的尊重，也不怕别人的忽视。”别人的误解、偏见并不可怕，可怕的是失去了自信；如果你是自信的，就什么话都不用说了。真理从来都是最简单、最朴素的，除了它本身之外，并不需要额外地加以解释，正如一个真正美丽的人，任何附加的首饰都是多余的。</li>
<li>爱，不是猎取和占有对方，而是发自内心的责任感，爱是一生一世的承诺，就像信仰一样永不改变，永不背叛！不要用自我牺牲这样的词藻来贬低我，我们双方都不是祭坛上的羔羊，我们付出了爱，也得到了爱，爱的深沉，爱的强烈，爱的长久，这就是一切</li>
<li>“爱情，是人类最美好的感情，当两颗心经历了长久的跋涉而终于走到了一起，像镜子一样互相映照，彼此如一，毫无猜疑，当它们的每一声跳动都是在向对方说：我永远也不离开你！那么，爱情就已经悄悄地来临，没有任何力量能把它们分开了！”</li>
<li>历史是人的足迹。但并不是所有留下足迹的人都敢于正视自己的历史。</li>
<li>眼泪这东西，有时能起到极其神奇的作用，能把持有截然不同的观点的人稀里糊涂地拢在一起，把迂腐陈旧的意识变得温暖感人，把生机勃勃的新兴幼芽儿在爱抚之中扼杀！</li>
<li>爱情当然是每个人的权利，但它很神圣，决不可滥用！滥施情感，必然葬送了最纯真、最珍贵的爱情！爱情对于人，就像生命。古人很崇尚‘士为知己者死’，但也不能为一时冲动便轻易献身，那样并没有什么价值。‘知己’应该是一种很高尚的精神境界，而且是双方面的、缺一不可的······爱情，是一种信仰，它贮存在人最珍贵、最真诚的地方······贮存在心里，它和生命同在，和灵魂同在······</li>
<li>“你糊涂啊！”楚雁潮那双布满血丝的眼睛像在冒火，他那激烈的言辞，像征讨、像报复，“你胡说什么‘同情’，‘怜悯’？那种廉价的、卑微的情感能使用于你和我吗？我是一个感情泛滥、随处抛洒、随处赐予以换取别人的感激的伪善者吗？你是一个精神世界一贫如洗、仰赖别人感情的施舍的乞丐吗？你亵渎了我们之间的爱！你问我爱是什么？我告诉你：爱就是火，火总是光明的，不管那熊熊燃烧的是煤块还是木材，是大树还是小草,只要是火，就闪耀着同样的光辉！</li>
<li>追求美是人的本性，我相信人们本能地而非理智地向往纯美纯情的意境，美不必强迫人接受。不然，“落霞与孤鹜齐飞，秋水共长天一色”那样的前人名句也就不会这样传之久远，深入人心。</li>
<li>世界上没有一个青年不曾想到过爱情，每人心中都有一颗爱的种子。它可能萌发得很早，也可能贮存得很久；它可能成熟于短短的一瞬，也可能经历漫长的磨难而最终凋落。爱情是一种神物，不遇到适当的时机，它并不显露明显的形态’以至于本人都觉得似是而非。而当他清醒地意识到它的存在的时候，它就已经成熟了。</li>
<li>她夜夜沉醉在梦中。梦把空间缩短了，梦把时间凝固了，梦把世界净化了。梦中没有污秽，没有嘈杂，没有邪恶；梦中没有分离，没有创伤，没有痛苦；梦中只有柔和的月色，只有温馨的爱；梦使她永远年轻，使她不愿醒来。</li>
<li>爱就是爱，它是人类自发的美好情感，我因为爱你才爱你，此外没有任何目的！爱，不是猎取和占有对方，而是发自内心的责任感，爱是一生一世的承诺，就像信仰一样永不改变，永不背叛！不要用自我牺牲这样的词藻来贬低我，我们双方都不是祭坛上的羔羊，我们付出了爱，也得到了爱，爱的深沉，爱的强烈，爱的长久</li>
<li>在那庄严的时刻每个人都是平等的、坦诚的，在命运的抉择面前，任何伪装、虚饰和自欺欺人的侥幸心理都变得毫无意义，唯一可以使自己镇定的是真才实学。</li>
<li>从来也没有一个人能真正透彻地了解和掌握自己的命运，只不过从各不相同的方式和不可知的命运较量而已，或逆来顺受，或奋起拼搏，拼搏的动力不仅来自“自知”,而且来自幻想——美好的幻想往往既是辉煌的人生的起点也是终极目标。人生需要幻想，幻想使人生变得美好是有限的生命变的被无限！</li>
<li>“活着太艰难，心里装着那么多的痛苦，嘴里又什么都不能说，跟死了又有什么两样？死，也许就了却了忧愁，结束了烦恼，就什么都不管不问了，可是。不。不能死，我怎么能丢下那些玉？怎么能丢下女儿？女儿还有四年，才能大学毕业”</li>
<li>我只知道战争是残酷的，以为战争的苦难可以使人和人的感情更加靠近，却不知道比战争残酷的是人！感情在哪儿？人性在哪儿？</li>
<li>世界重新开始了，两个人的世界！不知道它是罪恶.是苦难，还是幸福.是希望？两个灵魂的垂死挣扎，两个灵魂的遥相呼唤，两个灵魂的猛烈撞击，两个灵魂的痛苦呻吟。是人毁灭了人，还是人拯救了人？</li>
<li>命运，让青年们去互相争夺，就已经够残酷的了，再让失败者为胜利者送行，那简直就是在她的好友的伤口上撒盐！</li>
<li>她看见那棵古老的槐树了，历尽劫磨，阅尽沧桑，它还活着，老干龙钟，枝叶葱茏。过去，每当春天来临，它就绽开串串白花，香气飘满整条胡同；清风吹来，落花如雪，落在她的头上，肩上，”拂了一身还满”。如今树上没有花，开花的季节已经过去了。它白白地开了几十次，落了几十次，一直在等着她呢，而她却没有来。</li>
<li>生命正是因为种种的不知道和种种的可能性，才变得绚烂多姿和魅力无穷。你依然要活下去，依然要向前走。变化是无法预料的，世界充满了不可捉摸的可能。能够把握的只是我们自己</li>
<li>你明知你的茧，是你自己吐的丝凝成的，你挣扎在茧中，你想要突围而出。你遇到了困难，这是一种必然。但你却为自己找了种种借口，你向你的丝退却了。你一面吃力的咬断包围你的丝，一面更汹涌的吐出你的丝，你是一个作茧自缚的高手，你比推石头的西西弗斯还惨。</li>
<li>记得去年秋天，她曾经坐在这块石头上，思索着事业，思索着人生。她倔强地说：“人的灵魂是平等的！”是的，一点儿没错，人和人是平等的。人和人的区别，在于为发掘和体现自身的价值所做出的努力，而不在人的本身。基督徒相信：在上帝面前人人平等；唯物主义者认为：在真理面前人人平等。但是，现在又钻出来一个病魔，为什么人和人在病魔面前却不能平等？</li>
</ol>
<h3 id="心得笔记">心得笔记</h3><p>[转] <a href="http://book.douban.com/review/1102383/" target="_blank" rel="external">那个时代的书</a></p>
<p>看这本书的时候想了很多题目，比如：有情尽情矫，再比如：你看你看月亮的脸。最后还是决定用一个厚道一点的名字，那个时代的书。本书写成于1987年，时隔20年来看，不得不感慨，中国的这20年不仅是工资从30块涨到3000块的过程，更是从韩新月变到安妮宝贝的过程……<br>　　<br>　　听说这本书当年是茅盾文学奖的得主，也曾经是大学生风靡一时的流行读物，现如今的我却觉得除了字数够多，其它真是没什么够的着的。<br>　　<br>　　最喜欢的是韩太太（竟然！）。韩太太一出场，我就觉得是认识的——以前一定在哪儿看过引用这段人物描写，虽然不算最高妙，不过总算达意。缺点在于，对人物评定痕迹过于明显。<br>　　韩太太的许多对话，非常喜欢，不过是些家常里短，用的都是北京的市井语言，透着老式的言词礼节。该怎么安慰人儿，该怎么恭维人儿，该怎么打马虎眼，该怎么步步禁逼寸步不让……全都有股世俗的老到。全书也只有写到韩太太我才觉得这是个可以理解的人。尽管她不识字，没什么文化，许多做法并不高明，也不值得赞扬，可是这个人说着我们都听得懂的话，不矫情；做着自个儿高兴的事儿，遵守着自己以为然的准则，一板一眼，丝丝入扣。隔了20年，当这本书里面其它主人公都沉浸在80年代不知所谓的理想和激情当中的时候，只有韩太太一人，是为着自己，也不全是为着自己，井井有条地活着。<br>　　<br>　　韩子奇说：我跟她结婚，但是我们并没有爱情……直到我和你在一起才体会到什么是爱……靠！看得我……现如今这样的话听得不少吧？凡是红杏出墙的男人们大多回过头来说这样的话。你早干嘛去了？没爱情跟人家结什么婚？韩子奇这个男人真得让人匪夷所思阿！丫小的时候倒是挺本事，跟着师傅的时候就凭着敏锐的商业嗅觉雕刻兔儿爷赚了一小笔，在雕刻宝船的时候又能想到跳过汇远斋直接跟洋人交易的路子，心思多活泛哪！后来师傅过逝了，苦大仇深的他，偏去汇远斋忍受几年耻辱，抖着浑身机灵劲儿偷学人家东西，回来重振奇真斋，这是什么人物？！第一次出场从警察局长手里买宅子的那种从容潇洒的劲头还真让人觉得这个男人十分有魅力……看到最后，就觉得，好嘛！这是前面那个韩子奇吗？既没有能力保证自己心爱的玉与心爱的家两全，又没有魄力在两个女人，两对儿女之间作出一个选择，一味唯唯诺诺，不忍心伤害一个人，结果却是所有的人都被他害苦了，梁君璧，梁冰玉，韩天星，韩新月……这样的男人其实就是自私！不肯放弃他的玉，他的事业，他的根基，他的面子，他的好人形象！看着怎么能让人不生气？你说他是坏人，丫还在那儿使劲惺惺作态，这个不敢惹，那个也不愿伤害，看着就错其！你倒不如做个坏人，痛痛快快爽爽气气。这种天真到可耻，使劲负责任又无所作为，惹人怜爱却软弱的男人，真的比坏人还伤人。女人这辈子如果碰上这样的男人，最好避之三百尺之外<br>　　<br>　　梁玉冰同样是个矫情的主儿。一会儿杨深，一会儿奥利佛，最后投入姐夫的怀抱。她无疑代表了那个时代女性对解放的渴求，热情而盲目。她的许多做法，都显得没头脑，缺乏目的。比如和韩子奇在一起，比如带着新月回国，比如把新月留下独自离开——最后一点更是让人难以接受。一个母亲与自己的孩子分开，这是多么不靠谱的事情！也只有梁玉冰这种不靠谱的人才做得出来。<br>　　<br>　　韩新月和楚雁潮两个人的刻画更加有着时代的特色，虽然主人公生活在六十年代初，不过这两个人具备的却是八十年代所鼓吹的那些个优良品质。<br>　　<br>　　韩新月，看得出来作者是要把这个女孩塑造成一个完美的女神。她青春，美丽，充满朝气与希望；她聪明，努力，不甘人后；她纯洁，善良，有着美好的感情……这些都无可厚非，因为毕竟她只活到19岁，我相信人在19岁之前绝对可以完美。但是，但是，最让人受不了的是——说话文艺腔得让人起了一身的冷痱子。60年代大学生都这么说话吗？<br>　　<br>　　楚雁潮，有文化，有理想，有道德，有纪律，整个一四有新人。除了好就是好，人家不是说嘛！这世界上，好人都是相似的，坏人却各有各的坏……所以吧，这个好人就让人觉得面目模糊。<br>　　<br>　　他们之间的爱情模式也让人想起那个时代，那就是：携手共进！共同进步！我记得舒婷有首诗，写橡树的，大约是说要与你并肩站立共同成长啥的，也就这意思了。呵呵，忍不住地想，当前俺们21世纪神州大地的爱情模式是啥泥？大约是：优势互补！各取所需？哈哈~~~<br>　　<br>　　还有一点觉得特别有意思的是，书中反复提到的：爱的权利！“难道我没有权力爱吗？”几乎书里面所有角色都在心里说过这样的话。如今看来，不禁好笑。现在正常人已经不这么说了，因为这项权力已经普及到成为常识，所以没有挂在嘴上。要真有机会上得台面，我寻思着大概也就第三者说说了。爱的权利不流行了，爱的能力却成为流行话语。20年前，我们还为爱的权利苦苦奋斗，这一转眼，权利有了，能力却丧失掉了，想起来也不是不感慨的。<br>　　<br>　　当然，题目是穆斯林的葬礼，还得有些穆斯林民族的特色的东西。关于这点上面，我觉得作者写的有些生硬，像是硬把那些宗教的知识穿插进去似的，并没有将其融入到小说主人公的生活里去。也或许是因为中国的民族融合太好了，回汗两族在生活当中的差异性已经很小。玉器方面的东西，前半部分比较多，写得比较好（因为我是外行，看着挺热闹），毕竟是主人公的营生，要比民族那部分写得好很多。<br>　　<br>　　全书人物涉及不多，关系并不复杂。对于每个主人公的刻画来讲，也不是很全面立体。比如韩子奇的心理描写极少，而且不具说服力；而梁玉冰和韩新月的心理刻画则过于矫情。我一直觉得中国传统的教育下，决定了每一个中国人绝对不会听了两句煽动的话，或者遇到点小灾小难，心思一活泛就丢下饭碗投奔征程的那种。老百姓说得好，不管怎么样，这日子不还得照样过嘛！说这些人矫情，就是因为他们动辄就不好好过日子了。唯一正常的，也就韩太太一个。<br>　　<br>　　这本书最大的缺点在于，作者太乐于出现在书中。用那“饱含深情的笔触”无处不突显其无可取代的地位。好的故事，是自己流淌出来的，这本书里面的作者似乎唯恐别人忘了她，时不时跳出来喊两嗓子：这是美的，这是好的，这是大家都拥戴的，这是……那些个好啊美啊无一不带有时代的特色和激情。写着写着景色就突兀地跳出句唐诗或者宋词，让人不知是谁的口吻，莫名其妙，破坏了文字的整体感觉。总的来说下笔粗枝大叶，技巧单调。<br>　　<br>　　我觉得写东西的最高境界是不言说，所谓不着一字，尽得风流。读小说，应该是读着读着体会到真善美，体会到命运的无常不公也体会到生活的美好，而并不是谁跳出来跟你说生活真tmd美好。 </p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="书籍概要">书籍概要</h3><h5 id="书名">书名</h5><p>《穆斯林的葬礼》</p>
<h5 id="作者">作者</h5><p>霍达 </p>
<h5 id="作者简介">作者简介</h5><p>霍达，国家一级作家，全国政协委员，中央文史研究馆馆员]]>
    </summary>
    
      <category term="电影" scheme="https://wustrive2008.github.io/tags/%E7%94%B5%E5%BD%B1/"/>
    
      <category term="穆斯林" scheme="https://wustrive2008.github.io/tags/%E7%A9%86%E6%96%AF%E6%9E%97/"/>
    
      <category term="穆斯林的葬礼" scheme="https://wustrive2008.github.io/tags/%E7%A9%86%E6%96%AF%E6%9E%97%E7%9A%84%E8%91%AC%E7%A4%BC/"/>
    
      <category term="读书笔记" scheme="https://wustrive2008.github.io/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="读书笔记" scheme="https://wustrive2008.github.io/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[平凡的世界]]></title>
    <link href="https://wustrive2008.github.io/2015/08/16/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E5%B9%B3%E5%87%A1%E7%9A%84%E4%B8%96%E7%95%8C/"/>
    <id>https://wustrive2008.github.io/2015/08/16/读书笔记/读书笔记-平凡的世界/</id>
    <published>2015-08-16T13:02:21.000Z</published>
    <updated>2015-08-16T14:35:24.989Z</updated>
    <content type="html"><![CDATA[<h3 id="书籍概要">书籍概要</h3><h5 id="书名">书名</h5><p>《平凡的世界》</p>
<h5 id="作者">作者</h5><p>路遥</p>
<h5 id="作者简介">作者简介</h5><p>路遥（1949-1992），原名王卫国，1949年12月3日生于陕西榆林市清涧县一个贫困的农民家庭，因家贫7岁即过继给延川县农村的伯父。曾在延川县立中学学习，1969年回乡务农。其间做过许多临时性工作，并在农村一小学教书一年。1973年进入延安大学中文系学习，开始文学创作。大学毕业后，任《陕西文艺》（今为《延河》）编辑。1980年发表《惊心动魄的一幕》，获第一届全国优秀中篇小说奖。1982年发表中篇小说《人生》，获第二届全国优秀中篇小说奖。1988年完成百万字长篇巨著《平凡的世界》，于1991年获茅盾文学奖。1992年11月17日上午8时20分，路遥因病医治无效在西安逝世，年仅42岁。</p>
<h5 id="阅读方式">阅读方式</h5><p>北京十月文艺出版社</p>
<h5 id="阅读日期">阅读日期</h5><p>2013.6-2.13.8</p>
<h3 id="书籍简介">书籍简介</h3><p>《平凡的世界(套装共3册)》是一部现实主义小说，也是小说化的家族史。作家高度浓缩了中国西北农村的历史变迁过程，作品达到了思想性与艺术性的高度统一，特别是主人公面对困境艰苦奋斗的精神，对今天的大学生朋友仍有启迪。这是一部全景式地表现中国当代城乡社会生活的长篇小说。《平凡的 世界(套装共3册)》共三部。作者在近十年问广阔背景上，通过复杂的矛盾纠葛，刻画了社会各阶层众多普通人的形象。劳动与爱情，挫折与追求，痛苦与欢乐，日常生活与巨大社会冲突，纷繁地交织在一起，深刻地展示了普通人在大时代历史进程中所走过的艰难曲折的道路。</p>
<h3 id="摘录笔记">摘录笔记</h3><ol>
<li>生活不能等待别人来安排，要自已去争取和奋斗；而不论其结果是喜是悲，但可以慰藉的是，你总不枉在这世界上活了一场。有了这样的认识，你就会珍重生活，而不会玩世不恭；同时，也会给人自身注入一种强大的内在力量。</li>
<li>我认为，每个人都有一个觉醒期，但觉醒的早晚决定个人的命运。</li>
<li>钱当然很重要，这我不是不知道；我一天何尝不为钱而受熬苦！可是，我又觉得，人活这一辈子，还应该有些另外的什么才对……</li>
<li>生命里有着多少的无奈和惋惜,又有着怎样的愁苦和感伤?雨浸风蚀的落寞与苍楚一定是水,静静地流过青春奋斗的日子和触摸理想的岁月。</li>
<li>人和社会，一切斗争的总结局也许都是中庸而已。与其认真，不如随便，采菊东篱下，悠然见南山。有钱就寻一醉，无钱就寻一睡，与过无争，随遇而安。</li>
<li>命运总是不如人愿。但往往是在无数的痛苦中，在重重的矛盾和艰辛中，才使人成熟起来。</li>
<li>生活包含着更广阔的意义，而不在于我们实际得到了什么；关键是我们的心灵是否充实。</li>
<li>人们宁愿去关心一个蹩脚电影演员的吃喝拉撒和鸡毛蒜皮，而不愿了解一个普通人波涛汹涌的内心世界……</li>
<li>人之所以痛苦，在于追求错误的东西。如果你不给自己烦恼，别人也永远不可能给你烦恼。因为你自己的内心，你放不下。 好好的管教你自己，不要管别人。</li>
<li>一个平凡而普通的人，时时都会感到被生活的波涛巨浪所淹没。你会被淹没吗？除非你甘心就此而沉沦！！</li>
<li>人生啊，是这样不可预测，没有永恒的痛苦，也没有永恒的幸福，生活像流水一般，有时是那么平展，有时又是那么曲折。</li>
<li>是的，小时候，我们常常把“亲戚”看得多么美好和重要。一旦长大成人，开始独立生活，我们便很快知道，亲戚关系常常是庸俗的；互相设法沾光，沾不上光就翻白眼；甚至你生活中最大的困难也常常是亲戚们造成的；生活同样会告诉你，亲戚往往不如朋友对你真诚。</li>
<li>你永远要宽恕众生，不论他有多坏，甚至他伤害过你，你一定要放下，才能得到真正的快乐。</li>
<li>既要脚踏实地于现实生活，又要不时跳出现实到理想的高台上张望一眼。在精神世界里建立起一套丰满的体系，引领我们不迷失不懈怠。待我们一觉醒来，跌落在现实中的时候，可以毫无怨言地勇敢地承担起生活重担。这是孙少平教给我的道理。 只能永远把艰辛的劳动看做生命的必要，即使没有收获的指望，也心平气静地继续耕种。要做到这一点，路还好长。</li>
<li>生活不能等待别人来安排，要自已去争取和奋斗；而不论其结果是喜是悲，但可以慰藉的是，你总不枉在这世界上活了一场。</li>
<li>喜欢海，不管湛蓝或是光灿，不管平静或是波涛汹涌，那起伏荡漾的，那丝丝的波动；喜欢听海的声音，不管是浪击礁石，或是浪涛翻滚，那轻柔的，那澎湃的；喜欢看海，不管心情是舒畅的或是沉闷的，不管天气是晴朗的或是阴沉的，那舒心的，那松弛的……</li>
<li>时光静悄悄地流逝。世界上有些人因为忙而感到生活的沉重，而有些人因为闲而活得压抑。</li>
<li>生活中有那么一种人，你藐视甚至侮辱他，他不仅视为正常，还对你挺佩服；你要是在人格上对他平等相待，他反而小看你！</li>
<li>多少美好的东西消失和毁灭了，世界还像什么事也没有发生。是的，生活在继续着。可是，生活中的每一个人却在不断地失去自己最珍贵的东西。生活永远是美好的；人的痛苦却时时在发生。</li>
<li>青年，青年！无论受怎样的挫折和打击，都要咬着牙关挺住，因为你们完全有机会重建生活；只要不灰心丧气，每一次挫折就只不过是通往新境界的一块普通绊脚石，而绝不会置人于死命。</li>
<li>在一个人的思想还没有强大到自己能完全把握自己的时候，就需要在精神上依托另一个比自己更强的人。也许有一天，学生会变成自己老师的老师——这是常常会有的——但人在壮大过程中的每一个阶段，都需要求得当时比自己的认识更高明的指教。</li>
<li>爱情应该真正建立在现实生活坚实的基础上，否则，它就是在活生生的生活之树上盛开的一朵不结果实的花。</li>
<li>伟大的生命，不论以何种形式，将会在宇宙间永存。我们这个小小星球上的人类，也将继续繁衍和发展，直至遥远的未来。可是，生命对于我们来说又多么短暂。不论是谁，总有一天，都将会走向自己的终点。死亡，这是伟人和凡人共有的最后归宿。热情的诗人高唱生命的恋歌，而冷静的哲学家却说：死亡是自然法则的胜利…… 是的，如果一个人是按自然法则寿终正寝，就生命而言，死者没有什么遗憾，活着的人也不必过分地伤痛。</li>
<li>当然，普通并不等于庸俗。他也许一辈子就是一个普通人，但他要做一个不平庸的人。在许许多多平平常常的事情中，应该表现出不平常的看法和做法来。</li>
<li>年轻是一个中性词，它代表着很多缺点：缺乏经验、少不更事、容易冲动。但是也有很多优点，其中之一就是有大把的时间去遗忘那些不该记住的事情。</li>
<li>每个人的生活同样也是一个世界。即使最平凡的人，也得要为他那个世界的存在而战斗。从这个意义上说，在这些平凡的世界里，也没有一天是平静的。</li>
<li>每一分钟都有新的生命欣喜地降生到这个世界，同时也把另一些人送进坟墓。这边万里无云，阳光灿烂；那边就可能风云骤起，地裂山崩。世界没有一天是平静的。</li>
<li>我们承认伟人在历史进程中的贡献。可人类生活的大厦从本质上说，是由无数普通人的血汗乃至生命所建造的。伟人们常常企图用纪念碑或纪念堂来使自己永世流芳。真正万古长青的却是普通人的无名纪念碑——生生不息的人类生活自身。在我们短促而又漫长的一生中，我们在苦苦地寻找人生的幸福，可幸福往往又与我们失之交臂。当我们为此而耗尽宝贵的青春年华，皱纹也悄悄地爬上了眼角的时候，我们或许才能稍稍懂得生活实际上意味着什么。</li>
<li>生活啊，生活！你有多少苦难，又有多少甘甜！天空不会永远阴暗，当乌云退尽的时候，蓝天上灿烂的阳光就会照亮大地。青草照样会鲜绿无比，花朵仍然会蓬勃开放。</li>
<li>有了希望，人就会产生激情，并可以义无反顾地为之而付出代价；在这样的过程中，才能真正体会到人生的意义。什么是人生？人生就是永无休止的奋斗！只有决定了目标并在奋斗中，感到自己的努力没有虚掷，这样的生活才是充实的，精神也会永远年轻。</li>
</ol>
<h3 id="心得笔记">心得笔记</h3><p>[转] <a href="http://book.douban.com/review/1318949/" target="_blank" rel="external">对自尊的启蒙</a></p>
<p>书的开头，孙少平是个连“丙”菜都吃不起的穷困的农村学生；书的结尾，孙少平是个身有残疾的普普通通的煤矿工人。从头至尾，孙少平都没有能够脱离所谓的“社会底层”。可是时至今日，每每想起《平凡的世界》，想起孙少平这个平凡的人，这个人物身上的自尊都令我汗颜。<br>　　<br>　　初中时在读者上面看到了《早晨从中午开始》。工农兵大学生出身的父亲对这句话无限感慨，认为它概括了他们那一代人的人生轨迹。我却被这文章中记录的作者路遥创作《平凡的世界》时的各种准备工作所吸引。头一次知道，原来为了写一本长篇小说，要在一个荒郊野外独居数年；要通读十年间的报纸，记录各种事件（后来知道，这也就是所谓的“doing research”），翻阅报纸到手指被磨得露出毛细血管。这些听起来艰苦以至于荒谬的事情，对我却有着巨大的感染力。直到今天，我仍然对这种被王小波描述为“反熵过程”的，人对于某一事物不合常理的执著，有着莫名其妙的好感。<br>　　<br>　　高中时终于读了这本书。<br>　　<br>　　坦率的说，这本书有很多我不喜欢的地方：作者强加在人物身上的褒贬之辞；书中没有一段善终的感情；孙少平和田晓霞好的莫名其妙；田晓霞的死和孙少平的尿失禁；外星人；等等。甚至每一个人物的身上，都能找到不讨我喜欢的性格。<br>　　<br>　　可是这本书却最终吸引着我，也改变了我。这是因为它有个引人入胜的开头；更重要的是，它教我认识了一个平凡人的自尊。<br>　　<br>　　孙少平在物质生活上是窘迫的，在精神上是寂寞的（田晓霞只是作者的一厢情愿）——但我从来没有在生活中见到任何一个人，能够像他这样认真的对待自己的精神世界。<br>　　<br>　　这些年来，我莫名奇妙的来到一个高尚的地方，作着深奥的学问，身边充满着各种或者聪明、或者自命不凡、或者二者兼而有之的人。偶尔回到故乡的亲人中，短暂的享受着由于信息不对称而带来的莫名的崇敬和优越感，似乎自己很有成就。但一想起孙少平，就如梦醒一样惊悟到自己精神家园的荒芜和贫乏。<br>　　<br>　　我心中的孙少平，是个“讲究”人，在平凡的人生境遇中，对自己的精神世界仍一丝不苟。和他相比，那些盛气凌人的“成功人士”们却大多活得像个动物。<br>　　<br>　　儒家讲“慎独”，是在没有监督时的道德自律。而孙少平的精神追求，也是在无人欣赏的情况下的个人的选择。他的周围不是一个能够欣赏和奖励他的这种追求的环境；他也没有如许多“爱书之人”那样如孔雀般陶醉于自己的才情，展示自己的品味；他甚至不是因为专业上的纯粹的热爱而去学习。他对精神世界的一丝不苟，仅仅是因为他把自己作为一个高贵的人，来由衷地尊敬和爱戴；而不是把自己当成个动物，潦草的对待；或者当成某个社会角色：“白领”、“x总”，从这些角色中寻求比上不足、比下有余的成就感。<br>　　<br>　　这样的态度比任何话语都有力量，这样一个高贵的普通人比任何社会角色都更令人诚服。社会上流行着用一个人的社会地位来判断他的质量；我身边也不乏动辄对他人的“成就”或“品味”作褒贬之辞的朋友。我总觉得我无法与他们为伍，无法接受这样的价值，因为我见识了孙少平这样的人，我更愿意相信这样的人的存在。人可以独立于成败，独立于世俗的价值评判，独立于他人的褒贬臧否，而自己尊重自己，做个高贵的人。<br>　　<br>　　<br>　　我对自己的种种一直都不甚满意。但《平凡的世界》教给我的，是为数不多让我为自己感到骄傲的地方。《平凡的世界》是一本我愿意让我以后的孩子读的书。不是为了让我的孩子更像他爸爸（我不是古人，不觉得“不肖”有什么不好），而是希望他将来能够成为一个让我由衷钦佩的人。 </p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="书籍概要">书籍概要</h3><h5 id="书名">书名</h5><p>《平凡的世界》</p>
<h5 id="作者">作者</h5><p>路遥</p>
<h5 id="作者简介">作者简介</h5><p>路遥（1949-1992），原名王卫国，1949年12月]]>
    </summary>
    
      <category term="小说" scheme="https://wustrive2008.github.io/tags/%E5%B0%8F%E8%AF%B4/"/>
    
      <category term="平凡的世界" scheme="https://wustrive2008.github.io/tags/%E5%B9%B3%E5%87%A1%E7%9A%84%E4%B8%96%E7%95%8C/"/>
    
      <category term="电视剧" scheme="https://wustrive2008.github.io/tags/%E7%94%B5%E8%A7%86%E5%89%A7/"/>
    
      <category term="路遥" scheme="https://wustrive2008.github.io/tags/%E8%B7%AF%E9%81%A5/"/>
    
      <category term="读书笔记" scheme="https://wustrive2008.github.io/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[通过零拷贝实现有效数据传输]]></title>
    <link href="https://wustrive2008.github.io/2015/08/11/Linux/%E9%80%9A%E8%BF%87%E9%9B%B6%E6%8B%B7%E8%B4%9D%E5%AE%9E%E7%8E%B0%E6%9C%89%E6%95%88%E6%95%B0%E6%8D%AE%E4%BC%A0%E8%BE%93/"/>
    <id>https://wustrive2008.github.io/2015/08/11/Linux/通过零拷贝实现有效数据传输/</id>
    <published>2015-08-11T11:56:56.000Z</published>
    <updated>2015-08-11T13:17:20.938Z</updated>
    <content type="html"><![CDATA[<p>本文解释了如何通过一种称为零拷贝 的方法来提高运行于 Linux® 和 UNIX® 平台上的 I/O 密集型 Java™ 应用程序的性能。零拷贝不仅消除了中间缓冲区之间的冗余数据拷贝，还减少了用户空间和内核空间之间的上下文切换次数。<br><a id="more"></a></p>
<p>很多 Web 应用程序都会提供大量的静态内容，其数量多到相当于读完整个磁盘的数据再将同样的数据写回响应套接字（socket）。此动作看似只需较少的 CPU 活动，但它的效率非常低：首先内核读出全盘数据，然后将数据跨越内核用户推到应用程序，然后应用程序再次跨越内核用户将数据推回，写出到套接字。应用程序实际上在这里担当了一个不怎么高效的中介角色，将磁盘文件的数据转入套接字。<br>数据每遍历用户内核一次，就要被拷贝一次，这会消耗 CPU 周期和内存带宽。幸运的是，您可以通过一个叫 零拷贝— 很贴切 — 的技巧来消除这些拷贝。使用零拷贝的应用程序要求内核直接将数据从磁盘文件拷贝到套接字，而无需通过应用程序。零拷贝不仅大大地提高了应用程序的性能，而且还减少了内核与用户模式间的上下文切换。<br>Java 类库通过 java.nio.channels.FileChannel 中的 transferTo() 方法来在 Linux 和 UNIX 系统上支持零拷贝。可以使用 transferTo() 方法直接将字节从它被调用的通道上传输到另外一个可写字节通道上，数据无需流经应用程序。本文首先展示了通过传统拷贝语义进行的简单文件传输引发的开销，然后展示了使用 transferTo() 零拷贝技巧如何提高性能。</p>
<h3 id="数据传输：传统方法">数据传输：传统方法</h3><p>考虑一下从一个文件中读出数据并将数据传输到网络上另一程序的场景（这个场景表述出了很多服务器应用程序的行为，包括提供静态内容的 Web 应用程序、FTP 服务器、邮件服务器等）。操作的核心在清单 1 的两个调用中（参见 下载，查找完整示例代码的链接）：<br>清单 1. 把字节从文件拷贝到套接字<br><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">File.<span class="keyword">read</span>(fileDesc, buf, len);</span><br><span class="line">Socket.<span class="keyword">send</span>(<span class="keyword">socket</span>, buf, len);</span><br></pre></td></tr></table></figure></p>
<p>清单 1 的概念很简单，但实际上，拷贝的操作需要四次用户模式和内核模式间的上下文切换，而且在操作完成前数据被复制了四次。图 1 展示了数据是如何在内部从文件移动到套接字的：<br>图 1. 传统的数据拷贝方法<br><img src="http://7xifb5.com1.z0.glb.clouddn.com/wustrive-hexofigure1.gif" alt=""></p>
<p>图 2. 传统上下文切换<br><img src="http://7xifb5.com1.z0.glb.clouddn.com/wustrive-hexofigure3.gif" alt=""></p>
<p>这里涉及的步骤有：</p>
<ol>
<li>read()调用(参见图2)引发了一次从用户模式到内核模式的上下文切换在内部，发出 sys_read()（或等效内容）以从文件中读取数据。直接内存存取（direct memory access，DMA）引擎执行了第一次拷贝（参见图1），它从磁盘中读取文件内容，然后将它们存储到一个内核地址空间缓存区中。</li>
<li>所需的数据被从读取缓冲区拷贝到用户缓冲区，read() 调用返回。该调用的返回引发了内核模式到用户模式的上下文切换（又一次上下文切换）。现在数据被储存在用户地址空间缓冲区。</li>
<li>send() 套接字调用引发了从用户模式到内核模式的上下文切换。数据被第三次拷贝，并被再次放置在内核地址空间缓冲区。但是这一次放置的缓冲区不同，该缓冲区与目标套接字相关联。</li>
<li>send() 系统调用返回，结果导致了第四次的上下文切换。DMA 引擎将数据从内核缓冲区传到协议引擎，第四次拷贝独立地、异步地发生 。</li>
</ol>
<p>使用中间内核缓冲区（而不是直接将数据传输到用户缓冲区）看起来可能有点效率低下。但是之所以引入中间内核缓冲区的目的是想提高性能。在读取方面使用中间内核缓冲区，可以允许内核缓冲区在应用程序不需要内核缓冲区内的全部数据时，充当 “预读高速缓存（readahead cache）” 的角色。这在所需数据量小于内核缓冲区大小时极大地提高了性能。在写入方面的中间缓冲区则可以让写入过程异步完成。</p>
<p>不幸的是，如果所需数据量远大于内核缓冲区大小的话，这个方法本身可能成为一个性能瓶颈。数据在被最终传入到应用程序前，在磁盘、内核缓冲区和用户缓冲区中被拷贝了多次。</p>
<p>零拷贝通过消除这些冗余的数据拷贝而提高了性能。</p>
<h3 id="数据传输：零拷贝方法">数据传输：零拷贝方法</h3><p>再次检查 传统场景，您就会注意到第二次和第三次拷贝根本就是多余的。应用程序只是起到缓存数据并将其传回到套接字的作用而以，别无他用。数据可以直接从读取缓冲区传输到套接字缓冲区。transferTo() 方法就能够让您实现这个操作。清单 2 展示了 transferTo() 的方法签名：<br>清单 2. transferTo() 方法<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">transferTo</span><span class="params">(<span class="keyword">long</span> position, <span class="keyword">long</span> count, WritableByteChannel <span class="keyword">target</span>)</span></span>;</span><br></pre></td></tr></table></figure></p>
<p>transferTo() 方法将数据从文件通道传输到了给定的可写字节通道。在内部，它依赖底层操作系统对零拷贝的支持；在 UNIX 和各种 Linux 系统中，此调用被传递到 sendfile() 系统调用中，如清单 3 所示，清单 3 将数据从一个文件描述符传输到了另一个文件描述符：<br>清单 3. sendfile() 系统调用<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;sys/socket.h&gt;</span></span><br><span class="line"><span class="function">ssize_t <span class="title">sendfile</span><span class="params">(<span class="keyword">int</span> out_fd, <span class="keyword">int</span> in_fd, off_t *offset, size_t count)</span></span>;</span><br></pre></td></tr></table></figure></p>
<p>清单 1 中的 file.read() 和 socket.send() 调用动作可以替换为一个单一的 transferTo() 调用，如清单 4 所示：<br>清单 4. 使用 transferTo() 将数据从磁盘文件拷贝到套接字<br><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">transferTo</span>(<span class="attribute">position</span>, count, writableChannel);</span><br></pre></td></tr></table></figure></p>
<p>图 3. 使用 transferTo() 方法的数据拷贝<br><img src="http://7xifb5.com1.z0.glb.clouddn.com/wustrive-hexofigure3.gif" alt=""></p>
<p>图 4. 使用 transferTo() 方法的上下文切换<br><img src="http://7xifb5.com1.z0.glb.clouddn.com/wustrive-hexofigure4.gif" alt=""></p>
<p>使用 清单 4 所示的 transferTo() 方法时的步骤有：</p>
<ol>
<li>transferTo() 方法引发 DMA 引擎将文件内容拷贝到一个读取缓冲区。然后由内核将数据拷贝到与输出套接字相关联的内核缓冲区。</li>
<li>数据的第三次复制发生在 DMA 引擎将数据从内核套接字缓冲区传到协议引擎时。</li>
</ol>
<p>改进的地方：我们将上下文切换的次数从四次减少到了两次，将数据复制的次数从四次减少到了三次（其中只有一次涉及到了 CPU）。但是这个代码尚未达到我们的零拷贝要求。如果底层网络接口卡支持收集操作 的话，那么我们就可以进一步减少内核的数据复制。在 Linux 内核 2.4 及后期版本中，套接字缓冲区描述符就做了相应调整，以满足该需求。这种方法不仅可以减少多个上下文切换，还可以消除需要涉及 CPU 的重复的数据拷贝。对于用户方面，用法还是一样的，但是内部操作已经发生了改变：</p>
<ol>
<li>transferTo() 方法引发 DMA 引擎将文件内容拷贝到内核缓冲区。</li>
<li>数据未被拷贝到套接字缓冲区。取而代之的是，只有包含关于数据的位置和长度的信息的描述符被追加到了套接字缓冲区。DMA 引擎直接把数据从内核缓冲区传输到协议引擎，从而消除了剩下的最后一次 CPU 拷贝。</li>
</ol>
<p>图 5. 结合使用 transferTo() 和收集操作时的数据拷贝<br><img src="http://7xifb5.com1.z0.glb.clouddn.com/wustrive-hexofigure5.gif" alt=""></p>
<h3 id="构建一个文件服务器">构建一个文件服务器</h3><p>接下来就让我们实际应用一下零拷贝，在客户机和服务器间传输文件（参见 下载，查找示例代码）。TraditionalClient.java 和 TraditionalServer.java 是基于传统的复制语义的，它们使用了 File.read() 和 Socket.send()。TraditionalServer.java 是一个服务器程序，它在一个特定的端口上监听要连接的客户机，然后以每次 4K 字节的速度从套接字读取数据。TraditionalClient.java 连接到服务器，从文件读取 4K 字节的数据（使用 File.read()），并将内容通过套接字发送到服务器（使用 socket.send()）。<br>TransferToServer.java 和 TransferToClient.java 执行的功能与此相同，但使用 transferTo() 方法（sendfile() 系统调用）来将文件从服务器传输到客户机。</p>
<h3 id="性能比较">性能比较</h3><p>我们在一个运行 2.6 内核的 Linux 系统上执行了示例程序，并以毫秒为单位分别度量了使用传统方法和 transferTo() 方法传输不同大小的文件的运行时间。表 1 展示了度量的结果：<br>表 1. 性能对比：传统方法与零拷贝<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">文件大小    正常文件传输（ms）  transferTo（ms）</span><br><span class="line">7MB             156                     45</span><br><span class="line">21MB            337                     128</span><br><span class="line">63MB            843                     387</span><br><span class="line">98MB            1320                    617</span><br><span class="line">200MB           2124                    1150</span><br><span class="line">350MB           3631                    1762</span><br><span class="line">700MB           13498                   4422</span><br><span class="line">1GB             18399                   8537</span><br></pre></td></tr></table></figure></p>
<p>如您所见，与传统方法相比，transferTo() API 大约减少了 65% 的时间。这就极有可能提高了需要在 I/O 通道间大量拷贝数据的应用程序的性能，如 Web 服务器。</p>
<h3 id="结束语">结束语</h3><p>我们已经展示了使用 transferTo() 方法较使用传统方法 — 从一个通道读出数据并将其写入到另外一个通道 — 的性能优势。中间缓冲区拷贝 — 甚至于那些隐藏在内核内的拷贝 — 都会产生一定的开销。在需要在通道间大量拷贝数据的应用程序中，零拷贝技巧能够显著地提高性能。</p>
<p>参考：<a href="http://www.ibm.com/developerworks/cn/java/j-zerocopy/" target="_blank" rel="external">通过零拷贝实现有效数据传输</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>本文解释了如何通过一种称为零拷贝 的方法来提高运行于 Linux® 和 UNIX® 平台上的 I/O 密集型 Java™ 应用程序的性能。零拷贝不仅消除了中间缓冲区之间的冗余数据拷贝，还减少了用户空间和内核空间之间的上下文切换次数。<br>]]>
    
    </summary>
    
      <category term="Linux" scheme="https://wustrive2008.github.io/tags/Linux/"/>
    
      <category term="java" scheme="https://wustrive2008.github.io/tags/java/"/>
    
      <category term="zero copy" scheme="https://wustrive2008.github.io/tags/zero-copy/"/>
    
      <category term="零拷贝" scheme="https://wustrive2008.github.io/tags/%E9%9B%B6%E6%8B%B7%E8%B4%9D/"/>
    
      <category term="Linux" scheme="https://wustrive2008.github.io/categories/Linux/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[ArrayList和LinkedList的遍历和性能分析]]></title>
    <link href="https://wustrive2008.github.io/2015/08/11/java/ArrayList%E5%92%8CLinkedList%E7%9A%84%E9%81%8D%E5%8E%86%E5%92%8C%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90/"/>
    <id>https://wustrive2008.github.io/2015/08/11/java/ArrayList和LinkedList的遍历和性能分析/</id>
    <published>2015-08-11T11:01:15.000Z</published>
    <updated>2015-08-15T09:13:11.302Z</updated>
    <content type="html"><![CDATA[<h3 id="List的五种遍历方式">List的五种遍历方式</h3><ol>
<li><p>for each循环</p>
<figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">List</span><span class="subst">&lt;</span><span class="built_in">Integer</span><span class="subst">&gt;</span> <span class="built_in">list</span> <span class="subst">=</span> <span class="literal">new</span> ArrayList<span class="subst">&lt;</span><span class="built_in">Integer</span><span class="subst">&gt;</span>();</span><br><span class="line">for (<span class="built_in">Integer</span> j : <span class="built_in">list</span>) &#123;</span><br><span class="line">    <span class="comment">// use j</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>显示调用集合迭代器</p>
<figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">List</span>&lt;<span class="type">Integer</span>&gt; list = new <span class="type">ArrayList</span>&lt;<span class="type">Integer</span>&gt;();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">Iterator</span>&lt;<span class="type">Integer</span>&gt; <span class="keyword">iterator</span> = list.<span class="keyword">iterator</span>(); <span class="keyword">iterator</span>.hasNext();) &#123;</span><br><span class="line">    <span class="keyword">iterator</span>.next();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p> 或</p>
 <figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">List</span>&lt;<span class="type">Integer</span>&gt; list = new <span class="type">ArrayList</span>&lt;<span class="type">Integer</span>&gt;();</span><br><span class="line"><span class="type">Iterator</span>&lt;<span class="type">Integer</span>&gt; <span class="keyword">iterator</span> = list.<span class="keyword">iterator</span>();</span><br><span class="line"><span class="keyword">while</span> (<span class="keyword">iterator</span>.hasNext()) &#123;</span><br><span class="line">    <span class="keyword">iterator</span>.next();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>下标递增循环，终止条件为每次调用size()函数比较判断</p>
<figure class="highlight ocaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">List</span>&lt;<span class="type">Integer</span>&gt; <span class="built_in">list</span> = <span class="keyword">new</span> <span class="type">ArrayList</span>&lt;<span class="type">Integer</span>&gt;<span class="literal">()</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> j = <span class="number">0</span>; j &lt; <span class="built_in">list</span>.size<span class="literal">()</span>; j++) &#123;</span><br><span class="line">    <span class="built_in">list</span>.get(j);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>下标递增循环，终止条件为和等于size()的临时变量比较判断</p>
<figure class="highlight ocaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">List</span>&lt;<span class="type">Integer</span>&gt; <span class="built_in">list</span> = <span class="keyword">new</span> <span class="type">ArrayList</span>&lt;<span class="type">Integer</span>&gt;<span class="literal">()</span>;</span><br><span class="line"><span class="built_in">int</span> size = <span class="built_in">list</span>.size<span class="literal">()</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> j = <span class="number">0</span>; j &lt; size; j++) &#123;</span><br><span class="line">    <span class="built_in">list</span>.get(j);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>下标递减循环</p>
<figure class="highlight ocaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">List</span>&lt;<span class="type">Integer</span>&gt; <span class="built_in">list</span> = <span class="keyword">new</span> <span class="type">ArrayList</span>&lt;<span class="type">Integer</span>&gt;<span class="literal">()</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> j = <span class="built_in">list</span>.size<span class="literal">()</span> - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">    <span class="built_in">list</span>.get(j);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="List五种遍历方式的性能测试及对比">List五种遍历方式的性能测试及对比</h3><p>以下是性能测试代码，会输出不同数量级大小的ArrayList和LinkedList各种遍历方式所花费的时间。<br><figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br></pre></td><td class="code"><pre><span class="line">package cn.trinea.java.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.<span class="type">DecimalFormat</span>;</span><br><span class="line"><span class="keyword">import</span> java.util.<span class="type">ArrayList</span>;</span><br><span class="line"><span class="keyword">import</span> java.util.<span class="type">Calendar</span>;</span><br><span class="line"><span class="keyword">import</span> java.util.<span class="type">Iterator</span>;</span><br><span class="line"><span class="keyword">import</span> java.util.<span class="type">LinkedList</span>;</span><br><span class="line"><span class="keyword">import</span> java.util.<span class="type">List</span>;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * <span class="type">JavaLoopTest</span></span><br><span class="line"> * </span><br><span class="line"> * @author www.trinea.cn <span class="number">2013</span>-<span class="number">10</span>-<span class="number">28</span></span><br><span class="line"> */</span><br><span class="line">public class <span class="type">JavaLoopTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    public <span class="keyword">static</span> <span class="type">void</span> main(<span class="type">String</span>[] args) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">System</span>.<span class="keyword">out</span>.print(<span class="string">"compare loop performance of ArrayList"</span>);</span><br><span class="line">        loopListCompare(getArrayLists(<span class="number">10000</span>, <span class="number">100000</span>, <span class="number">1000000</span>, <span class="number">9000000</span>));</span><br><span class="line"></span><br><span class="line">        <span class="type">System</span>.<span class="keyword">out</span>.print(<span class="string">"\r\n\r\ncompare loop performance of LinkedList"</span>);</span><br><span class="line">        loopListCompare(getLinkedLists(<span class="number">100</span>, <span class="number">1000</span>, <span class="number">10000</span>, <span class="number">100000</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public <span class="keyword">static</span> <span class="type">List</span>&lt;<span class="type">Integer</span>&gt;[] getArrayLists(<span class="type">int</span>... sizeArray) &#123;</span><br><span class="line">        <span class="type">List</span>&lt;<span class="type">Integer</span>&gt;[] listArray = new <span class="type">ArrayList</span>[sizeArray.length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; listArray.length; i++) &#123;</span><br><span class="line">            <span class="type">int</span> size = sizeArray[i];</span><br><span class="line">            <span class="type">List</span>&lt;<span class="type">Integer</span>&gt; list = new <span class="type">ArrayList</span>&lt;<span class="type">Integer</span>&gt;();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; size; j++) &#123;</span><br><span class="line">                list.add(j);</span><br><span class="line">            &#125;</span><br><span class="line">            listArray[i] = list;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> listArray;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public <span class="keyword">static</span> <span class="type">List</span>&lt;<span class="type">Integer</span>&gt;[] getLinkedLists(<span class="type">int</span>... sizeArray) &#123;</span><br><span class="line">        <span class="type">List</span>&lt;<span class="type">Integer</span>&gt;[] listArray = new <span class="type">LinkedList</span>[sizeArray.length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; listArray.length; i++) &#123;</span><br><span class="line">            <span class="type">int</span> size = sizeArray[i];</span><br><span class="line">            <span class="type">List</span>&lt;<span class="type">Integer</span>&gt; list = new <span class="type">LinkedList</span>&lt;<span class="type">Integer</span>&gt;();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; size; j++) &#123;</span><br><span class="line">                list.add(j);</span><br><span class="line">            &#125;</span><br><span class="line">            listArray[i] = list;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> listArray;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public <span class="keyword">static</span> <span class="type">void</span> loopListCompare(<span class="type">List</span>&lt;<span class="type">Integer</span>&gt;... listArray) &#123;</span><br><span class="line">        printHeader(listArray);</span><br><span class="line">        long startTime, endTime;</span><br><span class="line"></span><br><span class="line">        // <span class="type">Type</span> <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; listArray.length; i++) &#123;</span><br><span class="line">            <span class="type">List</span>&lt;<span class="type">Integer</span>&gt; list = listArray[i];</span><br><span class="line">            startTime = <span class="type">Calendar</span>.getInstance().getTimeInMillis();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">Integer</span> j : list) &#123;</span><br><span class="line">                // use j</span><br><span class="line">            &#125;</span><br><span class="line">            endTime = <span class="type">Calendar</span>.getInstance().getTimeInMillis();</span><br><span class="line">            printCostTime(i, listArray.length, <span class="string">"for each"</span>, endTime - startTime);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // <span class="type">Type</span> <span class="number">2</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; listArray.length; i++) &#123;</span><br><span class="line">            <span class="type">List</span>&lt;<span class="type">Integer</span>&gt; list = listArray[i];</span><br><span class="line">            startTime = <span class="type">Calendar</span>.getInstance().getTimeInMillis();</span><br><span class="line">            // <span class="type">Iterator</span>&lt;<span class="type">Integer</span>&gt; <span class="keyword">iterator</span> = list.<span class="keyword">iterator</span>();</span><br><span class="line">            // <span class="keyword">while</span>(<span class="keyword">iterator</span>.hasNext()) &#123;</span><br><span class="line">            // <span class="keyword">iterator</span>.next();</span><br><span class="line">            // &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">Iterator</span>&lt;<span class="type">Integer</span>&gt; <span class="keyword">iterator</span> = list.<span class="keyword">iterator</span>(); <span class="keyword">iterator</span>.hasNext();) &#123;</span><br><span class="line">                <span class="keyword">iterator</span>.next();</span><br><span class="line">            &#125;</span><br><span class="line">            endTime = <span class="type">Calendar</span>.getInstance().getTimeInMillis();</span><br><span class="line">            printCostTime(i, listArray.length, <span class="string">"for iterator"</span>, endTime - startTime);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // <span class="type">Type</span> <span class="number">3</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; listArray.length; i++) &#123;</span><br><span class="line">            <span class="type">List</span>&lt;<span class="type">Integer</span>&gt; list = listArray[i];</span><br><span class="line">            startTime = <span class="type">Calendar</span>.getInstance().getTimeInMillis();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; list.size(); j++) &#123;</span><br><span class="line">                list.get(j);</span><br><span class="line">            &#125;</span><br><span class="line">            endTime = <span class="type">Calendar</span>.getInstance().getTimeInMillis();</span><br><span class="line">            printCostTime(i, listArray.length, <span class="string">"for list.size()"</span>, endTime - startTime);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // <span class="type">Type</span> <span class="number">4</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; listArray.length; i++) &#123;</span><br><span class="line">            <span class="type">List</span>&lt;<span class="type">Integer</span>&gt; list = listArray[i];</span><br><span class="line">            startTime = <span class="type">Calendar</span>.getInstance().getTimeInMillis();</span><br><span class="line">            <span class="type">int</span> size = list.size();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; size; j++) &#123;</span><br><span class="line">                list.get(j);</span><br><span class="line">            &#125;</span><br><span class="line">            endTime = <span class="type">Calendar</span>.getInstance().getTimeInMillis();</span><br><span class="line">            printCostTime(i, listArray.length, <span class="string">"for size = list.size()"</span>, endTime - startTime);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // <span class="type">Type</span> <span class="number">5</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; listArray.length; i++) &#123;</span><br><span class="line">            <span class="type">List</span>&lt;<span class="type">Integer</span>&gt; list = listArray[i];</span><br><span class="line">            startTime = <span class="type">Calendar</span>.getInstance().getTimeInMillis();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = list.size() - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">                list.get(j);</span><br><span class="line">            &#125;</span><br><span class="line">            endTime = <span class="type">Calendar</span>.getInstance().getTimeInMillis();</span><br><span class="line">            printCostTime(i, listArray.length, <span class="string">"for j--"</span>, endTime - startTime);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span>                 <span class="type">FIRST_COLUMN_LENGTH</span> = <span class="number">23</span>, <span class="type">OTHER_COLUMN_LENGTH</span> = <span class="number">12</span>, <span class="type">TOTAL_COLUMN_LENGTH</span> = <span class="number">71</span>;</span><br><span class="line">    <span class="keyword">static</span> final <span class="type">DecimalFormat</span> <span class="type">COMMA_FORMAT</span>        = new <span class="type">DecimalFormat</span>(<span class="string">"#,###"</span>);</span><br><span class="line"></span><br><span class="line">    public <span class="keyword">static</span> <span class="type">void</span> printHeader(<span class="type">List</span>&lt;<span class="type">Integer</span>&gt;... listArray) &#123;</span><br><span class="line">        printRowDivider();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; listArray.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="type">StringBuilder</span> sb = new <span class="type">StringBuilder</span>().append(<span class="string">"list size"</span>);</span><br><span class="line">                <span class="keyword">while</span> (sb.length() &lt; <span class="type">FIRST_COLUMN_LENGTH</span>) &#123;</span><br><span class="line">                    sb.append(<span class="string">" "</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="type">System</span>.<span class="keyword">out</span>.print(sb);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="type">StringBuilder</span> sb = new <span class="type">StringBuilder</span>().append(<span class="string">"| "</span>).append(<span class="type">COMMA_FORMAT</span>.format(listArray[i].size()));</span><br><span class="line">            <span class="keyword">while</span> (sb.length() &lt; <span class="type">OTHER_COLUMN_LENGTH</span>) &#123;</span><br><span class="line">                sb.append(<span class="string">" "</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">System</span>.<span class="keyword">out</span>.print(sb);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">TOTAL_COLUMN_LENGTH</span> = <span class="type">FIRST_COLUMN_LENGTH</span> + <span class="type">OTHER_COLUMN_LENGTH</span> * listArray.length;</span><br><span class="line">        printRowDivider();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public <span class="keyword">static</span> <span class="type">void</span> printRowDivider() &#123;</span><br><span class="line">        <span class="type">System</span>.<span class="keyword">out</span>.println();</span><br><span class="line">        <span class="type">StringBuilder</span> sb = new <span class="type">StringBuilder</span>();</span><br><span class="line">        <span class="keyword">while</span> (sb.length() &lt; <span class="type">TOTAL_COLUMN_LENGTH</span>) &#123;</span><br><span class="line">            sb.append(<span class="string">"-"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">System</span>.<span class="keyword">out</span>.println(sb);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public <span class="keyword">static</span> <span class="type">void</span> printCostTime(<span class="type">int</span> i, <span class="type">int</span> size, <span class="type">String</span> caseName, long costTime) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="type">StringBuilder</span> sb = new <span class="type">StringBuilder</span>().append(caseName);</span><br><span class="line">            <span class="keyword">while</span> (sb.length() &lt; <span class="type">FIRST_COLUMN_LENGTH</span>) &#123;</span><br><span class="line">                sb.append(<span class="string">" "</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">System</span>.<span class="keyword">out</span>.print(sb);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">StringBuilder</span> sb = new <span class="type">StringBuilder</span>().append(<span class="string">"| "</span>).append(costTime).append(<span class="string">" ms"</span>);</span><br><span class="line">        <span class="keyword">while</span> (sb.length() &lt; <span class="type">OTHER_COLUMN_LENGTH</span>) &#123;</span><br><span class="line">            sb.append(<span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">System</span>.<span class="keyword">out</span>.print(sb);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (i == size - <span class="number">1</span>) &#123;</span><br><span class="line">            printRowDivider();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>PS：如果运行报异常in thread “main” java.lang.OutOfMemoryError: Java heap space，请将main函数里面list size的大小减小。<br>其中getArrayLists函数会返回不同size的ArrayList，getLinkedLists函数会返回不同size的LinkedList。<br>loopListCompare函数会分别用上面的遍历方式1-5去遍历每一个list数组(包含不同大小list)中的list。<br>print开头函数为输出辅助函数。</p>
<p>测试环境为Windows7 32位系统 3.2G双核CPU 4G内存，Java 7，Eclipse -Xms512m -Xmx512m<br>最终测试结果如下：<br><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="header">compare loop performance of ArrayList</span><br><span class="line">-----------------------------------------------------------------------</span></span><br><span class="line"><span class="header">list size              | 10,000    | 100,000   | 1,000,000 | 10,000,000 </span><br><span class="line">-----------------------------------------------------------------------</span></span><br><span class="line"><span class="header">for each               | 1 ms      | 3 ms      | 14 ms     | 152 ms    </span><br><span class="line">-----------------------------------------------------------------------</span></span><br><span class="line"><span class="header">for iterator           | 0 ms      | 1 ms      | 12 ms     | 114 ms    </span><br><span class="line">-----------------------------------------------------------------------</span></span><br><span class="line"><span class="header">for list.size()        | 1 ms      | 1 ms      | 13 ms     | 128 ms    </span><br><span class="line">-----------------------------------------------------------------------</span></span><br><span class="line"><span class="header">for size = list.size() | 0 ms      | 0 ms      | 6 ms      | 62 ms     </span><br><span class="line">-----------------------------------------------------------------------</span></span><br><span class="line"><span class="header">for j--                | 0 ms      | 1 ms      | 6 ms      | 63 ms     </span><br><span class="line">-----------------------------------------------------------------------</span></span><br><span class="line"><span class="code"> </span></span><br><span class="line"><span class="header">compare loop performance of LinkedList</span><br><span class="line">-----------------------------------------------------------------------</span></span><br><span class="line"><span class="header">list size              | 100       | 1,000     | 10,000    | 100,000   </span><br><span class="line">-----------------------------------------------------------------------</span></span><br><span class="line"><span class="header">for each               | 0 ms      | 1 ms      | 1 ms      | 2 ms      </span><br><span class="line">-----------------------------------------------------------------------</span></span><br><span class="line"><span class="header">for iterator           | 0 ms      | 0 ms      | 0 ms      | 2 ms      </span><br><span class="line">-----------------------------------------------------------------------</span></span><br><span class="line"><span class="header">for list.size()        | 0 ms      | 1 ms      | 73 ms     | 7972 ms   </span><br><span class="line">-----------------------------------------------------------------------</span></span><br><span class="line"><span class="header">for size = list.size() | 0 ms      | 0 ms      | 67 ms     | 8216 ms   </span><br><span class="line">-----------------------------------------------------------------------</span></span><br><span class="line"><span class="header">for j--                | 0 ms      | 1 ms      | 67 ms     | 8277 ms   </span><br><span class="line">-----------------------------------------------------------------------</span></span><br></pre></td></tr></table></figure></p>
<p>第一张表为ArrayList对比结果，第二张表为LinkedList对比结果。<br>表横向为同一遍历方式不同大小list遍历的时间消耗，纵向为同一list不同遍历方式遍历的时间消耗。<br>PS：由于首次遍历List会稍微多耗时一点，for each的结果稍微有点偏差，将测试代码中的几个Type顺序调换会发现，for each耗时和for iterator接近。</p>
<h3 id="遍历方式性能测试结果分析">遍历方式性能测试结果分析</h3><ol>
<li><p>foreach介绍<br>foreach是Java SE5.0引入的功能很强的循环结构，for (Integer j : list)应读作for each int in list。<br>for (Integer j : list)实现几乎等价于</p>
<figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Iterator</span>&lt;<span class="type">Integer</span>&gt; <span class="keyword">iterator</span> = list.<span class="keyword">iterator</span>();</span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">iterator</span>.hasNext()) &#123;</span><br><span class="line">    <span class="type">Integer</span> j = <span class="keyword">iterator</span>.next();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>foreach代码书写简单，不必关心下标初始值和终止值及越界等，所以不易出错</p>
</li>
<li><p>ArrayList遍历方式结果分析<br>a. 在ArrayList大小为十万之前，五种遍历方式时间消耗几乎一样<br>b. 在十万以后，第四、五种遍历方式快于前三种，get方式优于Iterator方式，并且</p>
<figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">int <span class="built_in">size</span> = list.<span class="built_in">size</span>();</span><br><span class="line"><span class="keyword">for</span> (int <span class="built_in">j</span> = <span class="number">0</span>; <span class="built_in">j</span> &lt; <span class="built_in">size</span>; <span class="built_in">j</span>++) <span class="cell">&#123;</span><br><span class="line">    list.get(j);</span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure>
<p> 用临时变量size取代list.size()性能更优。我们看看ArrayList中迭代器Iterator和get方法的实现</p>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Itr</span> <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> cursor;       <span class="comment">// index of next element to return</span></span><br><span class="line">    <span class="keyword">int</span> lastRet = -<span class="number">1</span>; <span class="comment">// index of last element returned; -1 if no such</span></span><br><span class="line">    <span class="keyword">int</span> expectedModCount = modCount;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> cursor != size;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="annotation">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">    <span class="keyword">public</span> <span class="function">E <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        checkForComodification();</span><br><span class="line">        <span class="keyword">int</span> i = cursor;</span><br><span class="line">        <span class="keyword">if</span> (i &gt;= size)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line">        Object[] elementData = ArrayList.<span class="keyword">this</span>.elementData;</span><br><span class="line">        <span class="keyword">if</span> (i &gt;= elementData.length)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">        cursor = i + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> (E) elementData[lastRet = i];</span><br><span class="line">    &#125;</span><br><span class="line">    ……</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="function">E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    rangeCheck(index);</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">return</span> <span class="title">elementData</span><span class="params">(index)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p> 从中可以看出get和Iterator的next函数同样通过直接定位数据获取元素，只是多了几个判断而已。<br>c. 从上可以看出即便在千万大小的ArrayList中，几种遍历方式相差也不过50ms左右，且在常用的十万左右时间几乎相等，考虑foreach的优点，我们大可选用foreach这种简便方式进行遍历。</p>
</li>
<li><p>LinkedList遍历方式结果分析<br>a. 在LinkedList大小接近一万时，get方式和Iterator方式就已经差了差不多两个数量级，十万时Iterator方式性能已经远胜于get方式。<br>我们看看LinkedList中迭代器和get方法的实现</p>
<figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">ListItr</span> <span class="keyword">implements</span> <span class="title">ListIterator</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Node&lt;E&gt; lastReturned = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> Node&lt;E&gt; next;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> nextIndex;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> expectedModCount = modCount;</span><br><span class="line"> </span><br><span class="line">    ListItr(<span class="keyword">int</span> <span class="keyword">index</span>) &#123;</span><br><span class="line">        <span class="comment">// assert isPositionIndex(index);</span></span><br><span class="line">        next = (<span class="keyword">index</span> == size) ? <span class="keyword">null</span> : node(<span class="keyword">index</span>);</span><br><span class="line">        nextIndex = <span class="keyword">index</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">boolean</span> hasNext() &#123;</span><br><span class="line">        <span class="keyword">return</span> nextIndex &lt; size;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> E next() &#123;</span><br><span class="line">        checkForComodification();</span><br><span class="line">        <span class="keyword">if</span> (!hasNext())</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line"> </span><br><span class="line">        lastReturned = next;</span><br><span class="line">        next = next.next;</span><br><span class="line">        nextIndex++;</span><br><span class="line">        <span class="keyword">return</span> lastReturned.item;</span><br><span class="line">    &#125;</span><br><span class="line">    ……</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> E get(<span class="keyword">int</span> <span class="keyword">index</span>) &#123;</span><br><span class="line">    checkElementIndex(<span class="keyword">index</span>);</span><br><span class="line">    <span class="keyword">return</span> node(<span class="keyword">index</span>).item;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * Returns the (non-null) Node at the specified element index.</span><br><span class="line"> */</span></span><br><span class="line">Node&lt;E&gt; node(<span class="keyword">int</span> <span class="keyword">index</span>) &#123;</span><br><span class="line">    <span class="comment">// assert isElementIndex(index);</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">index</span> &lt; (size &gt;&gt; <span class="number">1</span>)) &#123;</span><br><span class="line">        Node&lt;E&gt; x = first;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">index</span>; i++)</span><br><span class="line">            x = x.next;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        Node&lt;E&gt; x = last;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = size - <span class="number">1</span>; i &gt; <span class="keyword">index</span>; i--)</span><br><span class="line">            x = x.prev;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p> 从上面代码中可以看出LinkedList迭代器的next函数只是通过next指针快速得到下一个元素并返回。而get方法会从头遍历直到index下标，查找一个元素时间复杂度为哦O(n)，遍历的时间复杂度就达到了O(n2)。<br> 所以对于LinkedList的遍历推荐使用foreach，避免使用get方式遍历。</p>
</li>
<li><p>ArrayList和LinkedList遍历方式结果对比分析<br>从上面的数量级来看，同样是foreach循环遍历，ArrayList和LinkedList时间差不多，可将本例稍作修改加大list size会发现两者基本在一个数量级上。<br>但ArrayList get函数直接定位获取的方式时间复杂度为O(1)，而LinkedList的get函数时间复杂度为O(n)。<br>再结合考虑空间消耗的话，建议首选ArrayList。对于个别插入删除非常多的可以使用LinkedList。</p>
</li>
</ol>
<h3 id="结论总结">结论总结</h3><p>通过上面的分析我们基本可以总结下：</p>
<ol>
<li>无论ArrayList还是LinkedList，遍历建议使用foreach，尤其是数据量较大时LinkedList避免使用get遍历。</li>
<li>List使用首选ArrayList。对于个别插入删除非常多的可以使用LinkedList。</li>
<li>可能在遍历List循环内部需要使用到下标，这时综合考虑下是使用foreach和自增count还是get方式。</li>
</ol>
<p>参考：<a href="http://www.trinea.cn/android/arraylist-linkedlist-loop-performance/" target="_blank" rel="external">ArrayList和LinkedList的几种循环遍历方式及性能对比分析</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="List的五种遍历方式">List的五种遍历方式</h3><ol>
<li><p>for each循环</p>
<figure class="highlight lasso"><table><tr><td class="gutter"><pre><span cla]]>
    </summary>
    
      <category term="arraylist" scheme="https://wustrive2008.github.io/tags/arraylist/"/>
    
      <category term="java" scheme="https://wustrive2008.github.io/tags/java/"/>
    
      <category term="linkedlist" scheme="https://wustrive2008.github.io/tags/linkedlist/"/>
    
      <category term="性能" scheme="https://wustrive2008.github.io/tags/%E6%80%A7%E8%83%BD/"/>
    
      <category term="java" scheme="https://wustrive2008.github.io/categories/java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[HashMap遍历方式及其性能]]></title>
    <link href="https://wustrive2008.github.io/2015/08/11/java/HashMap%E9%81%8D%E5%8E%86%E5%8F%8A%E6%80%A7%E8%83%BD/"/>
    <id>https://wustrive2008.github.io/2015/08/11/java/HashMap遍历及性能/</id>
    <published>2015-08-11T10:46:49.000Z</published>
    <updated>2015-08-15T09:13:28.589Z</updated>
    <content type="html"><![CDATA[<h3 id="HashMap的四种遍历方式">HashMap的四种遍历方式</h3><ol>
<li><p>for each map.entrySet()</p>
<figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt; <span class="built_in">map</span> = <span class="keyword">new</span> <span class="keyword">HashMap</span>&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt;();</span><br><span class="line"><span class="keyword">for</span> (Entry&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt; entry : <span class="built_in">map</span>.entrySet()) &#123;</span><br><span class="line">    entry.getKey();</span><br><span class="line">    entry.getValue();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>调用map.entrySet()的集合迭代器 </p>
<figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Iterator</span>&lt;<span class="type">Map</span>.<span class="type">Entry</span>&lt;<span class="type">String</span>, <span class="type">String</span>&gt;&gt; <span class="keyword">iterator</span> = map.entrySet().<span class="keyword">iterator</span>();</span><br><span class="line"><span class="keyword">while</span> (<span class="keyword">iterator</span>.hasNext()) &#123;</span><br><span class="line">    <span class="type">Map</span>.<span class="type">Entry</span>&lt;<span class="type">String</span>, <span class="type">String</span>&gt; entry = <span class="keyword">iterator</span>.next();</span><br><span class="line">    entry.getKey();</span><br><span class="line">    entry.getValue();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>for each map.keySet()，再调用get获取</p>
<figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt; <span class="built_in">map</span> = <span class="keyword">new</span> <span class="keyword">HashMap</span>&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt;();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">String</span> <span class="variable">key</span> : <span class="built_in">map</span>.keySet()) &#123;</span><br><span class="line">    <span class="built_in">map</span>.<span class="built_in">get</span>(<span class="variable">key</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>for each map.entrySet()，用临时变量保存map.entrySet()</p>
<figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Set</span>&lt;Entry&lt;<span class="built_in">String</span>, <span class="built_in">String</span>&gt;&gt; entrySet = map.entrySet();</span><br><span class="line"><span class="keyword">for</span> (Entry&lt;<span class="built_in">String</span>, <span class="built_in">String</span>&gt; entry : entrySet) &#123;</span><br><span class="line">    entry.getKey();</span><br><span class="line">    entry.getValue();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="HashMap四种遍历方式的性能测试及对比">HashMap四种遍历方式的性能测试及对比</h3><p>性能测试代码：<br><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.trinea.java.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.<span class="built_in">text</span>.DecimalFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Calendar;</span><br><span class="line"><span class="keyword">import</span> java.util.<span class="keyword">HashMap</span>;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Map.Entry;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * JavaLoopTest</span><br><span class="line"> * </span><br><span class="line"> * @author www.trinea.cn 2013-10-28</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> class JavaLoopTest &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="keyword">String</span>[] args) &#123;</span><br><span class="line">        System.out.<span class="built_in">print</span>(<span class="string">"compare loop performance of HashMap"</span>);</span><br><span class="line">        loopMapCompare(getHashMaps(<span class="number">10000</span>, <span class="number">100000</span>, <span class="number">1000000</span>, <span class="number">2000000</span>));</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Map&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt;[] getHashMaps(<span class="built_in">int</span>... sizeArray) &#123;</span><br><span class="line">        Map&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt;[] mapArray = <span class="keyword">new</span> <span class="keyword">HashMap</span>[sizeArray.length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; sizeArray.length; i++) &#123;</span><br><span class="line">            <span class="built_in">int</span> <span class="built_in">size</span> = sizeArray[i];</span><br><span class="line">            Map&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt; <span class="built_in">map</span> = <span class="keyword">new</span> <span class="keyword">HashMap</span>&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt;();</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> j = <span class="number">0</span>; j &lt; <span class="built_in">size</span>; j++) &#123;</span><br><span class="line">                <span class="keyword">String</span> s = Integer.toString(j);</span><br><span class="line">                <span class="built_in">map</span>.put(s, s);</span><br><span class="line">            &#125;</span><br><span class="line">            mapArray[i] = <span class="built_in">map</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> mapArray;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> loopMapCompare(Map&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt;[] mapArray) &#123;</span><br><span class="line">        printHeader(mapArray);</span><br><span class="line">        <span class="keyword">long</span> startTime, endTime;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// Type 1</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; mapArray.length; i++) &#123;</span><br><span class="line">            Map&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt; <span class="built_in">map</span> = mapArray[i];</span><br><span class="line">            startTime = Calendar.getInstance().getTimeInMillis();</span><br><span class="line">            <span class="keyword">for</span> (Entry&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt; entry : <span class="built_in">map</span>.entrySet()) &#123;</span><br><span class="line">                entry.getKey();</span><br><span class="line">                entry.getValue();</span><br><span class="line">            &#125;</span><br><span class="line">            endTime = Calendar.getInstance().getTimeInMillis();</span><br><span class="line">            printCostTime(i, mapArray.length, <span class="string">"for each entrySet"</span>, endTime - startTime);</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// Type 2</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; mapArray.length; i++) &#123;</span><br><span class="line">            Map&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt; <span class="built_in">map</span> = mapArray[i];</span><br><span class="line">            startTime = Calendar.getInstance().getTimeInMillis();</span><br><span class="line">            Iterator&lt;Map.Entry&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt;&gt; iterator = <span class="built_in">map</span>.entrySet().iterator();</span><br><span class="line">            <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">                Map.Entry&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt; entry = iterator.next();</span><br><span class="line">                entry.getKey();</span><br><span class="line">                entry.getValue();</span><br><span class="line">            &#125;</span><br><span class="line">            endTime = Calendar.getInstance().getTimeInMillis();</span><br><span class="line">            printCostTime(i, mapArray.length, <span class="string">"for iterator entrySet"</span>, endTime - startTime);</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// Type 3</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; mapArray.length; i++) &#123;</span><br><span class="line">            Map&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt; <span class="built_in">map</span> = mapArray[i];</span><br><span class="line">            startTime = Calendar.getInstance().getTimeInMillis();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">String</span> <span class="variable">key</span> : <span class="built_in">map</span>.keySet()) &#123;</span><br><span class="line">                <span class="built_in">map</span>.<span class="built_in">get</span>(<span class="variable">key</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            endTime = Calendar.getInstance().getTimeInMillis();</span><br><span class="line">            printCostTime(i, mapArray.length, <span class="string">"for each keySet"</span>, endTime - startTime);</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// Type 4</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; mapArray.length; i++) &#123;</span><br><span class="line">            Map&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt; <span class="built_in">map</span> = mapArray[i];</span><br><span class="line">            startTime = Calendar.getInstance().getTimeInMillis();</span><br><span class="line">            Set&lt;Entry&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt;&gt; entrySet = <span class="built_in">map</span>.entrySet();</span><br><span class="line">            <span class="keyword">for</span> (Entry&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt; entry : entrySet) &#123;</span><br><span class="line">                entry.getKey();</span><br><span class="line">                entry.getValue();</span><br><span class="line">            &#125;</span><br><span class="line">            endTime = Calendar.getInstance().getTimeInMillis();</span><br><span class="line">            printCostTime(i, mapArray.length, <span class="string">"for entrySet=entrySet()"</span>, endTime - startTime);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">static</span> <span class="built_in">int</span>                 FIRST_COLUMN_LENGTH = <span class="number">23</span>, OTHER_COLUMN_LENGTH = <span class="number">12</span>, TOTAL_COLUMN_LENGTH = <span class="number">71</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> DecimalFormat COMMA_FORMAT        = <span class="keyword">new</span> DecimalFormat(<span class="string">"#,###"</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> printHeader(Map... mapArray) &#123;</span><br><span class="line">        printRowDivider();</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; mapArray.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">0</span>) &#123;</span><br><span class="line">                StringBuilder sb = <span class="keyword">new</span> StringBuilder().<span class="built_in">append</span>(<span class="string">"map size"</span>);</span><br><span class="line">                <span class="keyword">while</span> (sb.length() &lt; FIRST_COLUMN_LENGTH) &#123;</span><br><span class="line">                    sb.<span class="built_in">append</span>(<span class="string">" "</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.<span class="built_in">print</span>(sb);</span><br><span class="line">            &#125;</span><br><span class="line"> </span><br><span class="line">            StringBuilder sb = <span class="keyword">new</span> StringBuilder().<span class="built_in">append</span>(<span class="string">"| "</span>).<span class="built_in">append</span>(COMMA_FORMAT.format(mapArray[i].<span class="built_in">size</span>()));</span><br><span class="line">            <span class="keyword">while</span> (sb.length() &lt; OTHER_COLUMN_LENGTH) &#123;</span><br><span class="line">                sb.<span class="built_in">append</span>(<span class="string">" "</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.<span class="built_in">print</span>(sb);</span><br><span class="line">        &#125;</span><br><span class="line">        TOTAL_COLUMN_LENGTH = FIRST_COLUMN_LENGTH + OTHER_COLUMN_LENGTH * mapArray.length;</span><br><span class="line">        printRowDivider();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> printRowDivider() &#123;</span><br><span class="line">        System.out.<span class="built_in">println</span>();</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">while</span> (sb.length() &lt; TOTAL_COLUMN_LENGTH) &#123;</span><br><span class="line">            sb.<span class="built_in">append</span>(<span class="string">"-"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.<span class="built_in">println</span>(sb);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> printCostTime(<span class="built_in">int</span> i, <span class="built_in">int</span> <span class="built_in">size</span>, <span class="keyword">String</span> caseName, <span class="keyword">long</span> costTime) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">0</span>) &#123;</span><br><span class="line">            StringBuilder sb = <span class="keyword">new</span> StringBuilder().<span class="built_in">append</span>(caseName);</span><br><span class="line">            <span class="keyword">while</span> (sb.length() &lt; FIRST_COLUMN_LENGTH) &#123;</span><br><span class="line">                sb.<span class="built_in">append</span>(<span class="string">" "</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.<span class="built_in">print</span>(sb);</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder().<span class="built_in">append</span>(<span class="string">"| "</span>).<span class="built_in">append</span>(costTime).<span class="built_in">append</span>(<span class="string">" ms"</span>);</span><br><span class="line">        <span class="keyword">while</span> (sb.length() &lt; OTHER_COLUMN_LENGTH) &#123;</span><br><span class="line">            sb.<span class="built_in">append</span>(<span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.<span class="built_in">print</span>(sb);</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">if</span> (i == <span class="built_in">size</span> - <span class="number">1</span>) &#123;</span><br><span class="line">            printRowDivider();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>PS：如果运行报异常in thread “main” java.lang.OutOfMemoryError: Java heap space，请将main函数里面map size的大小减小。<br>其中getHashMaps函数会返回不同size的HashMap。<br>loopMapCompare函数会分别用上面的遍历方式1-4去遍历每一个map数组(包含不同大小HashMap)中的HashMap。<br>print开头函数为输出辅助函数，可忽略。</p>
<p>测试环境为Windows7 32位系统 3.2G双核CPU 4G内存，Java 7，Eclipse -Xms512m -Xmx512m<br>最终测试结果如下：</p>
<figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="header">compare loop performance of HashMap</span><br><span class="line">-----------------------------------------------------------------------</span></span><br><span class="line"><span class="header">map size               | 10,000    | 100,000   | 1,000,000 | 2,000,000 </span><br><span class="line">-----------------------------------------------------------------------</span></span><br><span class="line"><span class="header">for each entrySet      | 2 ms      | 6 ms      | 36 ms     | 91 ms     </span><br><span class="line">-----------------------------------------------------------------------</span></span><br><span class="line"><span class="header">for iterator entrySet  | 0 ms      | 4 ms      | 35 ms     | 89 ms     </span><br><span class="line">-----------------------------------------------------------------------</span></span><br><span class="line"><span class="header">for each keySet        | 1 ms      | 6 ms      | 48 ms     | 126 ms    </span><br><span class="line">-----------------------------------------------------------------------</span></span><br><span class="line"><span class="header">for entrySet=entrySet()| 1 ms      | 4 ms      | 35 ms     | 92 ms     </span><br><span class="line">-----------------------------------------------------------------------</span></span><br></pre></td></tr></table></figure>
<p>表横向为同一遍历方式不同大小HashMap遍历的时间消耗，纵向为同一HashMap不同遍历方式遍历的时间消耗。<br>PS：由于首次遍历HashMap会稍微多耗时一点，for each的结果稍微有点偏差，将测试代码中的几个Type顺序调换会发现，for each entrySet耗时和for iterator entrySet接近。</p>
<h3 id="HashMap遍历方式结果分析">HashMap遍历方式结果分析</h3><p>从上面知道for each与显示调用Iterator等价，上表的结果中可以看出除了第三种方式(for each map.keySet())，再调用get获取方式外，其他三种方式性能相当。本例还是hash值散列较好的情况，若散列算法较差，第三种方式会更加耗时。<br>我们看看HashMap entrySet和keySet的源码<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">KeyIterator</span> <span class="keyword"><span class="keyword">extends</span></span> <span class="title">HashIterator&lt;K&gt;</span> &#123;</span></span><br><span class="line">    public <span class="type">K</span> next() &#123;</span><br><span class="line">        <span class="keyword">return</span> nextEntry().getKey();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">EntryIterator</span> <span class="keyword"><span class="keyword">extends</span></span> <span class="title">HashIterator&lt;Map</span>.<span class="title">Entry&lt;K</span>,<span class="title">V&gt;&gt;</span> &#123;</span></span><br><span class="line">    public <span class="type">Map</span>.<span class="type">Entry</span>&lt;<span class="type">K</span>,<span class="type">V</span>&gt; next() &#123;</span><br><span class="line">        <span class="keyword">return</span> nextEntry();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>分别是keySet()和entrySet()返回的set的迭代器，从中我们可以看到只是返回值不同而已，父类相同，所以性能相差不多。只是第三种方式多了一步根据key get得到value的操作而已。get的时间复杂度根据hash算法而异，源码如下：</p>
<figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> V <span class="built_in">get</span>(<span class="keyword">Object</span> <span class="variable">key</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">key</span> == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">return</span> getForNullKey();</span><br><span class="line">    Entry&lt;K,V&gt; entry = getEntry(<span class="variable">key</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span> == entry ? <span class="keyword">null</span> : entry.getValue();</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * Returns the entry associated with the specified key in the</span><br><span class="line"> * HashMap.  Returns null if the HashMap contains no mapping</span><br><span class="line"> * for the key.</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">final</span> Entry&lt;K,V&gt; getEntry(<span class="keyword">Object</span> <span class="variable">key</span>) &#123;</span><br><span class="line">    <span class="built_in">int</span> hash = (<span class="variable">key</span> == <span class="keyword">null</span>) ? <span class="number">0</span> : hash(<span class="variable">key</span>);</span><br><span class="line">    <span class="keyword">for</span> (Entry&lt;K,V&gt; e = table[indexFor(hash, table.length)];</span><br><span class="line">         e != <span class="keyword">null</span>;</span><br><span class="line">         e = e.next) &#123;</span><br><span class="line">        <span class="keyword">Object</span> k;</span><br><span class="line">        <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">            ((k = e.<span class="variable">key</span>) == <span class="variable">key</span> || (<span class="variable">key</span> != <span class="keyword">null</span> &amp;&amp; <span class="variable">key</span>.equals(k))))</span><br><span class="line">            <span class="keyword">return</span> e;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>get的时间复杂度取决于for循环循环次数，即hash算法。</p>
<h3 id="结论总结">结论总结</h3><p>从上面的分析来看：<br>a. HashMap的循环，如果既需要key也需要value，直接用<br><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt; <span class="built_in">map</span> = <span class="keyword">new</span> <span class="keyword">HashMap</span>&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt;();</span><br><span class="line"><span class="keyword">for</span> (Entry&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt; entry : <span class="built_in">map</span>.entrySet()) &#123;</span><br><span class="line">    entry.getKey();</span><br><span class="line">    entry.getValue();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>即可，foreach简洁易懂。</p>
<p>b. 如果只是遍历key而无需value的话，可以直接用<br><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt; <span class="built_in">map</span> = <span class="keyword">new</span> <span class="keyword">HashMap</span>&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt;();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">String</span> <span class="variable">key</span> : <span class="built_in">map</span>.keySet()) &#123;</span><br><span class="line">    <span class="comment">// key process</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>参考：<a href="http://www.trinea.cn/android/hashmap-loop-performance/" target="_blank" rel="external">HashMap循环遍历方式及其性能对比</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="HashMap的四种遍历方式">HashMap的四种遍历方式</h3><ol>
<li><p>for each map.entrySet()</p>
<figure class="highlight processing"><table><tr><td class]]>
    </summary>
    
      <category term="hashmap" scheme="https://wustrive2008.github.io/tags/hashmap/"/>
    
      <category term="java" scheme="https://wustrive2008.github.io/tags/java/"/>
    
      <category term="性能" scheme="https://wustrive2008.github.io/tags/%E6%80%A7%E8%83%BD/"/>
    
      <category term="java" scheme="https://wustrive2008.github.io/categories/java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[心理罪]]></title>
    <link href="https://wustrive2008.github.io/2015/08/09/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E5%BF%83%E7%90%86%E7%BD%AA/"/>
    <id>https://wustrive2008.github.io/2015/08/09/读书笔记/读书笔记-心理罪/</id>
    <published>2015-08-09T10:31:04.000Z</published>
    <updated>2015-08-15T09:15:15.329Z</updated>
    <content type="html"><![CDATA[<h3 id="书籍概要">书籍概要</h3><h5 id="书名">书名</h5><p>心理罪</p>
<h5 id="作者">作者</h5><p>雷米 </p>
<h5 id="作者简介">作者简介</h5><p>雷米，以心理罪系列小说闻名于世，粉丝无数，读者言必称其“老师”。</p>
<h5 id="阅读方式">阅读方式</h5><p>听书</p>
<h5 id="阅读日期">阅读日期</h5><p>2015.7</p>
<h3 id="书籍简介">书籍简介</h3><p>一个喜欢把牛奶和人血搅拌在一起喝下去的杀手，他是有特殊的疾病还是传说中千年不死的吸血鬼？<br>C市连续发生四起强奸杀人案，被害人都是25至30岁之间的白领，这到底是报复杀人还是简单的劫色？<br>一个品学兼优的研究生，却忽然之间发疯似的攻击自己的同窗好友，他是被人催眠还是蓄谋已久杀人灭口……<br>在一系列让警方感到扑朔迷离的案件中，沉默寡言的大学生方木突然被警方扯入其中，而他又凭什么随口就说出了逍遥法外的凶手的真正面目？<br>当凶手被执行枪决之后，为什么又发生了更加残忍变态的连环血案？<br>是凶手邪恶的幽灵继续作祟还是另有更加可怕的人魔？当这个看不见的魔鬼肆无忌惮地夺去方木身边一个又一个朋友的生命，方木又将如何面对这公然的挑衅？他能否在最后关头“画”出魔鬼的样子……</p>
<h3 id="摘录笔记">摘录笔记</h3><ol>
<li>走进阳光里，真实的笑，放肆的哭</li>
<li>与怪兽搏斗的人要谨防自己因此而变成怪兽。如果阁下长时间的盯着深渊，那么，深渊也会同样回望着阁下。</li>
<li>对有些人而言，相遇即是告别。就像流星 划过天际，发出耀眼光芒的同时，也燃烧 殆尽。他们唯一能做的，就是让那道划痕 尽可能地浅。</li>
<li>终于，又是我一个人了。也许，从来就只是我一个人。</li>
<li>我不想再在过去而挣扎， 我不想再为过去而苦郁， 我不想再为思念而孤单。</li>
<li>生活在这个城市中的人，在其或漫长或短暂的生命中，多少都受过他人的恶行相待。其中相当一部分恶行，仅能通过道德加以苛责。彼时彼地，法律显得既苍白又无力。我们也许会同情，会愤怒，但不会想到去击杀那些原本与我们无关的作恶者。别人的苦难，终究是别人的，我们的克制，多半源自于不曾感同身受。然而，一旦有人这么做了，我们的内心却难免会感到快慰。民众如是，警察亦如是。</li>
<li>每个人都被不同的记忆所束缚，你会发现，所有的记忆都会一次次地重现，其实，根本就逃避不了</li>
<li>天使在地狱诞生</li>
<li>刀，始终是刀。为什么要让它承载这么多东西呢？懂得承载的，只是我们自己而已。</li>
<li>宽容博大的城市，你目睹了多少罪恶在地底暗暗滋生？善良无知的人们，为什么对与己无关的事情选择麻木不仁？你们不知道，当静静的暗河从地下喷涌而出时，就是日月陨落，黑暗永驻的时刻！</li>
<li>幸福的憧憬似乎总是遥不可及，而不祥的预兆却总是随后就敲响你的房门。</li>
<li>我就是我，我也可以不是我，干掉那个“我”字，才是真正的我。</li>
<li>要想成为天才中的天才，就必须杀死你心中的善良。记住，大恶即大善，大善即大恶，天使一定要从地狱里诞生，要想杀掉恶魔，就必须成为恶魔，要成为比他更强大、更残忍的恶魔。</li>
<li>如果关怀不能医治创伤，就用痛苦根治它。</li>
<li>死亡是对活人最大的考验。</li>
<li>很多事情，说它重要，只是因为我们赋予了它特殊的意义与感情。</li>
<li>你与恶龙缠斗过久，终究会变成另一条恶龙；你凝视深渊，深渊也将回望你。</li>
<li>只是他们不知道，这一抱，无关爱情，甚至无关友情，只是为了从此两不相忘。</li>
</ol>
<h3 id="心得笔记">心得笔记</h3><p>[转]<br>一个初中就读过福尔摩斯所有正盗版著作，把阿加莎·克里斯蒂奉为终生偶像，坚决不看金田一，做梦都会喊出江户川乱步的推理小说的骨灰级读者，如果他突然在午夜给我打电话向我推荐一本犯罪推理小说，你说我该怎么办？<br>　　<br>　　更重要的是她是一个女生，一个漂亮的女生。<br>　　<br>　　她是我初中暗恋的对象，我曾经用一年的时间做周密计划准备强奸她，最后在实施的那天因为她叫我去打羽毛球我觉得主意不错就去了，最后打得很累再也没有力气强奸她而懊悔一生。现在她突然在午夜给我打电话用一种我听了又想犯罪的口气向我推荐一本犯罪推理小说，你说我该怎么办？<br>　　<br>　　几天之后，这本幽蓝色封面的犯罪推理小说被一个我看见了长什么样子但马上又忘掉了长什么样子的快递人员放到我的桌上。我怀着看了这本小说就可以强奸推荐我看这本小说的女孩的想法，翻开了这本书……<br>　　<br>　　这本小说主要写了一个喜欢把牛奶和人血搅拌在一起喝下去的变态，他强奸了很多人，杀了很多人，几乎每次用的手法都不一样。警方面对这个变态，就像傻比一样没有任何办法。后来一个大学生参合进来，随口就说出了变态长什么样子。变态马上被抓，立地枪决。大家以为事情结束了，都松了一口气。可是就在这个时候，又有很多人被强奸了，很多人被杀。似乎有一个更大的变态出现了，这个变态把那个装比的大学生身边的朋友一个一个都杀死了，他最后要杀的就是那个装比的大学生。而那个装比的大学生唯一所能做的就是在自己被杀死之前再次说出这个变态的样子。<br>　　<br>　　故事的大意就是这样了。<br>　　<br>　　我认真地想了想，这应该是我近十年来看过的最好看的犯罪推理小说了。从小我就爱看有关变态的故事。无论是《沉默的羔羊》中的变态医生，还是《空中监狱》中的变态杀人魔，在我眼里他们都是这个世界上最可爱的人。而现在这个世界上又凭空多了一个可供我们神交的超级变态。他面对这个世界的方法，他对这个世界的理解都是那么的与众不同。他们的存在衬托出我们的平庸，我们的存在衬托出他们的天才。比把小女孩的脑袋割下来做成帽子戴在头上更变态的情节已经在这本书中出现。它们注定会被人们永远地铭记，成为人类变态史上最经典的一幕。<br>　　<br>　　看过之后，我很激动。表现就是，我一口气给一百多个人打电话推荐这本书。告诉他们赶紧把手里的柯南、福尔摩斯都扔掉！那都是垃圾，已经过时了！一本更好看更酷的犯罪推理小说已经横空出世。<br>　　<br>　　这个叫雷米的作家我第一次听说，不知道他在哪里。我对他的景仰如滔滔江水连绵不绝。我甚至觉得如果在强奸漂亮女生和强奸作者雷米之间做选择，我很有可能选择强奸作者雷米来表达我对这本书的喜爱。<br>　　<br>　　一边强奸他，一边问他，你为什么要把小说写得这么好？<br>　　<br>　　如果你已经接到我的电话，又恰巧你喜欢犯罪推理小说，那就看看吧。如果你没有接到我的电话，但恰巧你也喜欢犯罪推理小说，那你也看看吧。如果你非要接到我的电话再看，那就把你的电话号告诉我，然后我给你打电话。不过我要提醒你们，千万不要以为看完这本书就可以强奸向你们推荐这本小说的我。我到现在还没有摸过向我推荐这本小说的女生的手。 </p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="书籍概要">书籍概要</h3><h5 id="书名">书名</h5><p>心理罪</p>
<h5 id="作者">作者</h5><p>雷米 </p>
<h5 id="作者简介">作者简介</h5><p>雷米，以心理罪系列小说闻名于世，粉丝无数，读者言必称其“老师”]]>
    </summary>
    
      <category term="心理画像" scheme="https://wustrive2008.github.io/tags/%E5%BF%83%E7%90%86%E7%94%BB%E5%83%8F/"/>
    
      <category term="心理罪" scheme="https://wustrive2008.github.io/tags/%E5%BF%83%E7%90%86%E7%BD%AA/"/>
    
      <category term="读书笔记" scheme="https://wustrive2008.github.io/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[http协议基础之URL]]></title>
    <link href="https://wustrive2008.github.io/2015/08/09/http%E5%8D%8F%E8%AE%AE/http%E5%8D%8F%E8%AE%AE%E5%9F%BA%E7%A1%80%E4%B9%8BURL/"/>
    <id>https://wustrive2008.github.io/2015/08/09/http协议/http协议基础之URL/</id>
    <published>2015-08-09T08:18:33.000Z</published>
    <updated>2015-08-26T16:38:13.736Z</updated>
    <content type="html"><![CDATA[<h2 id="http协议之URL">http协议之URL</h2><h3 id="URI(Uniform_Resource_Identifier)_统一资源标识符">URI(Uniform Resource Identifier) 统一资源标识符</h3><p>URI就像因特网上的邮政地址一样，在世界范围内唯一标识并定位信息资源。</p>
<h3 id="URL_统一资源定位符">URL 统一资源定位符</h3><p>是资源标识符的最常见形式，是URI的一个子集(另一个是URN)。URL描述了一台特定服务器上某资源的特定位置。它们可以说明如何从一个精确、固定的位置获取资源。</p>
<h4 id="URL遵循的标准格式">URL遵循的标准格式</h4><ol>
<li>URL的第一部分被称为方案(scheme)，说明了访问资源所使用的协议类型。如http://</li>
<li>第二部分给出了服务器的因特网地址</li>
<li>其余部分制定了Web服务器上的某个资源</li>
</ol>
<p><strong>现在几乎所有的URI都是URL</strong></p>
<h4 id="URL语法">URL语法</h4><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;scheme&gt;<span class="symbol">://&lt;user&gt;</span><span class="symbol">:&lt;password&gt;</span>@&lt;host&gt;<span class="symbol">:&lt;port&gt;/&lt;path&gt;</span>;&lt;params&gt;?&lt;query&gt;<span class="comment">#&lt;flag&gt;</span></span><br></pre></td></tr></table></figure>
<ol>
<li>方案：使用的协议，不区分大小写</li>
<li>用户：访问某些资源需要用户名</li>
<li>密码：用户对应的密码 中间用:分割</li>
<li>主机：服务器的主机名或IP地址</li>
<li>端口：服务器正在监听的端口号</li>
<li>路径：服务器资源的本地名，路径组件的语法是与服务器和方案有关</li>
<li>参数：某些方案会用这个组件来指定输入参数。参数为名/值对。URL中可以包含多个参数字段</li>
<li>查询：传递的参数，用”?”将其与URL的其余部分分隔开</li>
<li>片段：一小片或一部分资源的名字，这个字段是在客户端内部使用的，通过字符”#”与URL其他部分分隔开来</li>
</ol>
<h5 id="用户名和密码">用户名和密码</h5><p>很多服务器都要求输入用户名和密码才允许用户访问资源。常见的有FTP服务器。<br>例如：<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">ftp:</span><span class="comment">//192.168.1.2</span></span><br><span class="line"><span class="string">ftp:</span><span class="comment">//anonymous@192.168.1.2</span></span><br><span class="line"><span class="string">ftp:</span><span class="comment">//anonymous:my_pwd@192.168.1.2</span></span><br></pre></td></tr></table></figure></p>
<h5 id="参数">参数</h5><p>为了向应用程序提供它们所需的输入参数，以便正确地与服务器进行交互，URL中有一个参数组件。这个就是URL中的名值对列表，由字符”;”与其他部分分隔。<br>如：<br><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ftp://<span class="number">192.168</span>.<span class="number">1.2</span>;<span class="variable">type=</span>d</span><br><span class="line">http://<span class="number">192.168</span>.<span class="number">1.2</span>/index.html;<span class="variable">sale=</span><span class="constant">false</span>/login.html;<span class="variable">id=</span><span class="constant">true</span></span><br></pre></td></tr></table></figure></p>
<h5 id="查询字符串">查询字符串</h5><p>很多资源都可以通过提问题或者查询来缩小所请求资源类型的范围。<br>如：<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">http:</span><span class="comment">//192.168.1.2/login.html?user=zhangsan&amp;password=123456</span></span><br></pre></td></tr></table></figure></p>
<p><strong>经常使用的http get请求传递的参数就是查询字符串</strong></p>
<h5 id="片段">片段</h5><p>有些资源，比如html，除了资源级之外，还可以进一步划分。比如，对一个带有章节的大型文本文档来说，资源的URL会指向整个文档，但有时我们希望能够指定资源中的某些章节。<br>片段组件用来表示一个资源内部的片段。如一个特定的图片或小节<br>片段挂在URL的右边，前面用一个”#”与其他部分分隔。</p>
<p><strong>HTTP服务器通常只处理整个对象，而不是对象的片段，客户端不能将片段传给服务器，浏览器从服务器获取整个资源后，会根据片段来显示部分资源。</strong></p>
<h4 id="URL快捷方式">URL快捷方式</h4><p>URL有两种方式：绝对URL和相对URL，相对URL只是URL的片段或一部分。处理URL的程序(如浏览器)能够在相对和绝对URL之间进行转换。相对URL有利于资源的迁移，因为相对URL都是相对于新基础进行解释的。这样可以实现在其他服务器上提供镜像内容之类的功能。</p>
<h5 id="基础URL">基础URL</h5><p>转换处理的第一步就是找到基础URL。基础URL是作为相对URL的参考点使用的。有以下几种方式：</p>
<ol>
<li>在资源中显示提供 如html中的<base>标签</li>
<li>封装资源的基础URL 如果在一个没有显示指定基础URL的资源中发现一个相对URL，可以将它所属资源的URL作为基础</li>
</ol>
<h5 id="自动扩展URL">自动扩展URL</h5><p>浏览器一般都提供自动扩展URL的功能<br>主要的扩展方式：</p>
<ol>
<li>主机名扩展 如在浏览器中输入 google.com ,浏览器会自动扩展为<a href="http://google.com" target="_blank" rel="external">http://google.com</a></li>
<li>历史扩展 对浏览器历史记录进行匹配查询</li>
</ol>
<h4 id="URL编码">URL编码</h4><p>使用一种”转义”表示法来表示各种不安全的字符(保留及受限字符)。<br>如：~ 空格 %等</p>
<h4 id="常见的URL方案(协议)">常见的URL方案(协议)</h4><ol>
<li>http 超文本传输协议 默认端口80</li>
<li>https 加密的http，使用SSL进行安全加密 默认端口443</li>
<li>mailto 指向Email地址，如mailto:wustrive2008@gmail.com</li>
<li>ftp  文件传输协议，用来从ftp服务器上传或下载文件</li>
<li>rtsp,rtspu   通过实时流传输协议解析音/视频媒体资源的标识符</li>
<li>file  从一台共享主机上直接访问文件</li>
<li>news 用来访问一些特定的文章或新闻组</li>
<li>telnet   用户访问交互式业务</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="http协议之URL">http协议之URL</h2><h3 id="URI(Uniform_Resource_Identifier)_统一资源标识符">URI(Uniform Resource Identifier) 统一资源标识符</h3><p>URI就像因特]]>
    </summary>
    
      <category term="http" scheme="https://wustrive2008.github.io/tags/http/"/>
    
      <category term="url" scheme="https://wustrive2008.github.io/tags/url/"/>
    
      <category term="协议" scheme="https://wustrive2008.github.io/tags/%E5%8D%8F%E8%AE%AE/"/>
    
      <category term="http协议" scheme="https://wustrive2008.github.io/categories/http%E5%8D%8F%E8%AE%AE/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[centos搭建本地yum服务器]]></title>
    <link href="https://wustrive2008.github.io/2015/07/26/Linux/centos%E6%90%AD%E5%BB%BA%E6%9C%AC%E5%9C%B0yum%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>https://wustrive2008.github.io/2015/07/26/Linux/centos搭建本地yum服务器/</id>
    <published>2015-07-26T13:02:51.000Z</published>
    <updated>2015-07-26T14:08:17.401Z</updated>
    <content type="html"><![CDATA[<p>YUM是Yellow dog Updater, Modified的缩写，是由Duke University所发起的计划，目的就是为了解决RPM的依赖关系的问题，方便使用者进行软件的安装、升级等等工作。在此在特别说明的是，YUM只是为了解决RPM的依赖关系的问题，而不是一种其它的软件安装模式。</p>
<p>虽然在centos中可以直接使用yum源，但是也存在着与外网隔绝的现状，因此需要搭建本地yum源  </p>
<p>系统：centos 6.5  </p>
<p>1、将光盘挂载到/mnt下面<br><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor"># mount /dev/cdrom /mnt</span></span><br></pre></td></tr></table></figure></p>
<p>2、删除系统自带的repo文件<br><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor"># cd /etc/yum.repos.d/  </span></span><br><span class="line"><span class="preprocessor"># mkdir bak  </span></span><br><span class="line"><span class="preprocessor"># mv *.repo bak</span></span><br></pre></td></tr></table></figure></p>
<p>3、安装createrepo（其实只要安装createrepo即可以，但是需要其他依赖包，所以也得一起装上）<br><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor"># cd /mnt/Packages/  </span></span><br><span class="line"><span class="preprocessor"># rpm -ivh libxml2-python-2.7.6-14.el6.x86_64.rpm   </span></span><br><span class="line"><span class="preprocessor"># rpm -ivh deltarpm-3.5-0.5.20090913git.el6.x86_64.rpm   </span></span><br><span class="line"><span class="preprocessor"># rpm -ivh python-deltarpm-3.5-0.5.20090913git.el6.x86_64.rpm   </span></span><br><span class="line"><span class="preprocessor"># rpm -ivh createrepo-0.9.9-18.el6.noarch.rpm</span></span><br></pre></td></tr></table></figure></p>
<p>4、使用createrepo命令创建yum仓库，创建索引信息<br>注：这里我们把yum仓库建立在/doiido/local<br><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor"># mkdir /doiido/local  </span></span><br><span class="line"><span class="preprocessor"># cp -rv /mnt/Packages/* /doiido/local  </span></span><br><span class="line"><span class="preprocessor"># cd /doiido/local  </span></span><br><span class="line"><span class="preprocessor"># createrepo -v /doiido/local</span></span><br></pre></td></tr></table></figure></p>
<p>5、如若需要分组信息<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># cp <span class="regexp">/mnt/</span>repodata<span class="regexp">/b4e0b9342ef85d3059ff095fa7f140f654c2cb492837de689a58c581207d9632-c6-x86_64-comps.xml /</span>doiido<span class="regexp">/local/</span>comps.xml  </span><br><span class="line"># createrepo -g <span class="regexp">/doiido/</span>local<span class="regexp">/comps.xml /</span>doiido<span class="regexp">/local</span></span><br></pre></td></tr></table></figure></p>
<p>6、编辑自己的repo文件<br><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor"># vi /etc/yum.repos.d/local.repo  </span></span><br><span class="line"><span class="preprocessor">#库名称  </span></span><br><span class="line">[local_server]  </span><br><span class="line">  </span><br><span class="line"><span class="preprocessor">#名称描述  </span></span><br><span class="line">name=Thisis a local repo  </span><br><span class="line">  </span><br><span class="line"><span class="preprocessor">#yum源目录  </span></span><br><span class="line">baseurl=file:<span class="comment">///doiido/local  </span></span><br><span class="line">  </span><br><span class="line"><span class="preprocessor">#是否启用该yum源，0为禁用  </span></span><br><span class="line">enabled=<span class="number">1</span>  </span><br><span class="line">  </span><br><span class="line"><span class="preprocessor">#检查GPG-KEY（0为不检查，1为检查）  </span></span><br><span class="line">gpgcheck=<span class="number">0</span></span><br></pre></td></tr></table></figure></p>
<p>7、加载yum缓存<br><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor"># yum clean all  </span></span><br><span class="line"><span class="preprocessor"># yum makecache</span></span><br></pre></td></tr></table></figure></p>
<p>8、测试下载<br><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor"># yum -y install php</span></span><br></pre></td></tr></table></figure></p>
<p>这里就可以看到可以直接安装php，而不需要通过网上去下载。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>YUM是Yellow dog Updater, Modified的缩写，是由Duke University所发起的计划，目的就是为了解决RPM的依赖关系的问题，方便使用者进行软件的安装、升级等等工作。在此在特别说明的是，YUM只是为了解决RPM的依赖关系的问题，而不是一种其]]>
    </summary>
    
      <category term="Centos" scheme="https://wustrive2008.github.io/tags/Centos/"/>
    
      <category term="Linux" scheme="https://wustrive2008.github.io/tags/Linux/"/>
    
      <category term="yum" scheme="https://wustrive2008.github.io/tags/yum/"/>
    
      <category term="软件" scheme="https://wustrive2008.github.io/tags/%E8%BD%AF%E4%BB%B6/"/>
    
      <category term="Linux" scheme="https://wustrive2008.github.io/categories/Linux/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[CentOS6.5下samba服务器搭建与配置]]></title>
    <link href="https://wustrive2008.github.io/2015/07/26/Linux/CentOS6.5%E4%B8%8Bsamba%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA%E4%B8%8E%E9%85%8D%E7%BD%AE/"/>
    <id>https://wustrive2008.github.io/2015/07/26/Linux/CentOS6.5下samba服务器搭建与配置/</id>
    <published>2015-07-26T12:52:19.000Z</published>
    <updated>2015-07-26T14:00:21.212Z</updated>
    <content type="html"><![CDATA[<h3 id="一、samba服务器的安装与配置">一、samba服务器的安装与配置</h3><ol>
<li><p>samba服务器所需的软件包：</p>
<p> [root@localhost ~]# yum -y install samba samba-common samba-client </p>
</li>
<li><p>samba服务器的主配置文件</p>
<p> [root@localhost ~]# vim /etc/samba/smb.conf </p>
 <figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line">[global]</span><br><span class="line"></span><br><span class="line"><span class="comment"># ----------------------- Network Related Options -------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="variable">workgroup =</span> MYGROUP 工作组名称，可随便写</span><br><span class="line"></span><br><span class="line">server <span class="variable">string =</span> MY Samba Server Version %v 服务器描述，可随便写</span><br><span class="line"></span><br><span class="line">; netbios <span class="variable">name =</span> MYSERVER</span><br><span class="line"></span><br><span class="line">; <span class="variable">interfaces =</span> lo eth0 <span class="number">192.168</span>.<span class="number">12.2</span>/<span class="number">24</span> <span class="number">192.168</span>.<span class="number">13.2</span>/<span class="number">24</span> 这两条相当于samba服务器特有 的防火墙机制</span><br><span class="line"></span><br><span class="line">; hosts <span class="variable">allow =</span> <span class="number">127</span>. <span class="number">192.168</span>.<span class="number">12</span>. <span class="number">192.168</span>.<span class="number">13</span>.</span><br><span class="line"></span><br><span class="line"><span class="comment"># --------------------------- Logging Options -----------------------------</span></span><br><span class="line"></span><br><span class="line">log <span class="variable">file =</span> /var/log/samba/log.%m samba的日志文件及命名格式</span><br><span class="line"></span><br><span class="line"><span class="comment"># max 50KB per log file, then rotate</span></span><br><span class="line"></span><br><span class="line">max log <span class="variable">size =</span> <span class="number">50</span> 最大日志存储量</span><br><span class="line"></span><br><span class="line"><span class="comment"># ----------------------- Standalone Server Options ------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="variable">security =</span> user 访问samba的用户级别（share/user/domain）</span><br><span class="line"></span><br><span class="line">passdb <span class="variable">backend =</span> tdbsam</span><br><span class="line"></span><br><span class="line"><span class="comment"># --------------------------- Printing Options -----------------------------</span></span><br><span class="line"></span><br><span class="line">load <span class="variable">printers =</span> no 是否启用打印机功能，默认为yes</span><br><span class="line"></span><br><span class="line">cups <span class="variable">options =</span> raw</span><br><span class="line"></span><br><span class="line">; printcap <span class="variable">name =</span> /etc/printcap</span><br><span class="line"></span><br><span class="line"><span class="comment">#obtain list of printers automatically on SystemV</span></span><br><span class="line"></span><br><span class="line">; printcap <span class="variable">name =</span> lpstat</span><br><span class="line"></span><br><span class="line">; <span class="variable">printing =</span> cups</span><br><span class="line"></span><br><span class="line"><span class="comment"># --------------------------- Filesystem Options ---------------------------</span></span><br><span class="line"></span><br><span class="line">[homes] 在客户端显示的共享目录名称</span><br><span class="line"></span><br><span class="line"><span class="variable">comment =</span> homes directory 此共享目录描述</span><br><span class="line"></span><br><span class="line"><span class="variable">browseable =</span> no 不在客户端显示共享目录（即不显示[homes]）</span><br><span class="line"></span><br><span class="line"><span class="variable">writable =</span> no 不可写</span><br><span class="line"></span><br><span class="line">read <span class="variable">only=</span>yes 可读取</span><br><span class="line"></span><br><span class="line">create <span class="variable">mode =</span> <span class="number">0664</span> samba用户在自己家目录（默认/home/sambauser）下新建 文件的默认权限为<span class="number">0644</span>（<span class="number">0</span>为acl权限）</span><br><span class="line"></span><br><span class="line">directory <span class="variable">mode =</span> <span class="number">0775</span> samba用户在自己家目录（默认/home/sambauser）下新建 目录的默认权限为<span class="number">0775</span>（<span class="number">0</span>为acl权限）</span><br><span class="line"></span><br><span class="line">[printers] 打印功能共享目录</span><br><span class="line"></span><br><span class="line"><span class="variable">comment =</span> All Printers</span><br><span class="line"></span><br><span class="line"><span class="variable">path =</span> /var/spool/samba</span><br><span class="line"></span><br><span class="line"><span class="variable">browseable =</span> no</span><br><span class="line"></span><br><span class="line">guest <span class="variable">ok =</span> no</span><br><span class="line"></span><br><span class="line"><span class="variable">writable =</span> no</span><br><span class="line"></span><br><span class="line"><span class="variable">printable =</span> yes</span><br><span class="line"></span><br><span class="line"><span class="comment"># ---------------------------- user public options -------------------------</span></span><br><span class="line"></span><br><span class="line">[wxwsmb] 服务器共享目录名称</span><br><span class="line"></span><br><span class="line"><span class="variable">comment =</span> user public directory</span><br><span class="line"></span><br><span class="line"><span class="variable">path=</span>/tmp/public 实际的共享目录绝对路径</span><br><span class="line"></span><br><span class="line"><span class="variable">browseable =</span> yes</span><br><span class="line"></span><br><span class="line"><span class="variable">writable =</span> yes</span><br><span class="line"></span><br><span class="line">read <span class="variable">only=</span> yes</span><br><span class="line"></span><br><span class="line"><span class="variable">public=</span> yes 可以共享</span><br><span class="line"></span><br><span class="line">write <span class="variable">list=</span>@wxwsmb 可以共享此目录的samba用户组</span><br></pre></td></tr></table></figure>
</li>
<li><p>启动/重启服务</p>
<p> [root@localhost ~]# service smb restart</p>
<p> 关闭 SMB 服务： [确定]</p>
<p> 启动 SMB 服务： [确定]</p>
<p> [root@localhost ~]# service nmb restart</p>
<p> 关闭 NMB 服务： [确定]</p>
<p> 启动 NMB 服务： [确定]</p>
</li>
<li><p>查看状态</p>
<p> [root@localhost ~]# netstat -ltunp | grep smb 查看网络端口的监控状态</p>
<p> tcp 0 0 0.0.0.0:139 0.0.0.0:* LISTEN 1507/smbd</p>
<p> tcp 0 0 0.0.0.0:445 0.0.0.0:* LISTEN 1507/smbd</p>
<p> tcp 0 0 :::139 :::* LISTEN 1507/smbd</p>
<p> tcp 0 0 :::445 :::* LISTEN 1507/smbd</p>
</li>
</ol>
<h3 id="二、创建samba用户">二、创建samba用户</h3><p>[root@localhost ~]# groupadd wxwsmb</p>
<p>[root@localhost ~]# useradd -g wxwsmb smb2</p>
<p>[root@localhost ~]# pdbedit -a -u smb2 创建samba用户</p>
<p>new password:</p>
<p>retype new password:</p>
<p>Unix username: smb2</p>
<p>NT username:</p>
<p>Account Flags: [U ]</p>
<p>User SID: S-1-5-21-1442997883-3833565404-3457035396-1002</p>
<p>Primary Group SID: S-1-5-21-1442997883-3833565404-3457035396-513</p>
<h3 id="三、测试（服务器ip地址为192-168-1-24）">三、测试（服务器ip地址为192.168.1.24）</h3><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">[root@localhost ~]# smbclient -<span class="keyword">L</span> <span class="comment">//192.168.1.24 -U smb2</span></span><br><span class="line"></span><br><span class="line">Enter smb2's password:</span><br><span class="line"></span><br><span class="line">Domain=[MYGROUP] OS=[Unix] Server=[Samba 3.6.9-164.el6]</span><br><span class="line"></span><br><span class="line">Sharename <span class="keyword">Type</span> Comment</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">wxwsmb Disk user public directory</span><br><span class="line"></span><br><span class="line">IPC$ IPC IPC Service (MY Samba Server <span class="keyword">Version</span> 3.6.9-164.el6)</span><br><span class="line"></span><br><span class="line">smb2 Disk homes directory</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@localhost ~]# mount -t cifs <span class="comment">//192.168.1.24/smb2 /mnt -o username=smb2</span></span><br><span class="line"></span><br><span class="line">Password: 输入设定的samba用户密码</span><br><span class="line"></span><br><span class="line">[root@localhost ~]# df -<span class="literal">h</span></span><br><span class="line"></span><br><span class="line">Filesystem Size Used Avail <span class="keyword">Use</span>% Mounted <span class="keyword">on</span></span><br><span class="line"></span><br><span class="line">/dev/sda2 49G 5.8G 40G 13% /</span><br><span class="line"></span><br><span class="line">tmpfs 398M 0 398M 0% /dev/shm</span><br><span class="line"></span><br><span class="line">/dev/sda1 194M 28M 157M 15% /<span class="keyword">boot</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//192.168.1.24/smb2 49G 5.8G 40G 13% /mnt</span></span><br></pre></td></tr></table></figure>
<h3 id="四、注意事项：">四、注意事项：</h3><p>1、记得将防火墙（也可以将防火墙开启通过制定规则来使服务器与客户端通信）和selinux关闭；</p>
<p>2、共享目录开放的权限要跟目录本身的权限一致才能达到想要的你想要的效果。</p>
<h4 id="常见问题：">常见问题：</h4><p>windows中输入用户账号密码提示账号密码错误，使用</p>
<p>smbclient -L //192.168.32.220 -U lbt</p>
<p>在命令行登录，错误信息：</p>
<p>session setup failed: NT_STATUS_LOGON_FAILURE</p>
<p>解决办法：</p>
<p>这是因为此用户没有成为samba服务的用户，解决办法是将此系统用户加入到samba中：</p>
<p>执行命令： smbpasswd -a username</p>
<p>设置密码即可</p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="一、samba服务器的安装与配置">一、samba服务器的安装与配置</h3><ol>
<li><p>samba服务器所需的软件包：</p>
<p> [root@localhost ~]# yum -y install samba samba-common sam]]>
    </summary>
    
      <category term="Centos" scheme="https://wustrive2008.github.io/tags/Centos/"/>
    
      <category term="Linux" scheme="https://wustrive2008.github.io/tags/Linux/"/>
    
      <category term="samba" scheme="https://wustrive2008.github.io/tags/samba/"/>
    
      <category term="文件共享" scheme="https://wustrive2008.github.io/tags/%E6%96%87%E4%BB%B6%E5%85%B1%E4%BA%AB/"/>
    
      <category term="Linux" scheme="https://wustrive2008.github.io/categories/Linux/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Docker安装JavaWeb(Tomcat)运行环境]]></title>
    <link href="https://wustrive2008.github.io/2015/07/26/Docker%E5%AE%89%E8%A3%85JavaWeb(Tomcat)%E8%BF%90%E8%A1%8C%E7%8E%AF%E5%A2%83/"/>
    <id>https://wustrive2008.github.io/2015/07/26/Docker安装JavaWeb(Tomcat)运行环境/</id>
    <published>2015-07-26T12:43:05.000Z</published>
    <updated>2015-08-23T17:32:45.578Z</updated>
    <content type="html"><![CDATA[<p>docker 安装条件：</p>
<ol>
<li>开通cpu虚拟化技术 BIOS设置</li>
<li>宿主主机要求64位操作系统</li>
</ol>
<p>测试环境：ubuntu 14.04 64bit</p>
<h3 id="安装docker">安装docker</h3><ol>
<li><p>安装最新版本的docker</p>
<p> <code>wget -qO- https://get.docker.com/ | sh</code></p>
</li>
<li><p>查看版本</p>
<p> <code>doceker vresion</code></p>
</li>
<li><p>运行测试</p>
<p> <code>docker run hello-world</code></p>
</li>
</ol>
<h3 id="去除掉sudo">去除掉sudo</h3><blockquote>
<p>在Ubuntu下，在执行Docker时，每次都要输入sudo，同时输入密码，很累人的，这里微调一下，把当前用户执行权限添加到相应的docker用户组里面。</p>
</blockquote>
<p><strong>步骤</strong></p>
<figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor"># 添加一个新的docker用户组</span></span><br><span class="line">sudo groupadd docker</span><br><span class="line"><span class="preprocessor"># 添加当前用户到docker用户组里，注意这里的yongboy为ubuntu server登录用户名</span></span><br><span class="line">sudo gpasswd -a yongboy docker</span><br><span class="line"><span class="preprocessor"># 重启Docker后台监护进程</span></span><br><span class="line">sudo service docker restart</span><br><span class="line"><span class="preprocessor"># 重启之后，尝试一下，是否生效</span></span><br><span class="line">docker version</span><br><span class="line"><span class="preprocessor">#若还未生效，则系统重启，则生效</span></span><br><span class="line">sudo reboot</span><br></pre></td></tr></table></figure>
<h3 id="安装docker镜像">安装docker镜像</h3><ol>
<li><p>安装镜像</p>
<p> <code>docker pull learn/tutorial</code></p>
</li>
<li><p>测试效果</p>
<p> <code>docker run learn/tutorial /bin/echo hello world</code></p>
</li>
<li><p>进入虚拟机</p>
<p> <code>docker run -i -t learn/tutorial /bin/bash</code></p>
</li>
</ol>
<h3 id="虚拟机环境部署">虚拟机环境部署</h3><ol>
<li><p>安装ssh服务</p>
 <figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">apt-<span class="keyword">get</span> update</span><br><span class="line">apt-<span class="keyword">get</span> install openssh-server</span><br><span class="line">which sshd</span><br><span class="line">/usr/sbin/sshd</span><br><span class="line">mkdir /var/<span class="command">run</span>/sshd</span><br><span class="line">passwd <span class="comment">#输入用户密码，我这里设置为123456，便于SSH客户端登陆使用</span></span><br><span class="line"><span class="keyword">exit</span> <span class="comment">#退出</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>获取到刚才操作的实例容器ID</p>
 <figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#docker ps -<span class="keyword">l</span></span><br><span class="line">CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES</span><br><span class="line">b5b8dd5e603e learn/<span class="keyword">tutorial</span>:latest /bin/bash 3 minutes ago <span class="keyword">Exit</span> 0 thirsty_pasteur</span><br></pre></td></tr></table></figure>
</li>
<li><p>状态保存</p>
<p> <code>docker commit b5b8dd5e603e learn/tutorial</code></p>
</li>
<li><p>以后台进程方式长期运行此镜像实例</p>
<p> <code>docker run -d -p 22 -p 800:8080 learn/tutorial /usr/sbin/sshd -D</code></p>
</li>
<li><p>查看实例运行状态</p>
 <figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wustrive<span class="variable">@ubuntu</span><span class="symbol">:~</span><span class="variable">$ </span>sudo docker ps</span><br><span class="line"><span class="constant">CONTAINER ID </span>       <span class="constant">IMAGE </span>              <span class="constant">COMMAND </span>              <span class="constant">CREATED </span>            <span class="constant">STATUS </span>             <span class="constant">PORTS </span>                                         <span class="constant">NAMES</span></span><br><span class="line">b5b8dd5e603e        learn/tutorial      <span class="string">"/usr/sbin/sshd -D"</span>   <span class="number">31</span> minutes ago      <span class="constant">Up </span><span class="number">31</span> minutes       <span class="number">0</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">0</span><span class="symbol">:</span><span class="number">32768</span>-&gt;<span class="number">22</span>/tcp, <span class="number">0</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">0</span><span class="symbol">:</span><span class="number">800</span>-&gt;<span class="number">8080</span>/tcp   elegant_davinci</span><br></pre></td></tr></table></figure>
</li>
<li><p>ssh登录镜像</p>
<p> <code>ssh root@127.0.0.1 -p 32768</code></p>
</li>
<li><p>安装/运行javaweb部署运行环境</p>
 <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 在ubuntu 12.04上安装oracle jdk 7</span><br><span class="line">apt-get <span class="operator"><span class="keyword">install</span> python-software-properties</span><br><span class="line"><span class="keyword">add</span>-apt-repository ppa:webupd8team/java</span><br><span class="line">apt-<span class="keyword">get</span> <span class="keyword">update</span></span><br><span class="line">apt-<span class="keyword">get</span> <span class="keyword">install</span> -y wget</span><br><span class="line">apt-<span class="keyword">get</span> <span class="keyword">install</span> oracle-java7-installer</span><br><span class="line">java -<span class="keyword">version</span></span><br><span class="line"># 下载tomcat <span class="number">7.0</span><span class="number">.47</span></span><br><span class="line">wget http://mirrors.hust.edu.cn/apache/tomcat/tomcat-<span class="number">7</span>/v7<span class="number">.0</span><span class="number">.63</span>/<span class="keyword">bin</span>/apache-tomcat-<span class="number">7.0</span><span class="number">.63</span>.tar.gz</span><br><span class="line"># 解压，运行</span><br><span class="line">tar xvf apache-tomcat-<span class="number">7.0</span><span class="number">.47</span>.tar.gz</span><br><span class="line">cd apache-tomcat-<span class="number">7.0</span><span class="number">.47</span></span><br><span class="line"><span class="keyword">bin</span>/startup.sh</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>访问服务</p>
<p> 访问宿主主机800端口</p>
<p> 如：<code>curl http://192.168.32.151:800</code></p>
</li>
<li><p>保存镜像</p>
<p> <code>docker commit b5b8dd5e603e java/tomcat</code></p>
</li>
</ol>
<h3 id="docker常用命令">docker常用命令</h3><ul>
<li><p>docker version</p>
<p>  显示 Docker 版本信息。</p>
</li>
<li><p>docker info  </p>
<p>  检查docker安装是否正确</p>
</li>
<li><p>docker search</p>
<p>  从 Docker Hub 中搜索符合条件的镜像。</p>
<p>  —automated 只列出 automated build类型的镜像；</p>
<p>  —no-trunc 可显示完整的镜像描述；</p>
<p>  -s 40 列出收藏数不小于40的镜像。</p>
</li>
<li><p>sudo docker pull centos:7  </p>
<p>  从 Docker Hub 中拉取或者更新指定镜像。</p>
<p>  -a 拉取所有 tagged 镜像 。</p>
</li>
<li><p>docker images</p>
<p> 列出本地所有镜像。其中 [name] 对镜像名称进行关键词查询。</p>
<p> -a 列出所有镜像（含过程镜像）；</p>
<p> -f 过滤镜像，如： -f [‘dangling=true’] 只列出满足dangling=true 条件的镜像；</p>
<p> —no-trunc 可显示完整的镜像ID；</p>
<p> -q 仅列出镜像ID。</p>
<p> —tree 以树状结构列出镜像的所有提交历史。</p>
</li>
<li><p>docker run centos /bin/echo Hello Docker </p>
<p>  运行镜像</p>
</li>
<li><p>docker stop $sample_job</p>
<p>  停止名为sample_job的容器</p>
</li>
<li><p>docker commit $sample_job job1</p>
<p>  容器状态保存为镜像</p>
</li>
<li><p>docker ps</p>
<p>  列出所有运行中的容器</p>
<p>  -a 列出所有容器（含沉睡镜像）；</p>
<p>  —before=”nginx” 列出在某一容器之前创建的容器，接受容器名称和ID作为参数；</p>
<p>  —since=”nginx” 列出在某一容器之后创建的容器，接受容器名称和ID作为参数；</p>
<p>  -l 仅列出最新创建的一个容器；</p>
<p>  —no-trunc 显示完整的容器ID；</p>
<p>  -n=4 列出最近创建的4个容器；</p>
<p>  -q 仅列出容器ID；</p>
<p>  -s 显示容器大小。</p>
</li>
<li><p>docker rmi</p>
<p>  从本地移除一个或多个指定的镜像。</p>
<p>  -f 强行移除该镜像，即使其正被使用</p>
<p>  —no-prune 不移除该镜像的过程镜像，默认移除\</p>
</li>
<li><p>docker rm</p>
<p>  -f 强行移除该容器，即使其正在运行；</p>
<p>  -l 移除容器间的网络连接，而非容器本身；</p>
<p>  -v 移除与容器关联的空间。</p>
</li>
<li><p>docker history</p>
<p>  查看指定镜像的创建历史。</p>
<p>  —no-trunc 显示完整的提交记录；</p>
<p>  -q 仅列出提交记录ID。</p>
</li>
<li><p>docker start|stop|restart</p>
<p>  启动、停止和重启一个或多个指定容器。</p>
<p>  -a 待完成</p>
<p>  -i 启动一个容器并进入交互模式；</p>
<p>  -t 10 停止或者重启容器的超时时间（秒），超时后系统将杀死进程。</p>
</li>
<li><p>docker kill</p>
<p>  杀死一个或多个指定容器进程。</p>
<p>  -s “KILL” 自定义发送至容器的信号。</p>
</li>
<li><p>docker events</p>
<p>  从服务器拉取个人动态，可选择时间区间。</p>
</li>
<li><p>docker save</p>
<p>  将指定镜像保存成 tar 归档文件， docker load 的逆操作。保存后再加载（saved-loaded）的镜像不会丢失提交历史和层，可以回滚。</p>
</li>
<li><p>docker load</p>
<p>  从 tar 镜像归档中载入镜像， docker save 的逆操作。保存后再加载（saved-loaded）的镜像不会丢失提交历史和层，可以回滚。</p>
<p>  -i “debian.tar” 指定载入的镜像归档。</p>
</li>
<li><p>docker export</p>
<p>  将指定的容器保存成 tar 归档文件， docker import 的逆操作。导出后导入（exported-imported)）的容器会丢失所有的提交历史，无法回滚。</p>
</li>
<li><p>docker import</p>
<p>  从归档文件（支持远程文件）创建一个镜像， export 的逆操作，可为导入镜像打上标签。导出后导入（exported-imported)）的容器会丢失所有的提交历史，无法回滚。</p>
</li>
<li><p>docker top</p>
<p>  查看一个正在运行容器进程，支持 ps 命令参数。</p>
</li>
<li><p>docker inspect</p>
<p>  检查镜像或者容器的参数，默认返回 JSON 格式。</p>
<p>  -f 指定返回值的模板文件。</p>
</li>
<li><p>docker pause</p>
<p>  暂停某一容器的所有进程。</p>
</li>
<li><p>docker unpause</p>
<p>  恢复某一容器的所有进程。</p>
</li>
<li><p>docker tag</p>
<p>  标记本地镜像，将其归入某一仓库。</p>
<p>  -f 覆盖已有标记。</p>
</li>
<li><p>docker push</p>
<p>  将镜像推送至远程仓库，默认为 Docker Hub 。</p>
</li>
<li><p>docker logs</p>
<p>  获取容器运行时的输出日志。</p>
<p>  -f 跟踪容器日志的最近更新；</p>
<p>  -t 显示容器日志的时间戳；</p>
<p>  —tail=”10” 仅列出最新10条容器日志。</p>
</li>
<li><p>docker run</p>
<p>  启动一个容器，在其中运行指定命令。</p>
<p>  -a stdin 指定标准输入输出内容类型，可选 STDIN/STDOUT/STDERR 三项；</p>
<p>  -d 后台运行容器，并返回容器ID；</p>
<p>  -i 以交互模式运行容器，通常与 -t 同时使用；</p>
<p>  -t 为容器重新分配一个伪输入终端，通常与 -i 同时使用；</p>
<p>  —name=”nginx-lb” 为容器指定一个名称；</p>
<p>  —dns 8.8.8.8 指定容器使用的DNS服务器，默认和宿主一致；</p>
<p>  —dns-search example.com 指定容器DNS搜索域名，默认和宿主一致；</p>
<p>  -h “mars” 指定容器的hostname；</p>
<p>  -e username=”ritchie” 设置环境变量；</p>
<p>  —env-file=[] 从指定文件读入环境变量；</p>
<p>  —cpuset=”0-2” or —cpuset=”0,1,2” 绑定容器到指定CPU运行；</p>
<p>  -c 待完成</p>
<p>  -m 待完成</p>
<p>  —-net=”bridge” 指定容器的网络连接类型</p>
<p>  —link=[] 待完成</p>
<p>  —expose=[] 待完成</p>
</li>
</ul>
<h3 id="常见问题">常见问题</h3><ol>
<li>执行docker命令提示：</li>
</ol>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Get <span class="string">http:</span><span class="comment">///var/run/docker.sock/v1.19/containers/json: dial unix /var/run/docker.sock: no such file or directory. Are you trying to connect to a TLS-enabled daemon without TLS?</span></span><br></pre></td></tr></table></figure>
<p><strong>解决办法:</strong></p>
<figure class="highlight puppet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install apparmor</span><br><span class="line"></span><br><span class="line"><span class="keyword">service</span> docker <span class="literal">restart</span></span><br></pre></td></tr></table></figure>
<ol>
<li>挂载宿主主机目录</li>
</ol>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it -v /home/dock/<span class="constant">Downloads</span><span class="symbol">:/usr/Downloads</span> ubuntu64 /bin/bash</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p>docker 安装条件：</p>
<ol>
<li>开通cpu虚拟化技术 BIOS设置</li>
<li>宿主主机要求64位操作系统</li>
</ol>
<p>测试环境：ubuntu 14.04 64bit</p>
<h3 id="安装docker">安装docker</]]>
    </summary>
    
      <category term="Docker" scheme="https://wustrive2008.github.io/tags/Docker/"/>
    
      <category term="Java" scheme="https://wustrive2008.github.io/tags/Java/"/>
    
      <category term="Linux" scheme="https://wustrive2008.github.io/tags/Linux/"/>
    
      <category term="Tomcat" scheme="https://wustrive2008.github.io/tags/Tomcat/"/>
    
      <category term="虚拟机" scheme="https://wustrive2008.github.io/tags/%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    
      <category term="Linux" scheme="https://wustrive2008.github.io/categories/Linux/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[memcached高速缓存服务安装及使用]]></title>
    <link href="https://wustrive2008.github.io/2015/07/26/%E7%BC%93%E5%AD%98/memcached%E6%9C%8D%E5%8A%A1%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8/"/>
    <id>https://wustrive2008.github.io/2015/07/26/缓存/memcached服务安装及使用/</id>
    <published>2015-07-26T12:30:41.000Z</published>
    <updated>2015-07-26T13:37:55.140Z</updated>
    <content type="html"><![CDATA[<h3 id="安装Memcached">安装Memcached</h3><h4 id="request">request</h4><ol>
<li>gcc</li>
</ol>
<p>yum install gcc</p>
<ol>
<li>libevent</li>
</ol>
<p>yum install libevent*</p>
<h4 id="install">install</h4><pre><code>./configure --with-libevent=/usr
<span class="built_in">make</span> &amp;&amp; sudo <span class="built_in">make</span> install
</code></pre><h4 id="start">start</h4><pre><code>sudo /usr/<span class="keyword">local</span>/bin/memcached -<span class="keyword">d</span> -<span class="keyword">m</span> 10 -<span class="keyword">u</span> root -<span class="keyword">l</span> 192.168.32.193 -p 12000 -c 256 -P /tmp/memcached.pid
</code></pre><p>-d选项是启动一个守护进程，<br>-m是分配给Memcache使用的内存数量，单位是MB，我这里是10MB，<br>-u是运行Memcache的用户，我这里是root，<br>-l是监听的服务器IP地址，如果有多个地址的话，我这里指定了服务器的IP地址192.168.0.200，<br>-p是设置Memcache监听的端口，我这里设置了12000，最好是1024以上的端口，<br>-c选项是最大运行的并发连接数，默认是1024，我这里设置了256，按照你服务器的负载量来设定，<br>-P是设置保存Memcache的pid文件，我这里是保存在 /tmp/memcached.pid</p>
<h4 id="shutdown">shutdown</h4><pre><code><span class="built_in">kill</span> <span class="string">'cat /tmp/memcached.pid'</span>
</code></pre><h4 id="test">test</h4><pre><code>telnet 192.168.32.193 12000
#基本协议
<span class="operator"><span class="keyword">set</span> key1 <span class="number">0</span> <span class="number">180</span> <span class="number">3</span>
abc
STORED
<span class="keyword">add</span> key1 <span class="number">0</span> <span class="number">180</span> <span class="number">3</span>
xyz
NOT_STORED
<span class="keyword">get</span> key1
<span class="keyword">VALUE</span> key1 <span class="number">0</span> <span class="number">3</span>
abc
<span class="keyword">END</span>
<span class="keyword">replace</span> key1 <span class="number">0</span> <span class="number">180</span> <span class="number">3</span>
xyz
STORED
<span class="keyword">get</span> key1
<span class="keyword">VALUE</span> key1 <span class="number">0</span> <span class="number">3</span>
xyz
<span class="keyword">END</span>
<span class="keyword">delete</span> key1
DELETED</span>
</code></pre><h4 id="自动启动">自动启动</h4><ol>
<li><p>启动脚本 存入/etc/init.d/memcached</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="shebang">#!/bin/sh   </span></span><br><span class="line"><span class="comment">#   </span></span><br><span class="line"><span class="comment"># memcached:    MemCached Daemon   </span></span><br><span class="line"><span class="comment">#   </span></span><br><span class="line"><span class="comment"># chkconfig:    - 90 25  </span></span><br><span class="line"><span class="comment"># description:  MemCached Daemon   </span></span><br><span class="line"><span class="comment">#   </span></span><br><span class="line"><span class="comment"># Source function library.   </span></span><br><span class="line">. /etc/rc.d/init.d/<span class="built_in">functions</span>   </span><br><span class="line">. /etc/sysconfig/network   </span><br><span class="line"><span class="comment">#[ $&#123;NETWORKING&#125; = "no" ] &amp;&amp; exit 0  </span></span><br><span class="line"><span class="comment">#[ -r /etc/sysconfig/dund ] || exit 0  </span></span><br><span class="line"><span class="comment">#. /etc/sysconfig/dund   </span></span><br><span class="line"><span class="comment">#[ -z "$DUNDARGS" ] &amp;&amp; exit 0  </span></span><br><span class="line"><span class="function"><span class="title">start</span></span>()   </span><br><span class="line">&#123;   </span><br><span class="line">        <span class="built_in">echo</span> -n $<span class="string">"Starting memcached: "</span>  </span><br><span class="line">        daemon <span class="variable">$MEMCACHED</span> -u lbt <span class="operator">-d</span> -m <span class="number">1024</span> <span class="operator">-l</span> <span class="number">192.168</span>.<span class="number">32.193</span> -p <span class="number">12000</span> </span><br><span class="line">        <span class="built_in">echo</span>   </span><br><span class="line">&#125;   </span><br><span class="line"><span class="function"><span class="title">stop</span></span>()   </span><br><span class="line">&#123;   </span><br><span class="line">        <span class="built_in">echo</span> -n $<span class="string">"Shutting down memcached: "</span>  </span><br><span class="line">        killproc memcached   </span><br><span class="line">        <span class="built_in">echo</span>   </span><br><span class="line">&#125;   </span><br><span class="line">MEMCACHED=<span class="string">"/usr/local/bin/memcached"</span>  </span><br><span class="line">[ <span class="operator">-f</span> <span class="variable">$MEMCACHED</span> ] || <span class="built_in">exit</span> <span class="number">1</span>  </span><br><span class="line"><span class="comment"># See how we were called.   </span></span><br><span class="line"><span class="keyword">case</span> <span class="string">"<span class="variable">$1</span>"</span> <span class="keyword">in</span>   </span><br><span class="line">  start)   </span><br><span class="line">        start   </span><br><span class="line">        ;;   </span><br><span class="line">  stop)   </span><br><span class="line">        stop   </span><br><span class="line">        ;;   </span><br><span class="line">  restart)   </span><br><span class="line">        stop   </span><br><span class="line">        sleep <span class="number">3</span>  </span><br><span class="line">        start   </span><br><span class="line">        ;;   </span><br><span class="line">    *)   </span><br><span class="line">        <span class="built_in">echo</span> $<span class="string">"Usage: <span class="variable">$0</span> &#123;start|stop|restart&#125;"</span>  </span><br><span class="line">        <span class="built_in">exit</span> <span class="number">1</span>  </span><br><span class="line"><span class="keyword">esac</span>   </span><br><span class="line"><span class="built_in">exit</span> <span class="number">0</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>执行以下命令   </p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chkconfig  <span class="comment">--add memcached </span></span><br><span class="line">chkconfig  <span class="comment">--level 235  memcached  on</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>测试使用</p>
<pre><code>chkconfig  --list | grep mem

/etc/rc.d/init.d/memcached  <span class="literal">start</span>  
/etc/rc.d/init.d/memcached  <span class="literal">stop</span>
/etc/rc.d/init.d/memcached  <span class="literal">restart</span>
或
<span class="keyword">service</span> memcached <span class="literal">start</span>
<span class="keyword">service</span> memcached <span class="literal">stop</span>
<span class="keyword">service</span> memcached <span class="literal">restart</span>
</code></pre></li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="安装Memcached">安装Memcached</h3><h4 id="request">request</h4><ol>
<li>gcc</li>
</ol>
<p>yum install gcc</p>
<ol>
<li>libevent</li>
</ol]]>
    </summary>
    
      <category term="java" scheme="https://wustrive2008.github.io/tags/java/"/>
    
      <category term="linux" scheme="https://wustrive2008.github.io/tags/linux/"/>
    
      <category term="memcached" scheme="https://wustrive2008.github.io/tags/memcached/"/>
    
      <category term="缓存" scheme="https://wustrive2008.github.io/tags/%E7%BC%93%E5%AD%98/"/>
    
      <category term="缓存" scheme="https://wustrive2008.github.io/categories/%E7%BC%93%E5%AD%98/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[chkconfig构建linux服务]]></title>
    <link href="https://wustrive2008.github.io/2015/07/26/Linux/chkconfig%E6%9E%84%E5%BB%BAlinux%E6%9C%8D%E5%8A%A1/"/>
    <id>https://wustrive2008.github.io/2015/07/26/Linux/chkconfig构建linux服务/</id>
    <published>2015-07-26T12:27:41.000Z</published>
    <updated>2015-07-26T13:39:51.852Z</updated>
    <content type="html"><![CDATA[<h2 id="手动构建linux服务">手动构建linux服务</h2><h3 id="Linux运行级别">Linux运行级别</h3><ul>
<li>0 - 停机</li>
<li>1 - 单用户模式</li>
<li>2 - 多用户，没有NFS和网络</li>
<li>3 - 完全多用户</li>
<li>4 - 暂无</li>
<li>5 - 图形界面</li>
<li>6 - 重启</li>
</ul>
<p><strong> 默认的运行级别在/etc/inittab中设置 </strong></p>
<h3 id="写服务控制脚本">写服务控制脚本</h3><p><strong> 示例：</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="shebang">#!/bin/sh   </span></span><br><span class="line"><span class="comment">#   </span></span><br><span class="line"><span class="comment"># memcached:    MemCached Daemon   </span></span><br><span class="line"><span class="comment">#   </span></span><br><span class="line"><span class="comment"># chkconfig:    35 90 25  </span></span><br><span class="line"><span class="comment"># description:  MemCached Daemon   </span></span><br><span class="line"><span class="comment">#   </span></span><br><span class="line"><span class="comment"># Source function library.   </span></span><br><span class="line">. /etc/rc.d/init.d/<span class="built_in">functions</span>   </span><br><span class="line">. /etc/sysconfig/network   </span><br><span class="line"><span class="function"><span class="title">start</span></span>()   </span><br><span class="line">&#123;   </span><br><span class="line">        <span class="built_in">echo</span> -n $<span class="string">"Starting memcached: "</span>  </span><br><span class="line">        daemon <span class="variable">$MEMCACHED</span> -u lbt <span class="operator">-d</span> -m <span class="number">1024</span> <span class="operator">-l</span> <span class="number">192.168</span>.<span class="number">32.193</span> -p <span class="number">12000</span> </span><br><span class="line">        <span class="built_in">echo</span>   </span><br><span class="line">&#125;   </span><br><span class="line"><span class="function"><span class="title">stop</span></span>()   </span><br><span class="line">&#123;   </span><br><span class="line">        <span class="built_in">echo</span> -n $<span class="string">"Shutting down memcached: "</span>  </span><br><span class="line">        killproc memcached   </span><br><span class="line">        <span class="built_in">echo</span>   </span><br><span class="line">&#125;   </span><br><span class="line">MEMCACHED=<span class="string">"/usr/local/bin/memcached"</span>  </span><br><span class="line">[ <span class="operator">-f</span> <span class="variable">$MEMCACHED</span> ] || <span class="built_in">exit</span> <span class="number">1</span>  </span><br><span class="line"><span class="comment"># See how we were called.   </span></span><br><span class="line"><span class="keyword">case</span> <span class="string">"<span class="variable">$1</span>"</span> <span class="keyword">in</span>   </span><br><span class="line">  start)   </span><br><span class="line">        start   </span><br><span class="line">        ;;   </span><br><span class="line">  stop)   </span><br><span class="line">        stop   </span><br><span class="line">        ;;   </span><br><span class="line">  restart)   </span><br><span class="line">        stop   </span><br><span class="line">        sleep <span class="number">3</span>  </span><br><span class="line">        start   </span><br><span class="line">        ;;   </span><br><span class="line">    *)   </span><br><span class="line">        <span class="built_in">echo</span> $<span class="string">"Usage: <span class="variable">$0</span> &#123;start|stop|restart&#125;"</span>  </span><br><span class="line">        <span class="built_in">exit</span> <span class="number">1</span>  </span><br><span class="line"><span class="keyword">esac</span>   </span><br><span class="line"><span class="built_in">exit</span> <span class="number">0</span></span><br></pre></td></tr></table></figure>
<p><strong> 说明 </strong></p>
<figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor"># chkconfig:    35 90 25     </span></span><br><span class="line"><span class="preprocessor"># description:  MemCached Daemon</span></span><br></pre></td></tr></table></figure>
<p>这两行必须，chkconfig 35 90 25  ,数字分别代表，启动级别，启动运行 ，关闭顺序</p>
<h3 id="安装服务">安装服务</h3><ol>
<li>将脚本拷贝到/etc/init.d/目录</li>
<li>chkconfig add  servername(脚本名称)</li>
<li>chkconfig —level 35 servername on </li>
<li>chkconfig  —list | grep servername</li>
</ol>
<h3 id="使用服务">使用服务</h3><pre><code><span class="keyword">service</span>  servername  <span class="literal">start</span>|<span class="literal">stop</span>|<span class="literal">restart</span>
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[<h2 id="手动构建linux服务">手动构建linux服务</h2><h3 id="Linux运行级别">Linux运行级别</h3><ul>
<li>0 - 停机</li>
<li>1 - 单用户模式</li>
<li>2 - 多用户，没有NFS和网络</li>
<li>]]>
    </summary>
    
      <category term="Linux" scheme="https://wustrive2008.github.io/tags/Linux/"/>
    
      <category term="chkconfig" scheme="https://wustrive2008.github.io/tags/chkconfig/"/>
    
      <category term="服务器" scheme="https://wustrive2008.github.io/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
      <category term="Linux" scheme="https://wustrive2008.github.io/categories/Linux/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[支付战争]]></title>
    <link href="https://wustrive2008.github.io/2015/07/26/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E6%94%AF%E4%BB%98%E6%88%98%E4%BA%89/"/>
    <id>https://wustrive2008.github.io/2015/07/26/读书笔记/读书笔记-支付战争/</id>
    <published>2015-07-26T12:19:00.000Z</published>
    <updated>2015-08-15T09:15:19.861Z</updated>
    <content type="html"><![CDATA[<h3 id="书籍概要">书籍概要</h3><h5 id="书名">书名</h5><p>支付战争·互联网金融创世纪</p>
<h5 id="作者">作者</h5><p>埃里克•杰克逊(Eric M. Jackson)</p>
<h5 id="作者简介">作者简介</h5><p>PayPal成立初期的高管之一，曾担任PayPal产品营销总监。CapLinked公司的联合创始人兼CEO。CapLinked是一家专为投资人、创业者等提供简单高效投资协作平台的创业公司。</p>
<h5 id="阅读方式">阅读方式</h5><p>电子书 kindle</p>
<h5 id="阅读日期">阅读日期</h5><p>2015.6</p>
<h3 id="书籍简介">书籍简介</h3><p>这是一个野心勃勃的创业计划，在线支付鼻祖PayPal试图创造一个“统治世界”的金融操作系统，并在全球成功推广一款颠覆式的互联网产品。<br>《支付战争》的作者是“PayPal黑帮”成员之一，他真实还原了这个伟大产品是如何诞生的，以及在后来的发展壮大之路上，如何应对融资紧张、突破增长瓶颈，在竞争者凶猛围剿与平台商霸王条款的夹击下，逆境求生，改变业务模式，最终完成IPO，并成功出售给竞争对手eBay的全过程。<br>PayPal充满韧性的年轻创业家们，在后来的商业之路上开创了硅谷投资界的新格局，打造了多家新创公司，其中有7家市值超过10亿美元，如领英（LinkedIn）、特斯拉（Tesla）、YouTube等。《支付战争》带领我们回到“PayPal黑帮”最初的战场：山寨产品不断涌现，赤字危机节节逼近，公司几经易主，重组后文化冲突尖锐，网络诈骗汹涌来袭，客服危机迫在眉睫，媒体质疑层出不穷，罢免埃隆•马斯克掀起血雨腥风……当全世界与它为敌，看PayPal如何接受残酷洗礼，浴火重生！</p>
<h3 id="摘录笔记">摘录笔记</h3><p>1999年第四季度</p>
<p>彼得 • 蒂尔的 Confinity 推出产品 Paypal，这个产品可以让任意用户在知道对方电子邮件地址的情况下向对方转账，而此前这种交易只能通过手写的支票。6个星期之后，埃隆 • 马斯克创立 X.com。</p>
<p>2000年新春</p>
<p>新春钟声敲响的时候，Paypal 有了第10000个用户，它获取用户的手段是通过病毒营销，首先，Paypal 会给所有新注册的用户账户打10美元，同时，如果某用户推荐了新的用户，那么推荐人也会获得10美元的奖励。2000年1月末，通过让 eBay 的买卖双方使用 Paypal 来支付，Paypal 的用户数到达10万。</p>
<p>2000年2月</p>
<p>Paypal 与 X.com 合并，事实上这个合并意义重大，而且显示出交易双方创始人的不同寻常之处。合并之前的 Paypal 与 X.com 各有大约20万用户，Paypal 在 eBay 货物陈列上的份额是8%左右，而 X.com 在5%左右，但 X.com 比 Paypal 有更多的现金储备，同时也能提供更多的增值服务。彼得 • 蒂尔在《Zero to One》这本书的第四章中写道：</p>
<p>我们公司的办公大楼在 Palo Auto 的大学街上，和 X.com 的公司隔了4个街区，X.com 的产品和我们的极为相似，到了1999年末，我们陷入了全面战争。Paypal 许多员工周工作时间达到了100小时，毫无疑问，结果不尽如人意，因为我们关注的不是客观的生产效率，而是打败 X.com 公司。我们公司的一个工程师甚至为了达到这个目的还设计了一枚炸弹……</p>
<p>彼得 • 蒂尔说，处理合并之后的竞争不是件简单的事情，有时你不得不投入战斗。需要的时候，你不仅要战斗，还必须得赢，没有中间选择：要么和风细雨润物无声，要么暴风骤雨速战速决。合并之后的新公司仍然维持着两边原有的产品和系统架构，Paypal 每天都有1.2万的新用户注册，而 X.com 由于取消了每个用户20美元的补贴，注册人数急剧下降。从现在看来，Paypal 与 X.com 合并不但让这两家公司摆脱了恶性竞争，而且给十几年后的中国互联网市场带来了可参考的范例，后来，中国移动互联网市场发生了多起这样的合并。</p>
<p>2000年3月</p>
<p>在线支付真正成为一个行业，竞争变得更加激烈，多家公司从不同方向进入这个市场，比如雅虎通过 dotBank 进入这一领域。对于 Paypal 来说，他们的好消息就是，他们在纳斯达克崩盘之前完成了1亿美元的融资。但是不幸的是，有了一些重量级的玩家，比如 eBay，也通过收购进入市场。eBay 是通过收购 Billpoint 进入这一市场的，由于在线支付的主要用户群体集中在 eBay 上面，因此，eBay 拥有无与伦比的主场优势，这个优势就如同在淘宝和天猫上的支付宝的优势一样。</p>
<p>2000年4月初</p>
<p>Paypal 用户达到100万，当月新增用户为50万，每天平均支付金额为200万美元，但问题也随之而来，第一个问题是客服问题，每天都有将近几千封电子邮件如洪水猛兽一般涌来，由于 Paypal 处理的是用户的金钱问题，因此用户的耐心非常有限，这给 Paypal 的客服工作造成了极大压力，4月初的时候，Paypal 积累未回复的客户邮件数量是10万封，当时还没有 Zendesk 这样的非常方便的客户关怀系统，Paypal 不得不自己着手解决这个问题。</p>
<p>第二个问题是应用性能问题，从4月份开始，Paypal 的网站变得越来越慢，也更加不稳定，网页的加载时间变长，用户在登录账户的时候经常会遇见错误信息，在这种情况下，Paypal 不得不停止统计 统治世界指数 来给业已超负荷的应用系统和数据库带啦更大的压力，当时还没有 SaaS 方式的APM 服务(第一个 SaaS APM 服务商8年后才会创立)。同时，Paypal 和 X.com 使用的技术栈也有不同，Paypal 是 UNIX 和 Oracle，而 X.com 则是基于 NT 的技术栈,两家公司的工程师为扩容使用什么技术争执不休。第三个问题则是业务模式问题，由于当时的 Paypal 是一个纯烧钱的模式，每一个新用户的注册都要发奖金，每一笔交易都要向信用卡协会交2%的手续费，导致公司每个月都要烧钱上千万美元，每一笔交易都要亏损3.5%。在这三个问题的挑战之下，合并之后的公司大部分部门陷入瘫痪状态。</p>
<p>2000年5月5日</p>
<p>彼得 • 蒂尔因为筋疲力尽而辞职，埃隆 • 马斯克成为新的掌舵人。埃隆 • 马斯克和戴维 • 萨克斯组建了新的产品团队并命名为「生产者」，作者埃里克 • 杰克逊被任命为唯一的市场营销人员。生产者团队组建以后，积极推动业务模式的改变，努力推动向卖家收费的策略，同时，积极减少信用卡交易在所有交易中的比例，通过这一方式，虽然公司仍然处于亏损状态，但是每笔交易的交易利润开始从-3.5%逐渐回升。</p>
<p>2000年7月</p>
<p>Paypal 一直凑活着使用的数据库系统几乎到达容量上限，因而引发了升级到2.0系统的话题。X.com 的工程师一直坚持2.0系统要建立在 Windows NT 系统之上，而埃隆 • 马斯克支持这一决定，并暂停了所有新功能的开发以尽快完成2.0版本。在这一要命的时刻，公司又遭遇了诈骗危机，最大一笔单笔诈骗金额达到570万美元，真是屋漏偏逢连夜雨。生产者团队虽然想出了应对烧钱的办法，但是由于2.0版本的事情无法获得任何开发资源的支持。同时，埃隆 • 马斯克又打算移除 Paypal 品牌，统一使用 X.com 品牌。</p>
<p>2000年9月</p>
<p>埃隆 • 马斯克被扳倒，彼得 • 蒂尔归来。彼得 • 蒂尔重新掌权后，2.0版本计划被束之高阁，公司努力改变居高不下的亏损状况，升级战略初步奏效，很多个人用户升级为企业用户。</p>
<p>2000年第四季度</p>
<p>Paypal 注册用户达到500万，每天的总支付金额达到600万美元，这些交易中有2/3来自企业账户，为公司带来了740万美元的收入。虽然仍然有2540万美元的赤字，但前一季度的收入只有100万美元，而运营损失高达3670万美元。</p>
<p>2001年开始后</p>
<p>Paypal 开始了一系列产品的创新，使得第一季度的用户数达到720万，每天的总支付金额达到700万美元，为公司带来了1320万美元的收入。</p>
<p>2001年第三季度</p>
<p>Paypal 收入3020万美元，第三季度，收入4010万美元，并首度实现盈利。 我们可以看到，上面这些神奇的变化，是发生在短短的两年里，如果 Paypal 后来没有卖给 eBay，如果能够保持同样的发展速度，可能现在整个世界互联网金融领域的格局会完全改变。</p>
<h3 id="心得笔记">心得笔记</h3><p>[转]<br>最近国内创业圈几乎都被一本书刷屏了——彼得·蒂尔的《从0到1》。而《支付战争》讲的就是这位大神如何从0到1创立并发展Paypal的故事。 </p>
<p>如果你不熟悉Paypal，那么可将其近似理解为“美国的支付宝”。投资基金出身的彼得·蒂尔早在1998年就发现了在线支付的大市场，于是网罗了一帮青年才俊——那真是青年才俊，整个公司平均年龄才25岁，这帮人也成了后来著名的“Paypal黑帮”。本书作者是Paypal第27位成员，在还没有搞清楚具体要来做什么的情况下，就从安达信这种当年的金饭碗辞了职，投奔蒂尔而来，参与并见证了Paypal改变世界的旅程。 </p>
<p>而这段旅程从一开始就注定惊心动魄。Paypal支付工具发布仅6周，山寨者dotBank和X.com便横空出世，市场瞬间陷入混战。Paypal首先从eBay用户资源入手，很快打开了局面，但任何创新都会马上被对手复制，火拼厮杀成了常态。疲于应付竞争让公司损耗了大量的时间精力，而无暇真正根据用户需求和市场发展自身，这让彼得·蒂尔深为困扰。正是出于这个原因，他决定与X.com合并，让行业重新洗牌，这也使得他们成功躲过了2000年互联网泡沫的冲击。 </p>
<p>但好景不长，财大气粗的eBay马上也加入了战场，并不断凭借主场优势发布霸王条款，扶持自家小弟Billpoint，经常打得Paypal措手不及。“外患”不断，合并后的X.com也同时饱受“内忧”，原来两个公司的不同品牌、不同文化，甚至程序员开发基于不同的平台，导致双方矛盾日益尖锐，结果是彼得·蒂尔辞职，埃隆·马斯克掌舵。然而形势依旧严峻，对手攻势猛烈、规模迅速扩张而客服跟不上、诈骗横行导致巨额亏损，最后因为是否保留Paypal品牌的问题，Paypal和X.com两派的暗战终于引爆。5个月后，埃隆·马斯克出局，彼得·蒂尔重出江湖。 </p>
<p>要是商战电视剧，到这完全可以精彩“剧终”了，但现实远要更残酷得多。我们都知道最后Paypal以15亿美元卖给了eBay，而其中的曲折坎坷、孤注一掷、铤而走险，都远远超过了任何一个顶尖编剧的想象——刁钻的用户、难缠的对手，更大的压力来自舆论、诈骗团伙甚至政府监管部门。本来公司第二天就要IPO了，突然有不知名的小公司跳出来告你侵权，又有州政府杀出来说你“违反了某规定”，让上市险些功亏一篑。“终于渡过了一劫，但回过头看，这才只是热身而已。”全书不下十几处这样的表述，让你的心一直揪着，就像追悬疑剧，永远想赶紧点开下一集。 </p>
<p>如果真要拍成电视，彼得·蒂尔可谓名副其实的霸道总裁。除了高颜值、好身材、多金、CEO这些标配之外，他在其他方面的多才多艺，简直超越了地球人的范畴——要是有编剧敢这么写，一定早被吐槽成筛子了：斯坦福高材生，而且主修哲学；创办独立学生报纸。你以为他是文艺咖？No No No，他的老本行是对冲基金，凭心算能将除法计算到小数点后四位，并且还是美国国际象棋联合会前国手，在Paypal上市的庆祝会上，一人对付十位高管，同时下十盘国际象棋（而只有一人赢了他）。作为一名力挽狂澜的CEO，必然很高冷吧？No No No，他一直是T恤衫休闲裤，为了鼓舞员工，竟然答应如果公司达到目标业绩就把头发染成蓝色（后来业绩差了一点点）。EQ/IQ，QQ通，文理兼修、刚柔并济，就连独特的性取向这条都占了。如此丧心病狂的软硬件配置，就算把手撕鬼子这种技能按在他身上，我也觉得合情合理，心服口服。 </p>
<p>当然，说正经的，这书可谓彼得·蒂尔创新理念的最佳诠释：如何从0到1？为何要避免竞争（与X.com合并，接受eBay的收购）？如何打造帮派文化？看完全书，你都会有更深刻的理解。在书的最后，作者简要罗列了Paypal黑帮成员们后来的发展：彼得·蒂尔继续做投资，仅从投资Facebook上就获益数千倍；里德·霍夫曼创立了LinkedIn，打造新型企业雇员关系；埃隆·马斯克创立SpaceX和特斯拉，玩进了太空；马克斯·列夫琴开创了Slide公司，陈士骏创立了YouTube……这种超豪华阵容，会让你恍惚有种对着96级北影表演系毕业照看当今影视圈的即视感；或者说，Paypal黑帮就是世界的蓝翔技校，挖掘技术嗷嗷强——只不过他们擅长的不是挖土，而是掘金。 </p>
<p>自然，他们绝不只是掘金，他们是真的在改变世界。想想“手填汇款单”这种遥远的事情，仔细算来也不过就在几年前。而如今便捷的手机支付成了家常便饭，滴滴快的烧钱大战、微信红包狂潮，也已经让我们对中国版的支付战争有了切身体验。秉承“打得过就打，打不过就联合”的理念，优酷土豆合并了，滴滴快的在一起了，那么未来支付宝与微信是否也会成为幸福的一对儿，也许我们真的可以拭目以待。 </p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="书籍概要">书籍概要</h3><h5 id="书名">书名</h5><p>支付战争·互联网金融创世纪</p>
<h5 id="作者">作者</h5><p>埃里克•杰克逊(Eric M. Jackson)</p>
<h5 id="作者简介">作者简介</h5><p>]]>
    </summary>
    
      <category term="paypal" scheme="https://wustrive2008.github.io/tags/paypal/"/>
    
      <category term="奇点" scheme="https://wustrive2008.github.io/tags/%E5%A5%87%E7%82%B9/"/>
    
      <category term="支付" scheme="https://wustrive2008.github.io/tags/%E6%94%AF%E4%BB%98/"/>
    
      <category term="皮特·泰尔" scheme="https://wustrive2008.github.io/tags/%E7%9A%AE%E7%89%B9%C2%B7%E6%B3%B0%E5%B0%94/"/>
    
      <category term="读书笔记" scheme="https://wustrive2008.github.io/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="读书笔记" scheme="https://wustrive2008.github.io/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[解忧杂货店]]></title>
    <link href="https://wustrive2008.github.io/2015/07/26/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E8%A7%A3%E5%BF%A7%E6%9D%82%E8%B4%A7%E5%BA%97/"/>
    <id>https://wustrive2008.github.io/2015/07/26/读书笔记/读书笔记-解忧杂货店/</id>
    <published>2015-07-26T11:41:13.000Z</published>
    <updated>2015-08-15T09:15:27.318Z</updated>
    <content type="html"><![CDATA[<h3 id="书籍概要">书籍概要</h3><h5 id="书名">书名</h5><p>解忧杂货店</p>
<h5 id="作者">作者</h5><p>(日)东野圭吾 </p>
<h5 id="作者简介">作者简介</h5><p>东野圭吾<br>日本著名作家。<br>1985年，《放学后》获第31届江户川乱步奖，开始专职写作；<br>1999年，《秘密》获第52届日本推理作家协会奖；<br>2005年出版的《嫌疑人X的献身》史无前例地同时获得第134届直木奖、第6届本格推理小说大奖，以及年度三大推理小说排行榜第1名；<br>2008年，《流星之绊》获第43届新风奖；<br>2009年出版的《新参者》获两大推理小说排行榜年度第1名；<br>2012年，《解忧杂货店》获第7届中央公论文艺奖。<br>2014年，《祈りの幕が下りる時》（暂译《祈祷落幕时》）获第48届吉川英治文学奖。</p>
<h5 id="阅读方式">阅读方式</h5><p>电子书 kindle</p>
<h5 id="阅读日期">阅读日期</h5><p>2015.6</p>
<h3 id="书籍简介">书籍简介</h3><p>现代人内心流失的东西，这家杂货店能帮你找回——<br>僻静的街道旁有一家杂货店，只要写下烦恼投进卷帘门的投信口，第二天就会在店后的牛奶箱里得到回答。<br>因男友身患绝症，年轻女孩静子在爱情与梦想间徘徊；克郎为了音乐梦想离家漂泊，却在现实中寸步难行；少年浩介面临家庭巨变，挣扎在亲情与未来的迷茫中……<br>他们将困惑写成信投进杂货店，随即奇妙的事情竟不断发生。<br>生命中的一次偶然交会，将如何演绎出截然不同的人生？<br>如今回顾写作过程，我发现自己始终在思考一个问题：站在人生的岔路口，人究竟应该怎么做？我希望读者能在掩卷时喃喃自语：我从未读过这样的小说。——东野圭吾</p>
<h3 id="摘录笔记">摘录笔记</h3><ol>
<li>心，一旦离开了，就再不会回来。</li>
<li>人与人之间情断义绝，并不需要什么具体的理由。就算表面上有，也很可能只是心已经离开的结果，事后才编造出的借口而已。因为倘若心没有离开，当将会导致关系破裂的事态发生时，理应有人努力去挽救。如果没有，说明其实关係早已破裂。</li>
<li>其实很久以前我就知道自己应该怎样选择，只是一直无法下决心舍弃梦想。到现在，我依然不知道怎样才能做到这一点。打个比方，这就如同单相思的感觉，明知恋情不会有结果，却还是忘不了对方。</li>
<li>我的回答之所以发挥了作用，原因不是别的，是因为他们自己很努力。如果自己不想积极认真地生活，不管得到什么样的回答都没用。</li>
<li>满脑子天真想法的人，在社会上吃点苦头也是好事。</li>
<li>就算是恨，也是一种很抽象的感情。</li>
<li>你的地图是一张白纸，所以即使想决定目的地，也不知道路在哪里。</li>
<li>虽然至今为止的道路绝非一片坦途，但想到正因为活着才有机会感受到痛楚，我就成功克服了种种困难。</li>
<li>这么多年咨询信看下来，让我逐渐明白一件事。很多时候，咨询的人心里已经有了答案，来咨询只是想确认自己的决定是对的。所以有些人读过回信后，会再次写信过来，大概就是因为回答的内容和他的想法不一样。</li>
<li>他觉得一个人奋斗更轻松自在。跟没有干劲的人在一起厮混，只会徒增压力。</li>
<li>其实所有纠结做选择的人心里早就有了答案，咨询只是想得到心里内心所倾向的选择。最终的所谓命运 还是自己一步步走出来的。</li>
<li>很多时候，咨询的人心里已经有了答案，来咨询只是想确认自己的决定是对的。</li>
<li>如果把向我咨询的人比喻做迷途的羊羔，那么他们通常手中都拿着地图，却没去看。</li>
</ol>
<h3 id="心得笔记">心得笔记</h3><p>[转]<br>朋友介绍《解忧杂货店》给我的时候，我看到作者是东野圭吾就觉可能又是一本惊悚的悬疑小说了。耐着性子读完后惊喜的发现，作者一改以往所写的推理小说框架，推理情节贯彻全书，悬疑而不惊栗，内容紧凑却又轻松，布局精妙。</p>
<p>　　各式各样的烦恼人人都有，东野圭吾先生运用了小说撰写技巧将人们心中深层的烦恼编写成感人的故事。故事背景以日本的一家传统杂货店作为空间的主轴，巧妙地运用了这家杂货店，让时空在此交汇成一个点。在杂货店的前、后门让书信穿越时空相互往来，串起整部书吸引人的内容。故事以三位孤儿院长大的孩子，由于某些动机抢夺钱财逃到了这家杂货店而开始。小说最重要的主题——烦恼经由手写的书信来往，丝丝入扣的情节牵引读者的心随之起伏。</p>
<p>　　如果问我这本书最想推介给哪些人阅读，我想应该是给对自我缺乏信心的人。当我读完时，思考与揣测作者想要传达什么样的人生观给读者？我个人解读如下：人需要对自我有相当坚定的自信心，成功在于自信心而非在于选择；命运是掌握在自己手中，无论身处什么样的环境或是面对未知的未来，自己才是百分之百的控制者；每个人都需要诚实的面对环境给予的挑战；烦恼来自于自己无法控制的外在人、事、物，而我们却如着魔似的想要控制无法控制的环境状态。</p>
<p>　　《解忧杂货店》描写的烦恼皆是发生在你我周遭不为人知亦或你我自身的故事。因为发生在生活中，所以书籍畅销。它就是这样的写实，却又戏剧化，然而作者真的仅是想传达戏剧内容吗？举几则书中的烦恼故事：月亮兔小姐是一名奥运选手，正当密集训练之际，男朋友却患了不治之症。月亮兔小姐并未按照杂货店解忧的建议，而是根据自己的想法来决定未来。因为生活的因素，想要放弃白天的正职转而工作从事夜晚的酒店坐台，当事者也没有听从杂货店给予的建议而决定未来。为了尊重作者也尊重尚未阅读此书的读者，我仅举两个书中的烦恼故事作为说明。</p>
<p>　　我想东野先生似乎要表达“一个人在犹豫不决及彷徨无措时，只要冷静的自我思考后，其实任何的决定都是对的，只要自己决定之后勇往直前，都会获得美好的结局”，这是我对此书所下的结论。如果说什么样的人适合阅读这部小说，我想归类如下：常去寺庙朝拜求签的人，希望神明来帮他／她做决定；对事情总要想找到最佳决策的人；怀疑自己的人。</p>
<p>　　我做个这样的对应假说：</p>
<p>　　《解忧杂货店》书中的浪矢杂货店是否与我们去过的庙宇相似？杂货店中无论是老板爷爷或是三位孤儿院的年轻人，如同我们所求的神明。不知道这样的假说对应关系读者是否认同？往往我们到庙宇去求箴诗，无非就是想要神明帮我们做个决定。生活中常常出现有人被寺庙、神棍骗财骗色的新闻，屡见不鲜，是否也显示出人们自信心的脆弱，一旦身旁出现心怀不轨而又自信心强的人即可控制你的未来。</p>
<p>　　我深信每个人的一生所拥有的好运和坏运都是均等的，只是好、坏运根据时间与严重性的不同才会让你觉得烦恼或不顺心。《解忧杂货店》内所有问题的结果其实旁观者对于好坏看法都不一样，与杂货店书信往来就是处理烦恼的过程。这些咨询烦恼的人，自己多半没有按照建议行动，但是来来往往过程中帮助了烦恼者自己探索自己认清了自己的真正面目，最后找到了属于自己最佳的答案。这是否才是最好的解答？</p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="书籍概要">书籍概要</h3><h5 id="书名">书名</h5><p>解忧杂货店</p>
<h5 id="作者">作者</h5><p>(日)东野圭吾 </p>
<h5 id="作者简介">作者简介</h5><p>东野圭吾<br>日本著名作家。<br>1985年]]>
    </summary>
    
      <category term="东野圭吾" scheme="https://wustrive2008.github.io/tags/%E4%B8%9C%E9%87%8E%E5%9C%AD%E5%90%BE/"/>
    
      <category term="解忧杂货店" scheme="https://wustrive2008.github.io/tags/%E8%A7%A3%E5%BF%A7%E6%9D%82%E8%B4%A7%E5%BA%97/"/>
    
      <category term="读书笔记" scheme="https://wustrive2008.github.io/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="读书笔记" scheme="https://wustrive2008.github.io/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[三体]]></title>
    <link href="https://wustrive2008.github.io/2015/07/26/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E4%B8%89%E4%BD%93/"/>
    <id>https://wustrive2008.github.io/2015/07/26/读书笔记/读书笔记-三体/</id>
    <published>2015-07-26T11:41:13.000Z</published>
    <updated>2015-08-15T09:15:03.301Z</updated>
    <content type="html"><![CDATA[<h3 id="书籍概要">书籍概要</h3><h5 id="书名">书名</h5><p>三体(全三册)</p>
<h5 id="作者">作者</h5><p>刘慈欣 </p>
<h5 id="作者简介">作者简介</h5><p>刘慈欣，男，汉族，1963年6月出生，1985年10月参加工作，山西阳泉人，本科学历，高级工程师，科幻作家，中国作协会员，山西省作协会员，阳泉市作协副主席，中国科幻小说代表作家之一。<br>代表作：篇小说《超新星纪元》、《球状闪电》、《三体》三部曲等，中短篇小说《流浪地球》、《乡村教师》、《朝闻道》、《全频带阻塞干扰》等。<br>其中《三体》三部曲被普遍认为是中国科幻文学的里程碑之作，将中国科幻推上了世界的高度。</p>
<h5 id="阅读方式">阅读方式</h5><p>电子书</p>
<h5 id="阅读日期">阅读日期</h5><p>2015.5</p>
<h3 id="书籍简介">书籍简介</h3><p>《三体》是一部三部曲小说集，分别是《三体Ⅰ：地球往事》，《三体Ⅱ：黑暗森林》和《三体Ⅲ：死神永生》，由于《三体Ⅰ：地球往事》最早以“地球往事”为名在《科幻世界》上连载，因此《三体》又名“地球往事三部曲”。</p>
<p>《三体Ⅰ：地球往事》：文革期间，我国军方实施了探寻外星文明的“红岸工程”，通过大功率天线向宇宙发射信号，同时监听可能的反馈。一个女科学家意外的与其他行星的智能生命建立了联系，这个行星有三个恒星，即所谓的三体世界。三体世界的三颗恒星不会像我们的太阳那样规律的运行，导致他们经常处于极热或极寒的恶劣生存环境中。三体世界拥有比地球更为发达的文明，在得知地球文明的消息后，三体世界制定了侵略地球的计划，包括两部分内容，一是派向地球派遣舰队，大概400年后到地球；二是研究出了先进工具——智子并派到了地球，简单来讲就是一个智能的微观粒子，设定是可以对人类的活动进行无所不在的监视，并可以通过干扰物理粒子对撞机实验压制人类科学的发展。</p>
<p>《三体Ⅱ：黑暗森林》：人类了解了三体世界的入侵计划，积极制定的各种应对策略。由于智子无所不在，所以人类进行“面壁人计划”，“面壁者”被赋予调动各种资源的权力，要在心中制定出应对策略，而不能暴露真实的战略意图。有一位面壁者发现了所谓的“宇宙社会学”和其推论“黑暗森林”法则，前者认为“生存是文明的第一需要。文明不断增长和扩张，但宇宙中的物质总量保持不变。”后者认为宇宙如同一片黑暗的森林，每一个宇宙文明都是带枪的猎手，他们出于生存需要，发现一个文明就要消灭一个文明（乍一看挺奇怪，但想到被欧洲人大量屠杀甚至灭族的北美印第安人和澳大利亚土著，这样的设定又显得合情合理）。面壁人发现根据这一规则，只要向宇宙发射地球和三体世界的坐标，这两个文明就都会被摧毁，以此威胁三体世界撤回舰队。</p>
<p>《三体Ⅲ：死神永生》：三体世界破坏了人类从地球向宇宙发展信号的能力。但信号意外的由人类的太空船发出，三体世界被更高级的文明毁灭。人类发出了三体世界的坐标的同时也暴露了自己，太阳系也随时面临被毁灭的威胁。由于了解了三体世界和其他世界是因恒星被撞击而毁灭，人类制定了“掩体计划”，即希望以太阳系内巨大的木星为掩体，躲过太阳被撞击的灾难。但高级文明发现太阳系和其他星系的星系结构不同，没有使用直接撞击恒星的方式，而是采用了“降维攻击”——即使三维空间及其中的所有物质跌落到二维的方式毁灭太阳系，只有飞行速度达到光速的物体才能躲过这次攻击。两个地球人乘坐唯一的一架光速飞船逃离了太阳系，遇到了在三体威胁时就逃离到太空的地球人。他们建立了一个封闭的小宇宙，在里面生活了一段时间后，乘坐飞船向宇宙的深处驶去。</p>
<h3 id="摘录笔记">摘录笔记</h3><ol>
<li>在中国，任何超脱飞扬的思想都会砰然坠地——现实的引力实在是太沉重了。</li>
<li>给时光以生命，给岁月以文明。</li>
<li>我们都是阴沟里的虫子,但总还是得有人仰望星空.</li>
<li>碑是那么小，与其说是为了纪念，更像是为了忘却。</li>
<li>死亡是一座永恒的灯塔，不管你驶向何方，最终都会朝它转向。一切都将逝去，只有死神永生</li>
<li>在宇宙间，一个技术文明等级的重要标志，是它能够控制和使用的微观维度。对于基本粒子的一线使用，从我们那些长毛裸体的祖先在山洞中生起篝火时就开始了，对化学反应的控制，就是在一维层次上操控微观粒子。当然，这种控制也是从低级到高级，从篝火到后来的蒸汽机，再到后来的发电机；现在，人类对微观粒子一维控制的水平已达到了顶峰，有了计算机，也有了你们的纳米材料。但这一切，都局限于对微观维度的一维控制，在宇宙间一个更高级的文明看来，篝火和计算机、纳米材料等等是没有本质区别的，同属于一个层次，这也是他们仍将人类看成虫子的原因。</li>
<li>记忆是一条早已干涸的河流，只在毫无生气的河床中剩下零落的砾石。</li>
<li>越透明的东西越神秘，字宙本身就是透明的，只要目力能及，你想看多远就看多远，但越看越神秘。</li>
<li>城市就是森林，每一个男人都是猎手，每一个女人都是陷阱。</li>
<li>给岁月以文明，而不是给文明以岁月。</li>
<li>一知道在哪儿，世界就变得像一张地图那么小了；不知道在哪儿，感觉世界才广阔。</li>
<li>你的无畏来源于无知。</li>
<li>空不是无，空是一种存在，你得用空这种存在填满自己。</li>
<li>要知道，一个文学人物十分钟的行为，可能是她十年的经历的反映。</li>
<li>上帝是个无耻的老赌徒，他抛弃了我们！</li>
<li>在这寒冷无际的草原间，燃烧是无意义的，一腔热血喷出来，比一堆牛粪凉的更快，还不如后者有实用价值。但燃烧是他们的命运，他们是燃烧的一代。</li>
<li>我是个懒散的人，从小就是，住校时碗从来不洗，被子从来不叠，对什么都提不起兴趣，懒得学习，甚至懒得玩，每天迷迷糊糊地混日子。</li>
<li>唯一不可阻挡的是时间，它像一把利刃，无声地切开了坚硬和柔软的一切，恒定的向前推进着，没有任何东西能够使它的行径产生丝毫颠簸，它却改变着一切。</li>
</ol>
<h3 id="心得笔记">心得笔记</h3><p>让我们套用《三体》中多维空间的设定，就像三维空间投影到二维空间形成一个平面那样，看看如果《三体》投影到战略这个维度上，会带给我们哪些启示。“面壁计划”和“掩体计划”是《三体》中最为重要的两个谋略，一个成功，一个失败，但无疑都会引发读者关于战略的深入思考。</p>
<p>“面壁计划”博弈的双方是地球人和三体人，三体人掌握地球人行动的完全信息，拥有比地球更高级的文明，地球人针对这种情况制定了面壁计划，其核心就是“选定一批战略计划的制订者和领导者，他们完全依靠自己的思维制订战略计划，不与外界进行任何形式的交流，计划的真实战略思想、完成的步骤和最后目的都只藏在他们的大脑中，我们称他们为面壁者，这个古代东方冥思者的名称很好地反映了他们的工作特点。”[10]在《三体》的故事中，作为面壁人的逻辑根据叶文洁的提示，通过研究“宇宙社会学”发现了“黑暗森林”法则，从而建立了对三体世界的威慑，保卫了地球的安全。</p>
<p>而“掩体计划”中博弈的双方是地球人和更高等级的外星文明。地球人掌握的信息是外星人会对地球进行打击，时间不确定，但从其他星球被毁灭的经历可以总结出被打击的规律，于是地球人以巨大的木星为掩体，制定了应对计划，但是外星人出其不意的采用了一种降维攻击的方式，太阳系覆灭，只有少数地球人幸运逃离。<br>从这两个案例中，我们不难发现，成功的战略看似荒诞，但是简单有效、一招制敌；而失败的战略则看似未雨绸缪，使人觉得从现在到未来的每项计划都合情合理，步步稳妥，但是结果却不堪一击。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="书籍概要">书籍概要</h3><h5 id="书名">书名</h5><p>三体(全三册)</p>
<h5 id="作者">作者</h5><p>刘慈欣 </p>
<h5 id="作者简介">作者简介</h5><p>刘慈欣，男，汉族，1963年6月出生，1985年10]]>
    </summary>
    
      <category term="三体" scheme="https://wustrive2008.github.io/tags/%E4%B8%89%E4%BD%93/"/>
    
      <category term="刘慈欣" scheme="https://wustrive2008.github.io/tags/%E5%88%98%E6%85%88%E6%AC%A3/"/>
    
      <category term="电影" scheme="https://wustrive2008.github.io/tags/%E7%94%B5%E5%BD%B1/"/>
    
      <category term="读书笔记" scheme="https://wustrive2008.github.io/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="读书笔记" scheme="https://wustrive2008.github.io/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
</feed>